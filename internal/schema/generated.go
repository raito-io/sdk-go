// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package schema

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/raito-io/sdk-go/types/models"
)

type AbacComparisonExpressionAggregatorInput struct {
	Operator BinaryExpressionAggregatorOperator `json:"operator"`
	Operands []AbacComparisonExpressionInput    `json:"operands"`
}

// GetOperator returns AbacComparisonExpressionAggregatorInput.Operator, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionAggregatorInput) GetOperator() BinaryExpressionAggregatorOperator {
	return v.Operator
}

// GetOperands returns AbacComparisonExpressionAggregatorInput.Operands, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionAggregatorInput) GetOperands() []AbacComparisonExpressionInput {
	return v.Operands
}

type AbacComparisonExpressionComparisonInput struct {
	Operator     AbacComparisonExpressionComparisonOperator `json:"operator"`
	LeftOperand  string                                     `json:"leftOperand"`
	RightOperand AbacComparisonExpressionOperandInput       `json:"rightOperand"`
}

// GetOperator returns AbacComparisonExpressionComparisonInput.Operator, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionComparisonInput) GetOperator() AbacComparisonExpressionComparisonOperator {
	return v.Operator
}

// GetLeftOperand returns AbacComparisonExpressionComparisonInput.LeftOperand, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionComparisonInput) GetLeftOperand() string { return v.LeftOperand }

// GetRightOperand returns AbacComparisonExpressionComparisonInput.RightOperand, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionComparisonInput) GetRightOperand() AbacComparisonExpressionOperandInput {
	return v.RightOperand
}

type AbacComparisonExpressionComparisonOperator string

const (
	AbacComparisonExpressionComparisonOperatorPropertyequals     AbacComparisonExpressionComparisonOperator = "PropertyEquals"
	AbacComparisonExpressionComparisonOperatorPropertyin         AbacComparisonExpressionComparisonOperator = "PropertyIn"
	AbacComparisonExpressionComparisonOperatorHastag             AbacComparisonExpressionComparisonOperator = "HasTag"
	AbacComparisonExpressionComparisonOperatorContainstag        AbacComparisonExpressionComparisonOperator = "ContainsTag"
	AbacComparisonExpressionComparisonOperatorPropertystartswith AbacComparisonExpressionComparisonOperator = "PropertyStartsWith"
	AbacComparisonExpressionComparisonOperatorPropertyendswith   AbacComparisonExpressionComparisonOperator = "PropertyEndsWith"
	AbacComparisonExpressionComparisonOperatorPropertycontains   AbacComparisonExpressionComparisonOperator = "PropertyContains"
)

var AllAbacComparisonExpressionComparisonOperator = []AbacComparisonExpressionComparisonOperator{
	AbacComparisonExpressionComparisonOperatorPropertyequals,
	AbacComparisonExpressionComparisonOperatorPropertyin,
	AbacComparisonExpressionComparisonOperatorHastag,
	AbacComparisonExpressionComparisonOperatorContainstag,
	AbacComparisonExpressionComparisonOperatorPropertystartswith,
	AbacComparisonExpressionComparisonOperatorPropertyendswith,
	AbacComparisonExpressionComparisonOperatorPropertycontains,
}

type AbacComparisonExpressionInput struct {
	Literal         *bool                                         `json:"literal,omitempty"`
	Comparison      *AbacComparisonExpressionComparisonInput      `json:"comparison,omitempty"`
	Aggregator      *AbacComparisonExpressionAggregatorInput      `json:"aggregator,omitempty"`
	UnaryExpression *AbacComparisonExpressionUnaryExpressionInput `json:"unaryExpression,omitempty"`
}

// GetLiteral returns AbacComparisonExpressionInput.Literal, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionInput) GetLiteral() *bool { return v.Literal }

// GetComparison returns AbacComparisonExpressionInput.Comparison, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionInput) GetComparison() *AbacComparisonExpressionComparisonInput {
	return v.Comparison
}

// GetAggregator returns AbacComparisonExpressionInput.Aggregator, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionInput) GetAggregator() *AbacComparisonExpressionAggregatorInput {
	return v.Aggregator
}

// GetUnaryExpression returns AbacComparisonExpressionInput.UnaryExpression, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionInput) GetUnaryExpression() *AbacComparisonExpressionUnaryExpressionInput {
	return v.UnaryExpression
}

type AbacComparisonExpressionLiteral struct {
	Bool       *bool    `json:"bool,omitempty"`
	String     *string  `json:"string,omitempty"`
	StringList []string `json:"stringList"`
}

// GetBool returns AbacComparisonExpressionLiteral.Bool, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionLiteral) GetBool() *bool { return v.Bool }

// GetString returns AbacComparisonExpressionLiteral.String, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionLiteral) GetString() *string { return v.String }

// GetStringList returns AbacComparisonExpressionLiteral.StringList, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionLiteral) GetStringList() []string { return v.StringList }

type AbacComparisonExpressionOperandInput struct {
	Literal *AbacComparisonExpressionLiteral `json:"literal,omitempty"`
}

// GetLiteral returns AbacComparisonExpressionOperandInput.Literal, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionOperandInput) GetLiteral() *AbacComparisonExpressionLiteral {
	return v.Literal
}

type AbacComparisonExpressionUnaryExpressionInput struct {
	Operator BinaryExpressionUnaryExpressionOperator `json:"operator"`
	Operand  AbacComparisonExpressionInput           `json:"operand"`
}

// GetOperator returns AbacComparisonExpressionUnaryExpressionInput.Operator, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionUnaryExpressionInput) GetOperator() BinaryExpressionUnaryExpressionOperator {
	return v.Operator
}

// GetOperand returns AbacComparisonExpressionUnaryExpressionInput.Operand, and is useful for accessing the field via an interface.
func (v *AbacComparisonExpressionUnaryExpressionInput) GetOperand() AbacComparisonExpressionInput {
	return v.Operand
}

// AccessProvider includes the GraphQL fields of AccessProvider requested by the fragment AccessProvider.
type AccessProvider struct {
	Id                   string                                      `json:"id"`
	IsSample             bool                                        `json:"isSample"`
	CreatedAt            time.Time                                   `json:"createdAt"`
	ModifiedAt           time.Time                                   `json:"modifiedAt"`
	Name                 string                                      `json:"name"`
	NamingHint           *string                                     `json:"namingHint"`
	State                models.AccessProviderState                  `json:"state"`
	Action               models.AccessProviderAction                 `json:"action"`
	Category             *AccessProviderCategoryGrantCategory        `json:"category"`
	Description          string                                      `json:"description"`
	PolicyRule           *string                                     `json:"policyRule"`
	External             bool                                        `json:"external"`
	WhatType             WhoAndWhatType                              `json:"whatType"`
	WhatAbacRule         *AccessProviderWhatAbacRule                 `json:"whatAbacRule"`
	WhoType              WhoAndWhatType                              `json:"whoType"`
	WhoAbacRule          *AccessProviderWhoAbacRule                  `json:"whoAbacRule"`
	NotInternalizable    bool                                        `json:"notInternalizable"`
	Complete             *bool                                       `json:"complete"`
	Locks                []AccessProviderLocksAccessProviderLockData `json:"locks"`
	SyncData             []AccessProviderSyncData                    `json:"syncData"`
	CurrentUserPartOfWho *bool                                       `json:"currentUserPartOfWho"`
}

// GetId returns AccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetId() string { return v.Id }

// GetIsSample returns AccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetIsSample() bool { return v.IsSample }

// GetCreatedAt returns AccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns AccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetName returns AccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetName() string { return v.Name }

// GetNamingHint returns AccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNamingHint() *string { return v.NamingHint }

// GetState returns AccessProvider.State, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetState() models.AccessProviderState { return v.State }

// GetAction returns AccessProvider.Action, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetAction() models.AccessProviderAction { return v.Action }

// GetCategory returns AccessProvider.Category, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetCategory() *AccessProviderCategoryGrantCategory { return v.Category }

// GetDescription returns AccessProvider.Description, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetDescription() string { return v.Description }

// GetPolicyRule returns AccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetPolicyRule() *string { return v.PolicyRule }

// GetExternal returns AccessProvider.External, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetExternal() bool { return v.External }

// GetWhatType returns AccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhatType() WhoAndWhatType { return v.WhatType }

// GetWhatAbacRule returns AccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule { return v.WhatAbacRule }

// GetWhoType returns AccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhoType() WhoAndWhatType { return v.WhoType }

// GetWhoAbacRule returns AccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule { return v.WhoAbacRule }

// GetNotInternalizable returns AccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNotInternalizable() bool { return v.NotInternalizable }

// GetComplete returns AccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetComplete() *bool { return v.Complete }

// GetLocks returns AccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData { return v.Locks }

// GetSyncData returns AccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetSyncData() []AccessProviderSyncData { return v.SyncData }

// GetCurrentUserPartOfWho returns AccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetCurrentUserPartOfWho() *bool { return v.CurrentUserPartOfWho }

// AccessProviderCategoryGrantCategory includes the requested fields of the GraphQL type GrantCategory.
type AccessProviderCategoryGrantCategory struct {
	GrantCategory `json:"-"`
}

// GetId returns AccessProviderCategoryGrantCategory.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderCategoryGrantCategory) GetId() string { return v.GrantCategory.Id }

// GetName returns AccessProviderCategoryGrantCategory.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderCategoryGrantCategory) GetName() string { return v.GrantCategory.Name }

// GetIsSystem returns AccessProviderCategoryGrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *AccessProviderCategoryGrantCategory) GetIsSystem() bool { return v.GrantCategory.IsSystem }

// GetIsDefault returns AccessProviderCategoryGrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *AccessProviderCategoryGrantCategory) GetIsDefault() bool { return v.GrantCategory.IsDefault }

func (v *AccessProviderCategoryGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderCategoryGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderCategoryGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategory)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderCategoryGrantCategory struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IsSystem bool `json:"isSystem"`

	IsDefault bool `json:"isDefault"`
}

func (v *AccessProviderCategoryGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderCategoryGrantCategory) __premarshalJSON() (*__premarshalAccessProviderCategoryGrantCategory, error) {
	var retval __premarshalAccessProviderCategoryGrantCategory

	retval.Id = v.GrantCategory.Id
	retval.Name = v.GrantCategory.Name
	retval.IsSystem = v.GrantCategory.IsSystem
	retval.IsDefault = v.GrantCategory.IsDefault
	return &retval, nil
}

type AccessProviderDataSourceInput struct {
	DataSource string  `json:"dataSource"`
	Type       *string `json:"type,omitempty"`
}

// GetDataSource returns AccessProviderDataSourceInput.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourceInput) GetDataSource() string { return v.DataSource }

// GetType returns AccessProviderDataSourceInput.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourceInput) GetType() *string { return v.Type }

type AccessProviderFilterInput struct {
	Actions            []models.AccessProviderAction `json:"actions"`
	States             []models.AccessProviderState  `json:"states"`
	Categories         []string                      `json:"categories"`
	External           *bool                         `json:"external,omitempty"`
	Search             *string                       `json:"search,omitempty"`
	DataSource         *string                       `json:"dataSource,omitempty"`
	CanEditWho         *bool                         `json:"canEditWho,omitempty"`
	CanEditInheritance *bool                         `json:"canEditInheritance,omitempty"`
	CanEditWhat        *bool                         `json:"canEditWhat,omitempty"`
	CanLinkFrom        *CanLinkFilter                `json:"canLinkFrom,omitempty"`
	CanLinkTo          *CanLinkFilter                `json:"canLinkTo,omitempty"`
	Exclude            []string                      `json:"exclude"`
	Source             *string                       `json:"source,omitempty"`
	Owners             []string                      `json:"owners"`
	HasTags            []TagFilter                   `json:"hasTags"`
	DataObjectInWhat   *string                       `json:"dataObjectInWhat,omitempty"`
}

// GetActions returns AccessProviderFilterInput.Actions, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetActions() []models.AccessProviderAction { return v.Actions }

// GetStates returns AccessProviderFilterInput.States, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetStates() []models.AccessProviderState { return v.States }

// GetCategories returns AccessProviderFilterInput.Categories, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCategories() []string { return v.Categories }

// GetExternal returns AccessProviderFilterInput.External, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetExternal() *bool { return v.External }

// GetSearch returns AccessProviderFilterInput.Search, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetSearch() *string { return v.Search }

// GetDataSource returns AccessProviderFilterInput.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetDataSource() *string { return v.DataSource }

// GetCanEditWho returns AccessProviderFilterInput.CanEditWho, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditWho() *bool { return v.CanEditWho }

// GetCanEditInheritance returns AccessProviderFilterInput.CanEditInheritance, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditInheritance() *bool { return v.CanEditInheritance }

// GetCanEditWhat returns AccessProviderFilterInput.CanEditWhat, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditWhat() *bool { return v.CanEditWhat }

// GetCanLinkFrom returns AccessProviderFilterInput.CanLinkFrom, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanLinkFrom() *CanLinkFilter { return v.CanLinkFrom }

// GetCanLinkTo returns AccessProviderFilterInput.CanLinkTo, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanLinkTo() *CanLinkFilter { return v.CanLinkTo }

// GetExclude returns AccessProviderFilterInput.Exclude, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetExclude() []string { return v.Exclude }

// GetSource returns AccessProviderFilterInput.Source, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetSource() *string { return v.Source }

// GetOwners returns AccessProviderFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetOwners() []string { return v.Owners }

// GetHasTags returns AccessProviderFilterInput.HasTags, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetHasTags() []TagFilter { return v.HasTags }

// GetDataObjectInWhat returns AccessProviderFilterInput.DataObjectInWhat, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetDataObjectInWhat() *string { return v.DataObjectInWhat }

type AccessProviderInput struct {
	Name                   *string                         `json:"name,omitempty"`
	NamingHint             *string                         `json:"namingHint,omitempty"`
	Action                 *models.AccessProviderAction    `json:"action,omitempty"`
	Description            *string                         `json:"description,omitempty"`
	Category               *string                         `json:"category,omitempty"`
	Source                 *string                         `json:"source,omitempty"`
	WhoType                *WhoAndWhatType                 `json:"whoType,omitempty"`
	WhoAbacRule            *WhoAbacRuleInput               `json:"whoAbacRule,omitempty"`
	WhoItems               []WhoItemInput                  `json:"whoItems"`
	WhatType               *WhoAndWhatType                 `json:"whatType,omitempty"`
	WhatAbacRule           *WhatAbacRuleInput              `json:"whatAbacRule,omitempty"`
	PolicyRule             *string                         `json:"policyRule,omitempty"`
	FilterCriteria         *DataComparisonExpressionInput  `json:"filterCriteria,omitempty"`
	DataSources            []AccessProviderDataSourceInput `json:"dataSources"`
	CommonWhatDataObjectId *string                         `json:"commonWhatDataObjectId,omitempty"`
	WhatDataObjects        []AccessProviderWhatInputDO     `json:"whatDataObjects"`
	WhatAccessProviders    []AccessProviderWhatInputAP     `json:"whatAccessProviders"`
	Locks                  []AccessProviderLockDataInput   `json:"locks"`
	External               *bool                           `json:"external,omitempty"`
}

// GetName returns AccessProviderInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetName() *string { return v.Name }

// GetNamingHint returns AccessProviderInput.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetNamingHint() *string { return v.NamingHint }

// GetAction returns AccessProviderInput.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetAction() *models.AccessProviderAction { return v.Action }

// GetDescription returns AccessProviderInput.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetDescription() *string { return v.Description }

// GetCategory returns AccessProviderInput.Category, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetCategory() *string { return v.Category }

// GetSource returns AccessProviderInput.Source, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetSource() *string { return v.Source }

// GetWhoType returns AccessProviderInput.WhoType, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhoType() *WhoAndWhatType { return v.WhoType }

// GetWhoAbacRule returns AccessProviderInput.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhoAbacRule() *WhoAbacRuleInput { return v.WhoAbacRule }

// GetWhoItems returns AccessProviderInput.WhoItems, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhoItems() []WhoItemInput { return v.WhoItems }

// GetWhatType returns AccessProviderInput.WhatType, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatType() *WhoAndWhatType { return v.WhatType }

// GetWhatAbacRule returns AccessProviderInput.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatAbacRule() *WhatAbacRuleInput { return v.WhatAbacRule }

// GetPolicyRule returns AccessProviderInput.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetPolicyRule() *string { return v.PolicyRule }

// GetFilterCriteria returns AccessProviderInput.FilterCriteria, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetFilterCriteria() *DataComparisonExpressionInput {
	return v.FilterCriteria
}

// GetDataSources returns AccessProviderInput.DataSources, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetDataSources() []AccessProviderDataSourceInput { return v.DataSources }

// GetCommonWhatDataObjectId returns AccessProviderInput.CommonWhatDataObjectId, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetCommonWhatDataObjectId() *string { return v.CommonWhatDataObjectId }

// GetWhatDataObjects returns AccessProviderInput.WhatDataObjects, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatDataObjects() []AccessProviderWhatInputDO {
	return v.WhatDataObjects
}

// GetWhatAccessProviders returns AccessProviderInput.WhatAccessProviders, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatAccessProviders() []AccessProviderWhatInputAP {
	return v.WhatAccessProviders
}

// GetLocks returns AccessProviderInput.Locks, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetLocks() []AccessProviderLockDataInput { return v.Locks }

// GetExternal returns AccessProviderInput.External, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetExternal() *bool { return v.External }

type AccessProviderLock string

const (
	AccessProviderLockWholock         AccessProviderLock = "WhoLock"
	AccessProviderLockInheritancelock AccessProviderLock = "InheritanceLock"
	AccessProviderLockWhatlock        AccessProviderLock = "WhatLock"
	AccessProviderLockNamelock        AccessProviderLock = "NameLock"
	AccessProviderLockDeletelock      AccessProviderLock = "DeleteLock"
	AccessProviderLockOwnerlock       AccessProviderLock = "OwnerLock"
)

var AllAccessProviderLock = []AccessProviderLock{
	AccessProviderLockWholock,
	AccessProviderLockInheritancelock,
	AccessProviderLockWhatlock,
	AccessProviderLockNamelock,
	AccessProviderLockDeletelock,
	AccessProviderLockOwnerlock,
}

type AccessProviderLockDataInput struct {
	LockKey AccessProviderLock              `json:"lockKey"`
	Details *AccessProviderLockDetailsInput `json:"details,omitempty"`
}

// GetLockKey returns AccessProviderLockDataInput.LockKey, and is useful for accessing the field via an interface.
func (v *AccessProviderLockDataInput) GetLockKey() AccessProviderLock { return v.LockKey }

// GetDetails returns AccessProviderLockDataInput.Details, and is useful for accessing the field via an interface.
func (v *AccessProviderLockDataInput) GetDetails() *AccessProviderLockDetailsInput { return v.Details }

// AccessProviderLockDetails includes the GraphQL fields of AccessProviderLockDetails requested by the fragment AccessProviderLockDetails.
type AccessProviderLockDetails struct {
	Reason *string `json:"reason"`
}

// GetReason returns AccessProviderLockDetails.Reason, and is useful for accessing the field via an interface.
func (v *AccessProviderLockDetails) GetReason() *string { return v.Reason }

type AccessProviderLockDetailsInput struct {
	Reason   *string                 `json:"reason,omitempty"`
	LockType *AccessProviderLockType `json:"lockType,omitempty"`
}

// GetReason returns AccessProviderLockDetailsInput.Reason, and is useful for accessing the field via an interface.
func (v *AccessProviderLockDetailsInput) GetReason() *string { return v.Reason }

// GetLockType returns AccessProviderLockDetailsInput.LockType, and is useful for accessing the field via an interface.
func (v *AccessProviderLockDetailsInput) GetLockType() *AccessProviderLockType { return v.LockType }

type AccessProviderLockType string

const (
	AccessProviderLockTypeImportexport AccessProviderLockType = "ImportExport"
	AccessProviderLockTypeUseronly     AccessProviderLockType = "UserOnly"
)

var AllAccessProviderLockType = []AccessProviderLockType{
	AccessProviderLockTypeImportexport,
	AccessProviderLockTypeUseronly,
}

// AccessProviderLocks includes the GraphQL fields of AccessProviderLockData requested by the fragment AccessProviderLocks.
type AccessProviderLocks struct {
	LockKey AccessProviderLock                                  `json:"lockKey"`
	Details AccessProviderLocksDetailsAccessProviderLockDetails `json:"details"`
}

// GetLockKey returns AccessProviderLocks.LockKey, and is useful for accessing the field via an interface.
func (v *AccessProviderLocks) GetLockKey() AccessProviderLock { return v.LockKey }

// GetDetails returns AccessProviderLocks.Details, and is useful for accessing the field via an interface.
func (v *AccessProviderLocks) GetDetails() AccessProviderLocksDetailsAccessProviderLockDetails {
	return v.Details
}

// AccessProviderLocksAccessProviderLockData includes the requested fields of the GraphQL type AccessProviderLockData.
type AccessProviderLocksAccessProviderLockData struct {
	AccessProviderLocks `json:"-"`
}

// GetLockKey returns AccessProviderLocksAccessProviderLockData.LockKey, and is useful for accessing the field via an interface.
func (v *AccessProviderLocksAccessProviderLockData) GetLockKey() AccessProviderLock {
	return v.AccessProviderLocks.LockKey
}

// GetDetails returns AccessProviderLocksAccessProviderLockData.Details, and is useful for accessing the field via an interface.
func (v *AccessProviderLocksAccessProviderLockData) GetDetails() AccessProviderLocksDetailsAccessProviderLockDetails {
	return v.AccessProviderLocks.Details
}

func (v *AccessProviderLocksAccessProviderLockData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderLocksAccessProviderLockData
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderLocksAccessProviderLockData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderLocks)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderLocksAccessProviderLockData struct {
	LockKey AccessProviderLock `json:"lockKey"`

	Details AccessProviderLocksDetailsAccessProviderLockDetails `json:"details"`
}

func (v *AccessProviderLocksAccessProviderLockData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderLocksAccessProviderLockData) __premarshalJSON() (*__premarshalAccessProviderLocksAccessProviderLockData, error) {
	var retval __premarshalAccessProviderLocksAccessProviderLockData

	retval.LockKey = v.AccessProviderLocks.LockKey
	retval.Details = v.AccessProviderLocks.Details
	return &retval, nil
}

// AccessProviderLocksDetailsAccessProviderLockDetails includes the requested fields of the GraphQL type AccessProviderLockDetails.
type AccessProviderLocksDetailsAccessProviderLockDetails struct {
	AccessProviderLockDetails `json:"-"`
}

// GetReason returns AccessProviderLocksDetailsAccessProviderLockDetails.Reason, and is useful for accessing the field via an interface.
func (v *AccessProviderLocksDetailsAccessProviderLockDetails) GetReason() *string {
	return v.AccessProviderLockDetails.Reason
}

func (v *AccessProviderLocksDetailsAccessProviderLockDetails) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderLocksDetailsAccessProviderLockDetails
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderLocksDetailsAccessProviderLockDetails = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderLockDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderLocksDetailsAccessProviderLockDetails struct {
	Reason *string `json:"reason"`
}

func (v *AccessProviderLocksDetailsAccessProviderLockDetails) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderLocksDetailsAccessProviderLockDetails) __premarshalJSON() (*__premarshalAccessProviderLocksDetailsAccessProviderLockDetails, error) {
	var retval __premarshalAccessProviderLocksDetailsAccessProviderLockDetails

	retval.Reason = v.AccessProviderLockDetails.Reason
	return &retval, nil
}

type AccessProviderOrderByInput struct {
	Name       *Sort `json:"name,omitempty"`
	CreatedAt  *Sort `json:"createdAt,omitempty"`
	ModifiedAt *Sort `json:"modifiedAt,omitempty"`
	Action     *Sort `json:"action,omitempty"`
	State      *Sort `json:"state,omitempty"`
	Sync       *Sort `json:"sync,omitempty"`
}

// GetName returns AccessProviderOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetName() *Sort { return v.Name }

// GetCreatedAt returns AccessProviderOrderByInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetCreatedAt() *Sort { return v.CreatedAt }

// GetModifiedAt returns AccessProviderOrderByInput.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetModifiedAt() *Sort { return v.ModifiedAt }

// GetAction returns AccessProviderOrderByInput.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetAction() *Sort { return v.Action }

// GetState returns AccessProviderOrderByInput.State, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetState() *Sort { return v.State }

// GetSync returns AccessProviderOrderByInput.Sync, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetSync() *Sort { return v.Sync }

// AccessProviderPage includes the GraphQL fields of PagedResult requested by the fragment AccessProviderPage.
type AccessProviderPage struct {
	PageInfo *AccessProviderPagePageInfo   `json:"pageInfo"`
	Edges    []AccessProviderPageEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderPage.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderPage) GetPageInfo() *AccessProviderPagePageInfo { return v.PageInfo }

// GetEdges returns AccessProviderPage.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderPage) GetEdges() []AccessProviderPageEdgesEdge { return v.Edges }

// AccessProviderPageEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderPageEdgesEdge struct {
	Cursor *string                              `json:"cursor"`
	Node   *AccessProviderPageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderPageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderPageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdge) GetNode() *AccessProviderPageEdgesEdgeNodeItem { return v.Node }

func (v *AccessProviderPageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderPageEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderPageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderPageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderPageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPageEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderPageEdgesEdge, error) {
	var retval __premarshalAccessProviderPageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderPageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderPageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderPageEdgesEdgeNodeAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns AccessProviderPageEdgesEdgeNodeAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns AccessProviderPageEdgesEdgeNodeAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns AccessProviderPageEdgesEdgeNodeAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns AccessProviderPageEdgesEdgeNodeAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns AccessProviderPageEdgesEdgeNodeAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetName() string {
	return v.AccessProvider.Name
}

// GetNamingHint returns AccessProviderPageEdgesEdgeNodeAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns AccessProviderPageEdgesEdgeNodeAccessProvider.State, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns AccessProviderPageEdgesEdgeNodeAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns AccessProviderPageEdgesEdgeNodeAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns AccessProviderPageEdgesEdgeNodeAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns AccessProviderPageEdgesEdgeNodeAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns AccessProviderPageEdgesEdgeNodeAccessProvider.External, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns AccessProviderPageEdgesEdgeNodeAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns AccessProviderPageEdgesEdgeNodeAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns AccessProviderPageEdgesEdgeNodeAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns AccessProviderPageEdgesEdgeNodeAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns AccessProviderPageEdgesEdgeNodeAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPageEdgesEdgeNodeAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPageEdgesEdgeNodeAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderPageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) __premarshalJSON() (*__premarshalAccessProviderPageEdgesEdgeNodeAccessProvider, error) {
	var retval __premarshalAccessProviderPageEdgesEdgeNodeAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderPageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderPageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderPageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderPageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderPageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderPageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderPageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderPageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type AccessProviderPageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderPageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderPageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderPageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type AccessProviderPageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderPageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderPageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderPageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderPageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderPageEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderPageEdgesEdgeNodeAccessProvider
// AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail
// AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult
// AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderPageEdgesEdgeNodeAccessProviderMatch
// AccessProviderPageEdgesEdgeNodeAccessRequest
// AccessProviderPageEdgesEdgeNodeAccessRequestNotification
// AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderPageEdgesEdgeNodeAccessWhatItem
// AccessProviderPageEdgesEdgeNodeAccessWhoItem
// AccessProviderPageEdgesEdgeNodeAccount
// AccessProviderPageEdgesEdgeNodeAuditDiffLog
// AccessProviderPageEdgesEdgeNodeComment
// AccessProviderPageEdgesEdgeNodeCommentNotification
// AccessProviderPageEdgesEdgeNodeDataAccessReturnItem
// AccessProviderPageEdgesEdgeNodeDataObject
// AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation
// AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult
// AccessProviderPageEdgesEdgeNodeDataObjectType
// AccessProviderPageEdgesEdgeNodeDataSource
// AccessProviderPageEdgesEdgeNodeDataSourceShare
// AccessProviderPageEdgesEdgeNodeDataUsage
// AccessProviderPageEdgesEdgeNodeDatasourceNotification
// AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderPageEdgesEdgeNodeGroup
// AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderPageEdgesEdgeNodeIdentityStore
// AccessProviderPageEdgesEdgeNodeIssue
// AccessProviderPageEdgesEdgeNodeJob
// AccessProviderPageEdgesEdgeNodeJobLogMsg
// AccessProviderPageEdgesEdgeNodePromiseDetails
// AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject
// AccessProviderPageEdgesEdgeNodeQueryHistoryStatement
// AccessProviderPageEdgesEdgeNodeRole
// AccessProviderPageEdgesEdgeNodeRoleAssignment
// AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderPageEdgesEdgeNodeRoleDelegationNotification
// AccessProviderPageEdgesEdgeNodeSearchResultItem
// AccessProviderPageEdgesEdgeNodeStringValue
// AccessProviderPageEdgesEdgeNodeTag
// AccessProviderPageEdgesEdgeNodeTask
// AccessProviderPageEdgesEdgeNodeTaskNotification
// AccessProviderPageEdgesEdgeNodeUser
// AccessProviderPageEdgesEdgeNodeUserAccessReturnItem
// AccessProviderPageEdgesEdgeNodeUserInsightsResult
// AccessProviderPageEdgesEdgeNodeUserSubtask
// AccessProviderPageEdgesEdgeNodeUserTask
type AccessProviderPageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderPageEdgesEdgeNodeItem(b []byte, v *AccessProviderPageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderPageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderPageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderPageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderPageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(AccessProviderPageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderPageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderPageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderPageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderPageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderPageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderPageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderPageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(AccessProviderPageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderPageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderPageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderPageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(AccessProviderPageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderPageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderPageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderPageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(AccessProviderPageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderPageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderPageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderPageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderPageEdgesEdgeNodeItem(v *AccessProviderPageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderPageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderPageEdgesEdgeNodeAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderPageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderPageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderPageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderPageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderPageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type AccessProviderPageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderPageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderPageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type AccessProviderPageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderPageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type AccessProviderPageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderPageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderPageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderPageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderPageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type AccessProviderPageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderPageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderPageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderPagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderPagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderPagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderPagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderPagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderPagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderPagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPagePageInfo) __premarshalJSON() (*__premarshalAccessProviderPagePageInfo, error) {
	var retval __premarshalAccessProviderPagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// AccessProviderSyncData includes the requested fields of the GraphQL type SyncData.
type AccessProviderSyncData struct {
	SyncData `json:"-"`
}

// GetDataSource returns AccessProviderSyncData.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderSyncData) GetDataSource() SyncDataDataSource { return v.SyncData.DataSource }

// GetAccessProviderType returns AccessProviderSyncData.AccessProviderType, and is useful for accessing the field via an interface.
func (v *AccessProviderSyncData) GetAccessProviderType() *SyncDataAccessProviderType {
	return v.SyncData.AccessProviderType
}

// GetActualName returns AccessProviderSyncData.ActualName, and is useful for accessing the field via an interface.
func (v *AccessProviderSyncData) GetActualName() *string { return v.SyncData.ActualName }

// GetMaskType returns AccessProviderSyncData.MaskType, and is useful for accessing the field via an interface.
func (v *AccessProviderSyncData) GetMaskType() *SyncDataMaskType { return v.SyncData.MaskType }

// GetSyncStatus returns AccessProviderSyncData.SyncStatus, and is useful for accessing the field via an interface.
func (v *AccessProviderSyncData) GetSyncStatus() SyncStatus { return v.SyncData.SyncStatus }

func (v *AccessProviderSyncData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderSyncData
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderSyncData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SyncData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderSyncData struct {
	DataSource SyncDataDataSource `json:"dataSource"`

	AccessProviderType *SyncDataAccessProviderType `json:"accessProviderType"`

	ActualName *string `json:"actualName"`

	MaskType *SyncDataMaskType `json:"maskType"`

	SyncStatus SyncStatus `json:"syncStatus"`
}

func (v *AccessProviderSyncData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderSyncData) __premarshalJSON() (*__premarshalAccessProviderSyncData, error) {
	var retval __premarshalAccessProviderSyncData

	retval.DataSource = v.SyncData.DataSource
	retval.AccessProviderType = v.SyncData.AccessProviderType
	retval.ActualName = v.SyncData.ActualName
	retval.MaskType = v.SyncData.MaskType
	retval.SyncStatus = v.SyncData.SyncStatus
	return &retval, nil
}

// AccessProviderWhatAbacRule includes the requested fields of the GraphQL type WhatAbacRule.
type AccessProviderWhatAbacRule struct {
	WhatAbacRule `json:"-"`
}

// GetPermissions returns AccessProviderWhatAbacRule.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacRule) GetPermissions() []string { return v.WhatAbacRule.Permissions }

// GetGlobalPermissions returns AccessProviderWhatAbacRule.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacRule) GetGlobalPermissions() []string {
	return v.WhatAbacRule.GlobalPermissions
}

// GetDoTypes returns AccessProviderWhatAbacRule.DoTypes, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacRule) GetDoTypes() []string { return v.WhatAbacRule.DoTypes }

// GetRuleJson returns AccessProviderWhatAbacRule.RuleJson, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacRule) GetRuleJson() *string { return v.WhatAbacRule.RuleJson }

func (v *AccessProviderWhatAbacRule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAbacRule
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAbacRule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WhatAbacRule)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatAbacRule struct {
	Permissions []string `json:"permissions"`

	GlobalPermissions []string `json:"globalPermissions"`

	DoTypes []string `json:"doTypes"`

	RuleJson *string `json:"ruleJson"`
}

func (v *AccessProviderWhatAbacRule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAbacRule) __premarshalJSON() (*__premarshalAccessProviderWhatAbacRule, error) {
	var retval __premarshalAccessProviderWhatAbacRule

	retval.Permissions = v.WhatAbacRule.Permissions
	retval.GlobalPermissions = v.WhatAbacRule.GlobalPermissions
	retval.DoTypes = v.WhatAbacRule.DoTypes
	retval.RuleJson = v.WhatAbacRule.RuleJson
	return &retval, nil
}

// AccessProviderWhatAbacScopeList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhatAbacScopeList.
type AccessProviderWhatAbacScopeList struct {
	PageInfo *AccessProviderWhatAbacScopeListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhatAbacScopeListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhatAbacScopeList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeList) GetPageInfo() *AccessProviderWhatAbacScopeListPageInfo {
	return v.PageInfo
}

// GetEdges returns AccessProviderWhatAbacScopeList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeList) GetEdges() []AccessProviderWhatAbacScopeListEdgesEdge {
	return v.Edges
}

// AccessProviderWhatAbacScopeListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhatAbacScopeListEdgesEdge struct {
	Cursor *string                                           `json:"cursor"`
	Node   *AccessProviderWhatAbacScopeListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhatAbacScopeListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhatAbacScopeListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdge) GetNode() *AccessProviderWhatAbacScopeListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhatAbacScopeListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAbacScopeListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAbacScopeListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhatAbacScopeListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhatAbacScopeListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhatAbacScopeListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAbacScopeListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhatAbacScopeListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhatAbacScopeListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhatAbacScopeListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhatAbacScopeListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeComment) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject struct {
	Typename   *string `json:"__typename"`
	DataObject `json:"-"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetTypename() *string {
	return v.Typename
}

// GetId returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetId() string {
	return v.DataObject.Id
}

// GetName returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetName() string {
	return v.DataObject.Name
}

// GetFullName returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.FullName, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetFullName() string {
	return v.DataObject.FullName
}

// GetType returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetType() string {
	return v.DataObject.Type
}

// GetDataType returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.DataType, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetDataType() *string {
	return v.DataObject.DataType
}

// GetDeleted returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetDeleted() bool {
	return v.DataObject.Deleted
}

// GetDescription returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetDescription() string {
	return v.DataObject.Description
}

// GetDataSource returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetDataSource() *DataObjectDataSource {
	return v.DataObject.DataSource
}

// GetParent returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject.Parent, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) GetParent() *DataObjectParentDataObject {
	return v.DataObject.Parent
}

func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`

	Description string `json:"description"`

	DataSource *DataObjectDataSource `json:"dataSource"`

	Parent *DataObjectParentDataObject `json:"parent"`
}

func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) __premarshalJSON() (*__premarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject, error) {
	var retval __premarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject

	retval.Typename = v.Typename
	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	retval.Description = v.DataObject.Description
	retval.DataSource = v.DataObject.DataSource
	retval.Parent = v.DataObject.Parent
	return &retval, nil
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhatAbacScopeListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount
// AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhatAbacScopeListEdgesEdgeNodeComment
// AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage
// AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup
// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore
// AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue
// AccessProviderWhatAbacScopeListEdgesEdgeNodeJob
// AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg
// AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails
// AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject
// AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement
// AccessProviderWhatAbacScopeListEdgesEdgeNodeRole
// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment
// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue
// AccessProviderWhatAbacScopeListEdgesEdgeNodeTag
// AccessProviderWhatAbacScopeListEdgesEdgeNodeTask
// AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification
// AccessProviderWhatAbacScopeListEdgesEdgeNodeUser
// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult
// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask
// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask
type AccessProviderWhatAbacScopeListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhatAbacScopeListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhatAbacScopeListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatAbacScopeListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhatAbacScopeListEdgesEdgeNodeItem(v *AccessProviderWhatAbacScopeListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhatAbacScopeListEdgesEdgeNodeDataObject
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatAbacScopeListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeJobLogMsg) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodePromiseDetails) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignment) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeStringValue) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserSubtask) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListEdgesEdgeNodeUserTask) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAbacScopeListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhatAbacScopeListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhatAbacScopeListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListPageInfo) GetHasNextPage() *bool {
	return v.PageInfo.HasNextPage
}

// GetStartCursor returns AccessProviderWhatAbacScopeListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAbacScopeListPageInfo) GetStartCursor() *string {
	return v.PageInfo.StartCursor
}

func (v *AccessProviderWhatAbacScopeListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAbacScopeListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAbacScopeListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatAbacScopeListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhatAbacScopeListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAbacScopeListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhatAbacScopeListPageInfo, error) {
	var retval __premarshalAccessProviderWhatAbacScopeListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

type AccessProviderWhatAccessProviderFilterInput struct {
	Actions    []models.AccessProviderAction `json:"actions"`
	Categories []string                      `json:"categories"`
	Owners     []string                      `json:"owners"`
	HasTags    []TagFilter                   `json:"hasTags"`
}

// GetActions returns AccessProviderWhatAccessProviderFilterInput.Actions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderFilterInput) GetActions() []models.AccessProviderAction {
	return v.Actions
}

// GetCategories returns AccessProviderWhatAccessProviderFilterInput.Categories, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderFilterInput) GetCategories() []string { return v.Categories }

// GetOwners returns AccessProviderWhatAccessProviderFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderFilterInput) GetOwners() []string { return v.Owners }

// GetHasTags returns AccessProviderWhatAccessProviderFilterInput.HasTags, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderFilterInput) GetHasTags() []TagFilter { return v.HasTags }

// AccessProviderWhatAccessProviderList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhatAccessProviderList.
type AccessProviderWhatAccessProviderList struct {
	PageInfo *AccessProviderWhatAccessProviderListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhatAccessProviderListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhatAccessProviderList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderList) GetPageInfo() *AccessProviderWhatAccessProviderListPageInfo {
	return v.PageInfo
}

// GetEdges returns AccessProviderWhatAccessProviderList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderList) GetEdges() []AccessProviderWhatAccessProviderListEdgesEdge {
	return v.Edges
}

// AccessProviderWhatAccessProviderListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhatAccessProviderListEdgesEdge struct {
	Cursor *string                                                `json:"cursor"`
	Node   *AccessProviderWhatAccessProviderListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhatAccessProviderListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhatAccessProviderListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdge) GetNode() *AccessProviderWhatAccessProviderListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhatAccessProviderListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAccessProviderListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAccessProviderListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhatAccessProviderListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhatAccessProviderListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhatAccessProviderListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAccessProviderListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhatAccessProviderListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhatAccessProviderListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhatAccessProviderListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhatAccessProviderListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename                     *string `json:"__typename"`
	AccessWhatAccessProviderItem `json:"-"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// GetAccessProvider returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem.AccessProvider, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) GetAccessProvider() *AccessWhatAccessProviderItemAccessProvider {
	return v.AccessWhatAccessProviderItem.AccessProvider
}

// GetExpiresAt returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) GetExpiresAt() *time.Time {
	return v.AccessWhatAccessProviderItem.ExpiresAt
}

func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessWhatAccessProviderItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`

	AccessProvider *AccessWhatAccessProviderItemAccessProvider `json:"accessProvider"`

	ExpiresAt *time.Time `json:"expiresAt"`
}

func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) __premarshalJSON() (*__premarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem, error) {
	var retval __premarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem

	retval.Typename = v.Typename
	retval.AccessProvider = v.AccessWhatAccessProviderItem.AccessProvider
	retval.ExpiresAt = v.AccessWhatAccessProviderItem.ExpiresAt
	return &retval, nil
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeComment) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhatAccessProviderListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount
// AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhatAccessProviderListEdgesEdgeNodeComment
// AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage
// AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup
// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore
// AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue
// AccessProviderWhatAccessProviderListEdgesEdgeNodeJob
// AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg
// AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails
// AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject
// AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement
// AccessProviderWhatAccessProviderListEdgesEdgeNodeRole
// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment
// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue
// AccessProviderWhatAccessProviderListEdgesEdgeNodeTag
// AccessProviderWhatAccessProviderListEdgesEdgeNodeTask
// AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification
// AccessProviderWhatAccessProviderListEdgesEdgeNodeUser
// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult
// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask
// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask
type AccessProviderWhatAccessProviderListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhatAccessProviderListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhatAccessProviderListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatAccessProviderListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhatAccessProviderListEdgesEdgeNodeItem(v *AccessProviderWhatAccessProviderListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatAccessProviderListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeJob) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeJobLogMsg) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodePromiseDetails) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRole) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignment) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeStringValue) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTag) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTask) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUser) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserSubtask) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListEdgesEdgeNodeUserTask) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatAccessProviderListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhatAccessProviderListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhatAccessProviderListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListPageInfo) GetHasNextPage() *bool {
	return v.PageInfo.HasNextPage
}

// GetStartCursor returns AccessProviderWhatAccessProviderListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatAccessProviderListPageInfo) GetStartCursor() *string {
	return v.PageInfo.StartCursor
}

func (v *AccessProviderWhatAccessProviderListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatAccessProviderListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatAccessProviderListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatAccessProviderListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhatAccessProviderListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatAccessProviderListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhatAccessProviderListPageInfo, error) {
	var retval __premarshalAccessProviderWhatAccessProviderListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

type AccessProviderWhatDoByNameInput struct {
	Fullname   string `json:"fullname"`
	Datasource string `json:"datasource"`
}

// GetFullname returns AccessProviderWhatDoByNameInput.Fullname, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatDoByNameInput) GetFullname() string { return v.Fullname }

// GetDatasource returns AccessProviderWhatDoByNameInput.Datasource, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatDoByNameInput) GetDatasource() string { return v.Datasource }

type AccessProviderWhatInputAP struct {
	AccessProvider string     `json:"accessProvider"`
	ExpiresAt      *time.Time `json:"expiresAt,omitempty"`
}

// GetAccessProvider returns AccessProviderWhatInputAP.AccessProvider, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputAP) GetAccessProvider() string { return v.AccessProvider }

// GetExpiresAt returns AccessProviderWhatInputAP.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputAP) GetExpiresAt() *time.Time { return v.ExpiresAt }

type AccessProviderWhatInputDO struct {
	Permissions       []*string                         `json:"permissions,omitempty"`
	GlobalPermissions []*string                         `json:"globalPermissions,omitempty"`
	DataObjects       []*string                         `json:"dataObjects,omitempty"`
	DataObjectByName  []AccessProviderWhatDoByNameInput `json:"dataObjectByName"`
	ExpiresAt         *time.Time                        `json:"expiresAt,omitempty"`
}

// GetPermissions returns AccessProviderWhatInputDO.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetPermissions() []*string { return v.Permissions }

// GetGlobalPermissions returns AccessProviderWhatInputDO.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetGlobalPermissions() []*string { return v.GlobalPermissions }

// GetDataObjects returns AccessProviderWhatInputDO.DataObjects, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetDataObjects() []*string { return v.DataObjects }

// GetDataObjectByName returns AccessProviderWhatInputDO.DataObjectByName, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetDataObjectByName() []AccessProviderWhatDoByNameInput {
	return v.DataObjectByName
}

// GetExpiresAt returns AccessProviderWhatInputDO.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetExpiresAt() *time.Time { return v.ExpiresAt }

// AccessProviderWhatList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhatList.
type AccessProviderWhatList struct {
	PageInfo *AccessProviderWhatListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhatListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhatList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatList) GetPageInfo() *AccessProviderWhatListPageInfo { return v.PageInfo }

// GetEdges returns AccessProviderWhatList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatList) GetEdges() []AccessProviderWhatListEdgesEdge { return v.Edges }

// AccessProviderWhatListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhatListEdgesEdge struct {
	Cursor *string                                  `json:"cursor"`
	Node   *AccessProviderWhatListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhatListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhatListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdge) GetNode() *AccessProviderWhatListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhatListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhatListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhatListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhatListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhatListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhatListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhatListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhatListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhatListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhatListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhatListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhatListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhatListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhatItem struct {
	Typename                   *string `json:"__typename"`
	AccessProviderWhatListItem `json:"-"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// GetDataObject returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.DataObject, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetDataObject() *AccessProviderWhatListItemDataObject {
	return v.AccessProviderWhatListItem.DataObject
}

// GetGlobalPermissions returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetGlobalPermissions() []*string {
	return v.AccessProviderWhatListItem.GlobalPermissions
}

// GetPermissions returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetPermissions() []*string {
	return v.AccessProviderWhatListItem.Permissions
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListEdgesEdgeNodeAccessWhatItem
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListEdgesEdgeNodeAccessWhatItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`

	DataObject *AccessProviderWhatListItemDataObject `json:"dataObject"`

	GlobalPermissions []*string `json:"globalPermissions"`

	Permissions []*string `json:"permissions"`
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) __premarshalJSON() (*__premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem, error) {
	var retval __premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem

	retval.Typename = v.Typename
	retval.DataObject = v.AccessProviderWhatListItem.DataObject
	retval.GlobalPermissions = v.AccessProviderWhatListItem.GlobalPermissions
	retval.Permissions = v.AccessProviderWhatListItem.Permissions
	return &retval, nil
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhatListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhatListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhatListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type AccessProviderWhatListEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeCommentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhatListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhatListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type AccessProviderWhatListEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhatListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhatListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhatListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhatListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhatListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhatListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhatListEdgesEdgeNodeAccessProvider
// AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail
// AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult
// AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhatListEdgesEdgeNodeAccessRequest
// AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhatListEdgesEdgeNodeAccount
// AccessProviderWhatListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhatListEdgesEdgeNodeComment
// AccessProviderWhatListEdgesEdgeNodeCommentNotification
// AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeDataObject
// AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation
// AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult
// AccessProviderWhatListEdgesEdgeNodeDataObjectType
// AccessProviderWhatListEdgesEdgeNodeDataSource
// AccessProviderWhatListEdgesEdgeNodeDataSourceShare
// AccessProviderWhatListEdgesEdgeNodeDataUsage
// AccessProviderWhatListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhatListEdgesEdgeNodeGroup
// AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeIdentityStore
// AccessProviderWhatListEdgesEdgeNodeIssue
// AccessProviderWhatListEdgesEdgeNodeJob
// AccessProviderWhatListEdgesEdgeNodeJobLogMsg
// AccessProviderWhatListEdgesEdgeNodePromiseDetails
// AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject
// AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement
// AccessProviderWhatListEdgesEdgeNodeRole
// AccessProviderWhatListEdgesEdgeNodeRoleAssignment
// AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification
// AccessProviderWhatListEdgesEdgeNodeSearchResultItem
// AccessProviderWhatListEdgesEdgeNodeStringValue
// AccessProviderWhatListEdgesEdgeNodeTag
// AccessProviderWhatListEdgesEdgeNodeTask
// AccessProviderWhatListEdgesEdgeNodeTaskNotification
// AccessProviderWhatListEdgesEdgeNodeUser
// AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeUserInsightsResult
// AccessProviderWhatListEdgesEdgeNodeUserSubtask
// AccessProviderWhatListEdgesEdgeNodeUserTask
type AccessProviderWhatListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeStringValue) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhatListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhatListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhatListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhatListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhatListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhatListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhatListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhatListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(AccessProviderWhatListEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhatListEdgesEdgeNodeItem(v *AccessProviderWhatListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhatListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhatListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhatListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhatListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhatListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhatListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhatListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhatListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type AccessProviderWhatListEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhatListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhatListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhatListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhatListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type AccessProviderWhatListEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhatListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhatListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListItem includes the GraphQL fields of AccessWhatItem requested by the fragment AccessProviderWhatListItem.
type AccessProviderWhatListItem struct {
	DataObject        *AccessProviderWhatListItemDataObject `json:"dataObject"`
	GlobalPermissions []*string                             `json:"globalPermissions"`
	Permissions       []*string                             `json:"permissions"`
}

// GetDataObject returns AccessProviderWhatListItem.DataObject, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetDataObject() *AccessProviderWhatListItemDataObject {
	return v.DataObject
}

// GetGlobalPermissions returns AccessProviderWhatListItem.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetGlobalPermissions() []*string { return v.GlobalPermissions }

// GetPermissions returns AccessProviderWhatListItem.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetPermissions() []*string { return v.Permissions }

// AccessProviderWhatListItemDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatListItemDataObject struct {
	DataObject `json:"-"`
}

// GetId returns AccessProviderWhatListItemDataObject.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetId() string { return v.DataObject.Id }

// GetName returns AccessProviderWhatListItemDataObject.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetName() string { return v.DataObject.Name }

// GetFullName returns AccessProviderWhatListItemDataObject.FullName, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetFullName() string { return v.DataObject.FullName }

// GetType returns AccessProviderWhatListItemDataObject.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetType() string { return v.DataObject.Type }

// GetDataType returns AccessProviderWhatListItemDataObject.DataType, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDataType() *string { return v.DataObject.DataType }

// GetDeleted returns AccessProviderWhatListItemDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDeleted() bool { return v.DataObject.Deleted }

// GetDescription returns AccessProviderWhatListItemDataObject.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDescription() string {
	return v.DataObject.Description
}

// GetDataSource returns AccessProviderWhatListItemDataObject.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDataSource() *DataObjectDataSource {
	return v.DataObject.DataSource
}

// GetParent returns AccessProviderWhatListItemDataObject.Parent, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetParent() *DataObjectParentDataObject {
	return v.DataObject.Parent
}

func (v *AccessProviderWhatListItemDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListItemDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListItemDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListItemDataObject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`

	Description string `json:"description"`

	DataSource *DataObjectDataSource `json:"dataSource"`

	Parent *DataObjectParentDataObject `json:"parent"`
}

func (v *AccessProviderWhatListItemDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListItemDataObject) __premarshalJSON() (*__premarshalAccessProviderWhatListItemDataObject, error) {
	var retval __premarshalAccessProviderWhatListItemDataObject

	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	retval.Description = v.DataObject.Description
	retval.DataSource = v.DataObject.DataSource
	retval.Parent = v.DataObject.Parent
	return &retval, nil
}

// AccessProviderWhatListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhatListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhatListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListPageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderWhatListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListPageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderWhatListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhatListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhatListPageInfo, error) {
	var retval __premarshalAccessProviderWhatListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// AccessProviderWhoAbacRule includes the requested fields of the GraphQL type WhoAbacRule.
type AccessProviderWhoAbacRule struct {
	WhoAbacRule `json:"-"`
}

// GetPromiseDuration returns AccessProviderWhoAbacRule.PromiseDuration, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoAbacRule) GetPromiseDuration() *int64 { return v.WhoAbacRule.PromiseDuration }

// GetType returns AccessProviderWhoAbacRule.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoAbacRule) GetType() AccessWhoItemType { return v.WhoAbacRule.Type }

// GetRuleJson returns AccessProviderWhoAbacRule.RuleJson, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoAbacRule) GetRuleJson() *string { return v.WhoAbacRule.RuleJson }

func (v *AccessProviderWhoAbacRule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoAbacRule
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoAbacRule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WhoAbacRule)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoAbacRule struct {
	PromiseDuration *int64 `json:"promiseDuration"`

	Type AccessWhoItemType `json:"type"`

	RuleJson *string `json:"ruleJson"`
}

func (v *AccessProviderWhoAbacRule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoAbacRule) __premarshalJSON() (*__premarshalAccessProviderWhoAbacRule, error) {
	var retval __premarshalAccessProviderWhoAbacRule

	retval.PromiseDuration = v.WhoAbacRule.PromiseDuration
	retval.Type = v.WhoAbacRule.Type
	retval.RuleJson = v.WhoAbacRule.RuleJson
	return &retval, nil
}

// AccessProviderWhoList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhoList.
type AccessProviderWhoList struct {
	PageInfo *AccessProviderWhoListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhoListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhoList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoList) GetPageInfo() *AccessProviderWhoListPageInfo { return v.PageInfo }

// GetEdges returns AccessProviderWhoList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoList) GetEdges() []AccessProviderWhoListEdgesEdge { return v.Edges }

// AccessProviderWhoListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhoListEdgesEdge struct {
	Cursor *string                                 `json:"cursor"`
	Node   *AccessProviderWhoListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhoListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhoListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdge) GetNode() *AccessProviderWhoListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhoListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhoListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhoListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhoListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhoListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhoListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhoListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhoListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhoListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhoListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhoListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhoListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhoListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhoItem struct {
	Typename                  *string `json:"__typename"`
	AccessProviderWhoListItem `json:"-"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// GetExpiresAfter returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetExpiresAfter() *int64 {
	return v.AccessProviderWhoListItem.ExpiresAfter
}

// GetExpiresAt returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetExpiresAt() *time.Time {
	return v.AccessProviderWhoListItem.ExpiresAt
}

// GetPromiseDuration returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.PromiseDuration, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetPromiseDuration() *int64 {
	return v.AccessProviderWhoListItem.PromiseDuration
}

// GetType returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetType() AccessWhoItemType {
	return v.AccessProviderWhoListItem.Type
}

// GetItem returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Item, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetItem() AccessProviderWhoListItemItemAccessWhoItemItem {
	return v.AccessProviderWhoListItem.Item
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListEdgesEdgeNodeAccessWhoItem
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListEdgesEdgeNodeAccessWhoItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`

	ExpiresAfter *int64 `json:"expiresAfter"`

	ExpiresAt *time.Time `json:"expiresAt"`

	PromiseDuration *int64 `json:"promiseDuration"`

	Type AccessWhoItemType `json:"type"`

	Item json.RawMessage `json:"item"`
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) __premarshalJSON() (*__premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem, error) {
	var retval __premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem

	retval.Typename = v.Typename
	retval.ExpiresAfter = v.AccessProviderWhoListItem.ExpiresAfter
	retval.ExpiresAt = v.AccessProviderWhoListItem.ExpiresAt
	retval.PromiseDuration = v.AccessProviderWhoListItem.PromiseDuration
	retval.Type = v.AccessProviderWhoListItem.Type
	{

		dst := &retval.Item
		src := v.AccessProviderWhoListItem.Item
		var err error
		*dst, err = __marshalAccessProviderWhoListItemItemAccessWhoItemItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.AccessProviderWhoListItem.Item: %w", err)
		}
	}
	return &retval, nil
}

// AccessProviderWhoListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhoListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhoListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhoListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type AccessProviderWhoListEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeCommentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhoListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhoListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhoListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type AccessProviderWhoListEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhoListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhoListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhoListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhoListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhoListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhoListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhoListEdgesEdgeNodeAccessProvider
// AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail
// AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult
// AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhoListEdgesEdgeNodeAccessRequest
// AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhoListEdgesEdgeNodeAccount
// AccessProviderWhoListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhoListEdgesEdgeNodeComment
// AccessProviderWhoListEdgesEdgeNodeCommentNotification
// AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeDataObject
// AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation
// AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult
// AccessProviderWhoListEdgesEdgeNodeDataObjectType
// AccessProviderWhoListEdgesEdgeNodeDataSource
// AccessProviderWhoListEdgesEdgeNodeDataSourceShare
// AccessProviderWhoListEdgesEdgeNodeDataUsage
// AccessProviderWhoListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhoListEdgesEdgeNodeGroup
// AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeIdentityStore
// AccessProviderWhoListEdgesEdgeNodeIssue
// AccessProviderWhoListEdgesEdgeNodeJob
// AccessProviderWhoListEdgesEdgeNodeJobLogMsg
// AccessProviderWhoListEdgesEdgeNodePromiseDetails
// AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject
// AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement
// AccessProviderWhoListEdgesEdgeNodeRole
// AccessProviderWhoListEdgesEdgeNodeRoleAssignment
// AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification
// AccessProviderWhoListEdgesEdgeNodeSearchResultItem
// AccessProviderWhoListEdgesEdgeNodeStringValue
// AccessProviderWhoListEdgesEdgeNodeTag
// AccessProviderWhoListEdgesEdgeNodeTask
// AccessProviderWhoListEdgesEdgeNodeTaskNotification
// AccessProviderWhoListEdgesEdgeNodeUser
// AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeUserInsightsResult
// AccessProviderWhoListEdgesEdgeNodeUserSubtask
// AccessProviderWhoListEdgesEdgeNodeUserTask
type AccessProviderWhoListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeStringValue) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhoListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhoListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhoListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhoListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhoListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhoListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhoListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhoListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(AccessProviderWhoListEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhoListEdgesEdgeNodeItem(v *AccessProviderWhoListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhoListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhoListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhoListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhoListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhoListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhoListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhoListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhoListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type AccessProviderWhoListEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhoListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhoListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhoListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhoListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type AccessProviderWhoListEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserInsightsResult) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhoListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhoListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItem includes the GraphQL fields of AccessWhoItem requested by the fragment AccessProviderWhoListItem.
type AccessProviderWhoListItem struct {
	ExpiresAfter    *int64                                         `json:"expiresAfter"`
	ExpiresAt       *time.Time                                     `json:"expiresAt"`
	PromiseDuration *int64                                         `json:"promiseDuration"`
	Type            AccessWhoItemType                              `json:"type"`
	Item            AccessProviderWhoListItemItemAccessWhoItemItem `json:"-"`
}

// GetExpiresAfter returns AccessProviderWhoListItem.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetExpiresAfter() *int64 { return v.ExpiresAfter }

// GetExpiresAt returns AccessProviderWhoListItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetPromiseDuration returns AccessProviderWhoListItem.PromiseDuration, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetPromiseDuration() *int64 { return v.PromiseDuration }

// GetType returns AccessProviderWhoListItem.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetType() AccessWhoItemType { return v.Type }

// GetItem returns AccessProviderWhoListItem.Item, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetItem() AccessProviderWhoListItemItemAccessWhoItemItem {
	return v.Item
}

func (v *AccessProviderWhoListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListItem
		Item json.RawMessage `json:"item"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Item
		src := firstPass.Item
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAccessProviderWhoListItemItemAccessWhoItemItem(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhoListItem.Item: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhoListItem struct {
	ExpiresAfter *int64 `json:"expiresAfter"`

	ExpiresAt *time.Time `json:"expiresAt"`

	PromiseDuration *int64 `json:"promiseDuration"`

	Type AccessWhoItemType `json:"type"`

	Item json.RawMessage `json:"item"`
}

func (v *AccessProviderWhoListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListItem) __premarshalJSON() (*__premarshalAccessProviderWhoListItem, error) {
	var retval __premarshalAccessProviderWhoListItem

	retval.ExpiresAfter = v.ExpiresAfter
	retval.ExpiresAt = v.ExpiresAt
	retval.PromiseDuration = v.PromiseDuration
	retval.Type = v.Type
	{

		dst := &retval.Item
		src := v.Item
		var err error
		*dst, err = __marshalAccessProviderWhoListItemItemAccessWhoItemItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccessProviderWhoListItem.Item: %w", err)
		}
	}
	return &retval, nil
}

// AccessProviderWhoListItemItemAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhoListItemItemAccessProvider struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
}

// GetTypename returns AccessProviderWhoListItemItemAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns AccessProviderWhoListItemItemAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetId() string { return v.Id }

// GetName returns AccessProviderWhoListItemItemAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetName() string { return v.Name }

// AccessProviderWhoListItemItemAccessWhoItemItem includes the requested fields of the GraphQL interface AccessWhoItemItem.
//
// AccessProviderWhoListItemItemAccessWhoItemItem is implemented by the following types:
// AccessProviderWhoListItemItemAccessProvider
// AccessProviderWhoListItemItemDataShareRecipient
// AccessProviderWhoListItemItemDataSource
// AccessProviderWhoListItemItemGroup
// AccessProviderWhoListItemItemInvalidInputError
// AccessProviderWhoListItemItemNotFoundError
// AccessProviderWhoListItemItemUser
type AccessProviderWhoListItemItemAccessWhoItemItem interface {
	implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhoListItemItemAccessProvider) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemDataShareRecipient) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemDataSource) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemGroup) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemInvalidInputError) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemNotFoundError) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemUser) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}

func __unmarshalAccessProviderWhoListItemItemAccessWhoItemItem(b []byte, v *AccessProviderWhoListItemItemAccessWhoItemItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhoListItemItemAccessProvider)
		return json.Unmarshal(b, *v)
	case "DataShareRecipient":
		*v = new(AccessProviderWhoListItemItemDataShareRecipient)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhoListItemItemDataSource)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhoListItemItemGroup)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(AccessProviderWhoListItemItemInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AccessProviderWhoListItemItemNotFoundError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhoListItemItemUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessWhoItemItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListItemItemAccessWhoItemItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhoListItemItemAccessWhoItemItem(v *AccessProviderWhoListItemItemAccessWhoItemItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhoListItemItemAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemDataShareRecipient:
		typename = "DataShareRecipient"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemDataShareRecipient
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhoListItemItemUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListItemItemAccessWhoItemItem: "%T"`, v)
	}
}

// AccessProviderWhoListItemItemDataShareRecipient includes the requested fields of the GraphQL type DataShareRecipient.
type AccessProviderWhoListItemItemDataShareRecipient struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListItemItemDataShareRecipient.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemDataShareRecipient) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItemItemDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhoListItemItemDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListItemItemDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemDataSource) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItemItemGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhoListItemItemGroup struct {
	Typename      *string                                         `json:"__typename"`
	Name          string                                          `json:"name"`
	Id            string                                          `json:"id"`
	IdentityStore AccessProviderWhoListItemItemGroupIdentityStore `json:"identityStore"`
}

// GetTypename returns AccessProviderWhoListItemItemGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetTypename() *string { return v.Typename }

// GetName returns AccessProviderWhoListItemItemGroup.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetName() string { return v.Name }

// GetId returns AccessProviderWhoListItemItemGroup.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetId() string { return v.Id }

// GetIdentityStore returns AccessProviderWhoListItemItemGroup.IdentityStore, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetIdentityStore() AccessProviderWhoListItemItemGroupIdentityStore {
	return v.IdentityStore
}

// AccessProviderWhoListItemItemGroupIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhoListItemItemGroupIdentityStore struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AccessProviderWhoListItemItemGroupIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroupIdentityStore) GetId() string { return v.Id }

// GetName returns AccessProviderWhoListItemItemGroupIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroupIdentityStore) GetName() string { return v.Name }

// AccessProviderWhoListItemItemInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AccessProviderWhoListItemItemInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListItemItemInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemInvalidInputError) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItemItemNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AccessProviderWhoListItemItemNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListItemItemNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemNotFoundError) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItemItemUser includes the requested fields of the GraphQL type User.
type AccessProviderWhoListItemItemUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns AccessProviderWhoListItemItemUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetTypename() *string { return v.Typename }

// GetId returns AccessProviderWhoListItemItemUser.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetId() string { return v.User.Id }

// GetName returns AccessProviderWhoListItemItemUser.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetName() string { return v.User.Name }

// GetEmail returns AccessProviderWhoListItemItemUser.Email, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns AccessProviderWhoListItemItemUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns AccessProviderWhoListItemItemUser.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetType() UserType { return v.User.Type }

func (v *AccessProviderWhoListItemItemUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListItemItemUser
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListItemItemUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoListItemItemUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *AccessProviderWhoListItemItemUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListItemItemUser) __premarshalJSON() (*__premarshalAccessProviderWhoListItemItemUser, error) {
	var retval __premarshalAccessProviderWhoListItemItemUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// AccessProviderWhoListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhoListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhoListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListPageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderWhoListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListPageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderWhoListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhoListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhoListPageInfo, error) {
	var retval __premarshalAccessProviderWhoListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

type AccessProviderWhoOrderByInput struct {
	Name *Sort `json:"name,omitempty"`
}

// GetName returns AccessProviderWhoOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoOrderByInput) GetName() *Sort { return v.Name }

// AccessWhatAccessProviderItem includes the GraphQL fields of AccessWhatAccessProviderItem requested by the fragment AccessWhatAccessProviderItem.
type AccessWhatAccessProviderItem struct {
	AccessProvider *AccessWhatAccessProviderItemAccessProvider `json:"accessProvider"`
	ExpiresAt      *time.Time                                  `json:"expiresAt"`
}

// GetAccessProvider returns AccessWhatAccessProviderItem.AccessProvider, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItem) GetAccessProvider() *AccessWhatAccessProviderItemAccessProvider {
	return v.AccessProvider
}

// GetExpiresAt returns AccessWhatAccessProviderItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItem) GetExpiresAt() *time.Time { return v.ExpiresAt }

// AccessWhatAccessProviderItemAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessWhatAccessProviderItemAccessProvider struct {
	AccessProvider `json:"-"`
}

// GetId returns AccessWhatAccessProviderItemAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns AccessWhatAccessProviderItemAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns AccessWhatAccessProviderItemAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns AccessWhatAccessProviderItemAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns AccessWhatAccessProviderItemAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns AccessWhatAccessProviderItemAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns AccessWhatAccessProviderItemAccessProvider.State, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns AccessWhatAccessProviderItemAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns AccessWhatAccessProviderItemAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns AccessWhatAccessProviderItemAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns AccessWhatAccessProviderItemAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns AccessWhatAccessProviderItemAccessProvider.External, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns AccessWhatAccessProviderItemAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns AccessWhatAccessProviderItemAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns AccessWhatAccessProviderItemAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns AccessWhatAccessProviderItemAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns AccessWhatAccessProviderItemAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns AccessWhatAccessProviderItemAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns AccessWhatAccessProviderItemAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns AccessWhatAccessProviderItemAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns AccessWhatAccessProviderItemAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *AccessWhatAccessProviderItemAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *AccessWhatAccessProviderItemAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessWhatAccessProviderItemAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessWhatAccessProviderItemAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessWhatAccessProviderItemAccessProvider struct {
	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *AccessWhatAccessProviderItemAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessWhatAccessProviderItemAccessProvider) __premarshalJSON() (*__premarshalAccessWhatAccessProviderItemAccessProvider, error) {
	var retval __premarshalAccessWhatAccessProviderItemAccessProvider

	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

type AccessWhatFilterInput struct {
	Search           *string     `json:"search,omitempty"`
	IncludeDeleted   *bool       `json:"includeDeleted,omitempty"`
	Owners           []string    `json:"owners"`
	HasTags          []TagFilter `json:"hasTags"`
	TargetDataObject *string     `json:"targetDataObject,omitempty"`
}

// GetSearch returns AccessWhatFilterInput.Search, and is useful for accessing the field via an interface.
func (v *AccessWhatFilterInput) GetSearch() *string { return v.Search }

// GetIncludeDeleted returns AccessWhatFilterInput.IncludeDeleted, and is useful for accessing the field via an interface.
func (v *AccessWhatFilterInput) GetIncludeDeleted() *bool { return v.IncludeDeleted }

// GetOwners returns AccessWhatFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *AccessWhatFilterInput) GetOwners() []string { return v.Owners }

// GetHasTags returns AccessWhatFilterInput.HasTags, and is useful for accessing the field via an interface.
func (v *AccessWhatFilterInput) GetHasTags() []TagFilter { return v.HasTags }

// GetTargetDataObject returns AccessWhatFilterInput.TargetDataObject, and is useful for accessing the field via an interface.
func (v *AccessWhatFilterInput) GetTargetDataObject() *string { return v.TargetDataObject }

type AccessWhatOrderByInput struct {
	Name *Sort `json:"name,omitempty"`
}

// GetName returns AccessWhatOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessWhatOrderByInput) GetName() *Sort { return v.Name }

type AccessWhoItemType string

const (
	AccessWhoItemTypeWhogrant   AccessWhoItemType = "WhoGrant"
	AccessWhoItemTypeWhopromise AccessWhoItemType = "WhoPromise"
)

var AllAccessWhoItemType = []AccessWhoItemType{
	AccessWhoItemTypeWhogrant,
	AccessWhoItemTypeWhopromise,
}

// ActivateAccessProviderActivateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type ActivateAccessProviderActivateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns ActivateAccessProviderActivateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns ActivateAccessProviderActivateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns ActivateAccessProviderActivateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns ActivateAccessProviderActivateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns ActivateAccessProviderActivateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns ActivateAccessProviderActivateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns ActivateAccessProviderActivateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns ActivateAccessProviderActivateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns ActivateAccessProviderActivateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns ActivateAccessProviderActivateAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns ActivateAccessProviderActivateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns ActivateAccessProviderActivateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns ActivateAccessProviderActivateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns ActivateAccessProviderActivateAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns ActivateAccessProviderActivateAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns ActivateAccessProviderActivateAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns ActivateAccessProviderActivateAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns ActivateAccessProviderActivateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns ActivateAccessProviderActivateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns ActivateAccessProviderActivateAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns ActivateAccessProviderActivateAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns ActivateAccessProviderActivateAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *ActivateAccessProviderActivateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivateAccessProviderActivateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivateAccessProviderActivateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalActivateAccessProviderActivateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *ActivateAccessProviderActivateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivateAccessProviderActivateAccessProvider) __premarshalJSON() (*__premarshalActivateAccessProviderActivateAccessProvider, error) {
	var retval __premarshalActivateAccessProviderActivateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// ActivateAccessProviderActivateAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// ActivateAccessProviderActivateAccessProviderAccessProviderResult is implemented by the following types:
// ActivateAccessProviderActivateAccessProvider
// ActivateAccessProviderActivateAccessProviderInvalidInputError
// ActivateAccessProviderActivateAccessProviderNotFoundError
// ActivateAccessProviderActivateAccessProviderPermissionDeniedError
type ActivateAccessProviderActivateAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceActivateAccessProviderActivateAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ActivateAccessProviderActivateAccessProvider) implementsGraphQLInterfaceActivateAccessProviderActivateAccessProviderAccessProviderResult() {
}
func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) implementsGraphQLInterfaceActivateAccessProviderActivateAccessProviderAccessProviderResult() {
}
func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) implementsGraphQLInterfaceActivateAccessProviderActivateAccessProviderAccessProviderResult() {
}
func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceActivateAccessProviderActivateAccessProviderAccessProviderResult() {
}

func __unmarshalActivateAccessProviderActivateAccessProviderAccessProviderResult(b []byte, v *ActivateAccessProviderActivateAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(ActivateAccessProviderActivateAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ActivateAccessProviderActivateAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ActivateAccessProviderActivateAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ActivateAccessProviderActivateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ActivateAccessProviderActivateAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalActivateAccessProviderActivateAccessProviderAccessProviderResult(v *ActivateAccessProviderActivateAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ActivateAccessProviderActivateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalActivateAccessProviderActivateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ActivateAccessProviderActivateAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalActivateAccessProviderActivateAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ActivateAccessProviderActivateAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalActivateAccessProviderActivateAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ActivateAccessProviderActivateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalActivateAccessProviderActivateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ActivateAccessProviderActivateAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// ActivateAccessProviderActivateAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ActivateAccessProviderActivateAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns ActivateAccessProviderActivateAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ActivateAccessProviderActivateAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivateAccessProviderActivateAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivateAccessProviderActivateAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalActivateAccessProviderActivateAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivateAccessProviderActivateAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalActivateAccessProviderActivateAccessProviderInvalidInputError, error) {
	var retval __premarshalActivateAccessProviderActivateAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// ActivateAccessProviderActivateAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ActivateAccessProviderActivateAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ActivateAccessProviderActivateAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ActivateAccessProviderActivateAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivateAccessProviderActivateAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivateAccessProviderActivateAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalActivateAccessProviderActivateAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivateAccessProviderActivateAccessProviderNotFoundError) __premarshalJSON() (*__premarshalActivateAccessProviderActivateAccessProviderNotFoundError, error) {
	var retval __premarshalActivateAccessProviderActivateAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ActivateAccessProviderActivateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ActivateAccessProviderActivateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ActivateAccessProviderActivateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ActivateAccessProviderActivateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivateAccessProviderActivateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivateAccessProviderActivateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalActivateAccessProviderActivateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivateAccessProviderActivateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalActivateAccessProviderActivateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalActivateAccessProviderActivateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ActivateAccessProviderResponse is returned by ActivateAccessProvider on success.
type ActivateAccessProviderResponse struct {
	ActivateAccessProvider ActivateAccessProviderActivateAccessProviderAccessProviderResult `json:"-"`
}

// GetActivateAccessProvider returns ActivateAccessProviderResponse.ActivateAccessProvider, and is useful for accessing the field via an interface.
func (v *ActivateAccessProviderResponse) GetActivateAccessProvider() ActivateAccessProviderActivateAccessProviderAccessProviderResult {
	return v.ActivateAccessProvider
}

func (v *ActivateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivateAccessProviderResponse
		ActivateAccessProvider json.RawMessage `json:"activateAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ActivateAccessProvider
		src := firstPass.ActivateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalActivateAccessProviderActivateAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ActivateAccessProviderResponse.ActivateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalActivateAccessProviderResponse struct {
	ActivateAccessProvider json.RawMessage `json:"activateAccessProvider"`
}

func (v *ActivateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivateAccessProviderResponse) __premarshalJSON() (*__premarshalActivateAccessProviderResponse, error) {
	var retval __premarshalActivateAccessProviderResponse

	{

		dst := &retval.ActivateAccessProvider
		src := v.ActivateAccessProvider
		var err error
		*dst, err = __marshalActivateAccessProviderActivateAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ActivateAccessProviderResponse.ActivateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSource includes the requested fields of the GraphQL type DataSource.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetTypename() *string {
	return v.Typename
}

// GetId returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Id, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetId() string {
	return v.DataSource.Id
}

// GetName returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Name, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetName() string {
	return v.DataSource.Name
}

// GetType returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Type, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetType() string {
	return v.DataSource.Type
}

// GetDescription returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Description, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Parent, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult is implemented by the following types:
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSource
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}

func __unmarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(b []byte, v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult: "%T"`, v)
	}
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AddIdentityStoreToDataSourceResponse is returned by AddIdentityStoreToDataSource on success.
type AddIdentityStoreToDataSourceResponse struct {
	AddIdentityStoreToDataSource AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult `json:"-"`
}

// GetAddIdentityStoreToDataSource returns AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceResponse) GetAddIdentityStoreToDataSource() AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult {
	return v.AddIdentityStoreToDataSource
}

func (v *AddIdentityStoreToDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceResponse
		AddIdentityStoreToDataSource json.RawMessage `json:"addIdentityStoreToDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddIdentityStoreToDataSource
		src := firstPass.AddIdentityStoreToDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceResponse struct {
	AddIdentityStoreToDataSource json.RawMessage `json:"addIdentityStoreToDataSource"`
}

func (v *AddIdentityStoreToDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceResponse) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceResponse, error) {
	var retval __premarshalAddIdentityStoreToDataSourceResponse

	{

		dst := &retval.AddIdentityStoreToDataSource
		src := v.AddIdentityStoreToDataSource
		var err error
		*dst, err = __marshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource: %w", err)
		}
	}
	return &retval, nil
}

// AlreadyExistsError includes the GraphQL fields of AlreadyExistsError requested by the fragment AlreadyExistsError.
type AlreadyExistsError struct {
	Message             string `json:"message"`
	Existing_element_id string `json:"existing_element_id"`
}

// GetMessage returns AlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *AlreadyExistsError) GetMessage() string { return v.Message }

// GetExisting_element_id returns AlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *AlreadyExistsError) GetExisting_element_id() string { return v.Existing_element_id }

// AssignGlobalRoleAssignGlobalRole includes the requested fields of the GraphQL type Role.
type AssignGlobalRoleAssignGlobalRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns AssignGlobalRoleAssignGlobalRole.Typename, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRole) GetTypename() *string { return v.Typename }

// GetId returns AssignGlobalRoleAssignGlobalRole.Id, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRole) GetId() string { return v.Role.Id }

// GetDescription returns AssignGlobalRoleAssignGlobalRole.Description, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRole) GetDescription() string { return v.Role.Description }

// GetName returns AssignGlobalRoleAssignGlobalRole.Name, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRole) GetName() string { return v.Role.Name }

func (v *AssignGlobalRoleAssignGlobalRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignGlobalRoleAssignGlobalRole
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignGlobalRoleAssignGlobalRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignGlobalRoleAssignGlobalRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *AssignGlobalRoleAssignGlobalRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignGlobalRoleAssignGlobalRole) __premarshalJSON() (*__premarshalAssignGlobalRoleAssignGlobalRole, error) {
	var retval __premarshalAssignGlobalRoleAssignGlobalRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// AssignGlobalRoleAssignGlobalRoleInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AssignGlobalRoleAssignGlobalRoleInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignGlobalRoleAssignGlobalRoleInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRoleInvalidInputError) GetTypename() *string { return v.Typename }

// AssignGlobalRoleAssignGlobalRoleNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AssignGlobalRoleAssignGlobalRoleNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AssignGlobalRoleAssignGlobalRoleNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns AssignGlobalRoleAssignGlobalRoleNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignGlobalRoleAssignGlobalRoleNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignGlobalRoleAssignGlobalRoleNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignGlobalRoleAssignGlobalRoleNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) __premarshalJSON() (*__premarshalAssignGlobalRoleAssignGlobalRoleNotFoundError, error) {
	var retval __premarshalAssignGlobalRoleAssignGlobalRoleNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AssignGlobalRoleAssignGlobalRolePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AssignGlobalRoleAssignGlobalRolePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AssignGlobalRoleAssignGlobalRolePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignGlobalRoleAssignGlobalRolePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignGlobalRoleAssignGlobalRolePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignGlobalRoleAssignGlobalRolePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignGlobalRoleAssignGlobalRolePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) __premarshalJSON() (*__premarshalAssignGlobalRoleAssignGlobalRolePermissionDeniedError, error) {
	var retval __premarshalAssignGlobalRoleAssignGlobalRolePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AssignGlobalRoleAssignGlobalRoleRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// AssignGlobalRoleAssignGlobalRoleRoleResult is implemented by the following types:
// AssignGlobalRoleAssignGlobalRoleInvalidInputError
// AssignGlobalRoleAssignGlobalRoleNotFoundError
// AssignGlobalRoleAssignGlobalRolePermissionDeniedError
// AssignGlobalRoleAssignGlobalRole
type AssignGlobalRoleAssignGlobalRoleRoleResult interface {
	implementsGraphQLInterfaceAssignGlobalRoleAssignGlobalRoleRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AssignGlobalRoleAssignGlobalRoleInvalidInputError) implementsGraphQLInterfaceAssignGlobalRoleAssignGlobalRoleRoleResult() {
}
func (v *AssignGlobalRoleAssignGlobalRoleNotFoundError) implementsGraphQLInterfaceAssignGlobalRoleAssignGlobalRoleRoleResult() {
}
func (v *AssignGlobalRoleAssignGlobalRolePermissionDeniedError) implementsGraphQLInterfaceAssignGlobalRoleAssignGlobalRoleRoleResult() {
}
func (v *AssignGlobalRoleAssignGlobalRole) implementsGraphQLInterfaceAssignGlobalRoleAssignGlobalRoleRoleResult() {
}

func __unmarshalAssignGlobalRoleAssignGlobalRoleRoleResult(b []byte, v *AssignGlobalRoleAssignGlobalRoleRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(AssignGlobalRoleAssignGlobalRoleInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AssignGlobalRoleAssignGlobalRoleNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AssignGlobalRoleAssignGlobalRolePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AssignGlobalRoleAssignGlobalRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AssignGlobalRoleAssignGlobalRoleRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalAssignGlobalRoleAssignGlobalRoleRoleResult(v *AssignGlobalRoleAssignGlobalRoleRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AssignGlobalRoleAssignGlobalRoleInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AssignGlobalRoleAssignGlobalRoleInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AssignGlobalRoleAssignGlobalRoleNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignGlobalRoleAssignGlobalRoleNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignGlobalRoleAssignGlobalRolePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignGlobalRoleAssignGlobalRolePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignGlobalRoleAssignGlobalRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignGlobalRoleAssignGlobalRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AssignGlobalRoleAssignGlobalRoleRoleResult: "%T"`, v)
	}
}

// AssignGlobalRoleResponse is returned by AssignGlobalRole on success.
type AssignGlobalRoleResponse struct {
	AssignGlobalRole AssignGlobalRoleAssignGlobalRoleRoleResult `json:"-"`
}

// GetAssignGlobalRole returns AssignGlobalRoleResponse.AssignGlobalRole, and is useful for accessing the field via an interface.
func (v *AssignGlobalRoleResponse) GetAssignGlobalRole() AssignGlobalRoleAssignGlobalRoleRoleResult {
	return v.AssignGlobalRole
}

func (v *AssignGlobalRoleResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignGlobalRoleResponse
		AssignGlobalRole json.RawMessage `json:"assignGlobalRole"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignGlobalRoleResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AssignGlobalRole
		src := firstPass.AssignGlobalRole
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAssignGlobalRoleAssignGlobalRoleRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AssignGlobalRoleResponse.AssignGlobalRole: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAssignGlobalRoleResponse struct {
	AssignGlobalRole json.RawMessage `json:"assignGlobalRole"`
}

func (v *AssignGlobalRoleResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignGlobalRoleResponse) __premarshalJSON() (*__premarshalAssignGlobalRoleResponse, error) {
	var retval __premarshalAssignGlobalRoleResponse

	{

		dst := &retval.AssignGlobalRole
		src := v.AssignGlobalRole
		var err error
		*dst, err = __marshalAssignGlobalRoleAssignGlobalRoleRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AssignGlobalRoleResponse.AssignGlobalRole: %w", err)
		}
	}
	return &retval, nil
}

// AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) __premarshalJSON() (*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError, error) {
	var retval __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError, error) {
	var retval __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole includes the requested fields of the GraphQL type Role.
type AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) GetTypename() *string {
	return v.Typename
}

// GetId returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole.Id, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) GetId() string { return v.Role.Id }

// GetDescription returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole.Description, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole.Name, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) GetName() string {
	return v.Role.Name
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) __premarshalJSON() (*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRole, error) {
	var retval __premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult is implemented by the following types:
// AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError
// AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError
// AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError
// AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole
type AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult interface {
	implementsGraphQLInterfaceAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError) implementsGraphQLInterfaceAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult() {
}
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError) implementsGraphQLInterfaceAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult() {
}
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError) implementsGraphQLInterfaceAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult() {
}
func (v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole) implementsGraphQLInterfaceAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult() {
}

func __unmarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult(b []byte, v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult(v *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AssignRoleOnAccessProviderAssignRoleOnAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnAccessProviderAssignRoleOnAccessProviderRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult: "%T"`, v)
	}
}

// AssignRoleOnAccessProviderResponse is returned by AssignRoleOnAccessProvider on success.
type AssignRoleOnAccessProviderResponse struct {
	AssignRoleOnAccessProvider AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult `json:"-"`
}

// GetAssignRoleOnAccessProvider returns AssignRoleOnAccessProviderResponse.AssignRoleOnAccessProvider, and is useful for accessing the field via an interface.
func (v *AssignRoleOnAccessProviderResponse) GetAssignRoleOnAccessProvider() AssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult {
	return v.AssignRoleOnAccessProvider
}

func (v *AssignRoleOnAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnAccessProviderResponse
		AssignRoleOnAccessProvider json.RawMessage `json:"assignRoleOnAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AssignRoleOnAccessProvider
		src := firstPass.AssignRoleOnAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AssignRoleOnAccessProviderResponse.AssignRoleOnAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAssignRoleOnAccessProviderResponse struct {
	AssignRoleOnAccessProvider json.RawMessage `json:"assignRoleOnAccessProvider"`
}

func (v *AssignRoleOnAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnAccessProviderResponse) __premarshalJSON() (*__premarshalAssignRoleOnAccessProviderResponse, error) {
	var retval __premarshalAssignRoleOnAccessProviderResponse

	{

		dst := &retval.AssignRoleOnAccessProvider
		src := v.AssignRoleOnAccessProvider
		var err error
		*dst, err = __marshalAssignRoleOnAccessProviderAssignRoleOnAccessProviderRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AssignRoleOnAccessProviderResponse.AssignRoleOnAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError) GetTypename() *string {
	return v.Typename
}

// AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) __premarshalJSON() (*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError, error) {
	var retval __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) __premarshalJSON() (*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError, error) {
	var retval __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AssignRoleOnDataObjectAssignRoleOnDataObjectRole includes the requested fields of the GraphQL type Role.
type AssignRoleOnDataObjectAssignRoleOnDataObjectRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns AssignRoleOnDataObjectAssignRoleOnDataObjectRole.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) GetTypename() *string { return v.Typename }

// GetId returns AssignRoleOnDataObjectAssignRoleOnDataObjectRole.Id, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) GetId() string { return v.Role.Id }

// GetDescription returns AssignRoleOnDataObjectAssignRoleOnDataObjectRole.Description, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns AssignRoleOnDataObjectAssignRoleOnDataObjectRole.Name, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) GetName() string { return v.Role.Name }

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataObjectAssignRoleOnDataObjectRole
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataObjectAssignRoleOnDataObjectRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) __premarshalJSON() (*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRole, error) {
	var retval __premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult is implemented by the following types:
// AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError
// AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError
// AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError
// AssignRoleOnDataObjectAssignRoleOnDataObjectRole
type AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult interface {
	implementsGraphQLInterfaceAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError) implementsGraphQLInterfaceAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult() {
}
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError) implementsGraphQLInterfaceAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult() {
}
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError) implementsGraphQLInterfaceAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult() {
}
func (v *AssignRoleOnDataObjectAssignRoleOnDataObjectRole) implementsGraphQLInterfaceAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult() {
}

func __unmarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult(b []byte, v *AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AssignRoleOnDataObjectAssignRoleOnDataObjectRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult(v *AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AssignRoleOnDataObjectAssignRoleOnDataObjectInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnDataObjectAssignRoleOnDataObjectRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult: "%T"`, v)
	}
}

// AssignRoleOnDataObjectResponse is returned by AssignRoleOnDataObject on success.
type AssignRoleOnDataObjectResponse struct {
	AssignRoleOnDataObject AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult `json:"-"`
}

// GetAssignRoleOnDataObject returns AssignRoleOnDataObjectResponse.AssignRoleOnDataObject, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataObjectResponse) GetAssignRoleOnDataObject() AssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult {
	return v.AssignRoleOnDataObject
}

func (v *AssignRoleOnDataObjectResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataObjectResponse
		AssignRoleOnDataObject json.RawMessage `json:"assignRoleOnDataObject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataObjectResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AssignRoleOnDataObject
		src := firstPass.AssignRoleOnDataObject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AssignRoleOnDataObjectResponse.AssignRoleOnDataObject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAssignRoleOnDataObjectResponse struct {
	AssignRoleOnDataObject json.RawMessage `json:"assignRoleOnDataObject"`
}

func (v *AssignRoleOnDataObjectResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataObjectResponse) __premarshalJSON() (*__premarshalAssignRoleOnDataObjectResponse, error) {
	var retval __premarshalAssignRoleOnDataObjectResponse

	{

		dst := &retval.AssignRoleOnDataObject
		src := v.AssignRoleOnDataObject
		var err error
		*dst, err = __marshalAssignRoleOnDataObjectAssignRoleOnDataObjectRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AssignRoleOnDataObjectResponse.AssignRoleOnDataObject: %w", err)
		}
	}
	return &retval, nil
}

// AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) __premarshalJSON() (*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError, error) {
	var retval __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError, error) {
	var retval __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AssignRoleOnDataSourceAssignRoleOnDataSourceRole includes the requested fields of the GraphQL type Role.
type AssignRoleOnDataSourceAssignRoleOnDataSourceRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns AssignRoleOnDataSourceAssignRoleOnDataSourceRole.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) GetTypename() *string { return v.Typename }

// GetId returns AssignRoleOnDataSourceAssignRoleOnDataSourceRole.Id, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) GetId() string { return v.Role.Id }

// GetDescription returns AssignRoleOnDataSourceAssignRoleOnDataSourceRole.Description, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns AssignRoleOnDataSourceAssignRoleOnDataSourceRole.Name, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) GetName() string { return v.Role.Name }

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataSourceAssignRoleOnDataSourceRole
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataSourceAssignRoleOnDataSourceRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) __premarshalJSON() (*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRole, error) {
	var retval __premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult is implemented by the following types:
// AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError
// AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError
// AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError
// AssignRoleOnDataSourceAssignRoleOnDataSourceRole
type AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult interface {
	implementsGraphQLInterfaceAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError) implementsGraphQLInterfaceAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult() {
}
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError) implementsGraphQLInterfaceAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult() {
}
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError) implementsGraphQLInterfaceAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult() {
}
func (v *AssignRoleOnDataSourceAssignRoleOnDataSourceRole) implementsGraphQLInterfaceAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult() {
}

func __unmarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult(b []byte, v *AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AssignRoleOnDataSourceAssignRoleOnDataSourceRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult(v *AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AssignRoleOnDataSourceAssignRoleOnDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnDataSourceAssignRoleOnDataSourceRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult: "%T"`, v)
	}
}

// AssignRoleOnDataSourceResponse is returned by AssignRoleOnDataSource on success.
type AssignRoleOnDataSourceResponse struct {
	AssignRoleOnDataSource AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult `json:"-"`
}

// GetAssignRoleOnDataSource returns AssignRoleOnDataSourceResponse.AssignRoleOnDataSource, and is useful for accessing the field via an interface.
func (v *AssignRoleOnDataSourceResponse) GetAssignRoleOnDataSource() AssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult {
	return v.AssignRoleOnDataSource
}

func (v *AssignRoleOnDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnDataSourceResponse
		AssignRoleOnDataSource json.RawMessage `json:"assignRoleOnDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AssignRoleOnDataSource
		src := firstPass.AssignRoleOnDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AssignRoleOnDataSourceResponse.AssignRoleOnDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAssignRoleOnDataSourceResponse struct {
	AssignRoleOnDataSource json.RawMessage `json:"assignRoleOnDataSource"`
}

func (v *AssignRoleOnDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnDataSourceResponse) __premarshalJSON() (*__premarshalAssignRoleOnDataSourceResponse, error) {
	var retval __premarshalAssignRoleOnDataSourceResponse

	{

		dst := &retval.AssignRoleOnDataSource
		src := v.AssignRoleOnDataSource
		var err error
		*dst, err = __marshalAssignRoleOnDataSourceAssignRoleOnDataSourceRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AssignRoleOnDataSourceResponse.AssignRoleOnDataSource: %w", err)
		}
	}
	return &retval, nil
}

// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError, error) {
	var retval __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError, error) {
	var retval __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole includes the requested fields of the GraphQL type Role.
type AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole.Typename, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) GetTypename() *string {
	return v.Typename
}

// GetId returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole.Id, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) GetId() string { return v.Role.Id }

// GetDescription returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole.Description, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole.Name, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) GetName() string { return v.Role.Name }

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) __premarshalJSON() (*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole, error) {
	var retval __premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult is implemented by the following types:
// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError
// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError
// AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError
// AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole
type AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult interface {
	implementsGraphQLInterfaceAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError) implementsGraphQLInterfaceAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult() {
}
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError) implementsGraphQLInterfaceAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult() {
}
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError) implementsGraphQLInterfaceAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult() {
}
func (v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole) implementsGraphQLInterfaceAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult() {
}

func __unmarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult(b []byte, v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult(v *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult: "%T"`, v)
	}
}

// AssignRoleOnIdentityStoreResponse is returned by AssignRoleOnIdentityStore on success.
type AssignRoleOnIdentityStoreResponse struct {
	AssignRoleOnIdentityStore AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult `json:"-"`
}

// GetAssignRoleOnIdentityStore returns AssignRoleOnIdentityStoreResponse.AssignRoleOnIdentityStore, and is useful for accessing the field via an interface.
func (v *AssignRoleOnIdentityStoreResponse) GetAssignRoleOnIdentityStore() AssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult {
	return v.AssignRoleOnIdentityStore
}

func (v *AssignRoleOnIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AssignRoleOnIdentityStoreResponse
		AssignRoleOnIdentityStore json.RawMessage `json:"assignRoleOnIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AssignRoleOnIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AssignRoleOnIdentityStore
		src := firstPass.AssignRoleOnIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AssignRoleOnIdentityStoreResponse.AssignRoleOnIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAssignRoleOnIdentityStoreResponse struct {
	AssignRoleOnIdentityStore json.RawMessage `json:"assignRoleOnIdentityStore"`
}

func (v *AssignRoleOnIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AssignRoleOnIdentityStoreResponse) __premarshalJSON() (*__premarshalAssignRoleOnIdentityStoreResponse, error) {
	var retval __premarshalAssignRoleOnIdentityStoreResponse

	{

		dst := &retval.AssignRoleOnIdentityStore
		src := v.AssignRoleOnIdentityStore
		var err error
		*dst, err = __marshalAssignRoleOnIdentityStoreAssignRoleOnIdentityStoreRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AssignRoleOnIdentityStoreResponse.AssignRoleOnIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

type BinaryExpressionAggregatorOperator string

const (
	BinaryExpressionAggregatorOperatorAnd BinaryExpressionAggregatorOperator = "And"
	BinaryExpressionAggregatorOperatorOr  BinaryExpressionAggregatorOperator = "Or"
)

var AllBinaryExpressionAggregatorOperator = []BinaryExpressionAggregatorOperator{
	BinaryExpressionAggregatorOperatorAnd,
	BinaryExpressionAggregatorOperatorOr,
}

type BinaryExpressionUnaryExpressionOperator string

const (
	BinaryExpressionUnaryExpressionOperatorNot BinaryExpressionUnaryExpressionOperator = "Not"
)

var AllBinaryExpressionUnaryExpressionOperator = []BinaryExpressionUnaryExpressionOperator{
	BinaryExpressionUnaryExpressionOperatorNot,
}

type CanLinkFilter struct {
	Action              models.AccessProviderAction `json:"action"`
	Category            *string                     `json:"category,omitempty"`
	DataSources         []*DataSourceTypeInfo       `json:"dataSources,omitempty"`
	AccessProviderId    *string                     `json:"accessProviderId,omitempty"`
	WhoAccessProviders  []string                    `json:"whoAccessProviders"`
	WhatAccessProviders []string                    `json:"whatAccessProviders"`
}

// GetAction returns CanLinkFilter.Action, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetAction() models.AccessProviderAction { return v.Action }

// GetCategory returns CanLinkFilter.Category, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetCategory() *string { return v.Category }

// GetDataSources returns CanLinkFilter.DataSources, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetDataSources() []*DataSourceTypeInfo { return v.DataSources }

// GetAccessProviderId returns CanLinkFilter.AccessProviderId, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetAccessProviderId() *string { return v.AccessProviderId }

// GetWhoAccessProviders returns CanLinkFilter.WhoAccessProviders, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetWhoAccessProviders() []string { return v.WhoAccessProviders }

// GetWhatAccessProviders returns CanLinkFilter.WhatAccessProviders, and is useful for accessing the field via an interface.
func (v *CanLinkFilter) GetWhatAccessProviders() []string { return v.WhatAccessProviders }

// CreateAccessProviderCreateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type CreateAccessProviderCreateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns CreateAccessProviderCreateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns CreateAccessProviderCreateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns CreateAccessProviderCreateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns CreateAccessProviderCreateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns CreateAccessProviderCreateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns CreateAccessProviderCreateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns CreateAccessProviderCreateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns CreateAccessProviderCreateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns CreateAccessProviderCreateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns CreateAccessProviderCreateAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns CreateAccessProviderCreateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns CreateAccessProviderCreateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns CreateAccessProviderCreateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns CreateAccessProviderCreateAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns CreateAccessProviderCreateAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns CreateAccessProviderCreateAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns CreateAccessProviderCreateAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns CreateAccessProviderCreateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns CreateAccessProviderCreateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns CreateAccessProviderCreateAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns CreateAccessProviderCreateAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns CreateAccessProviderCreateAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *CreateAccessProviderCreateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *CreateAccessProviderCreateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProvider) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProvider, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests includes the requested fields of the GraphQL type AccessProviderWithOptionalAccessRequests.
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests struct {
	Typename       *string                                                                                        `json:"__typename"`
	AccessProvider CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider `json:"accessProvider"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) GetTypename() *string {
	return v.Typename
}

// GetAccessProvider returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests.AccessProvider, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) GetAccessProvider() CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider {
	return v.AccessProvider
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider struct {
	AccessProvider `json:"-"`
}

// GetId returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetId() string {
	return v.AccessProvider.Id
}

// GetIsSample returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetName() string {
	return v.AccessProvider.Name
}

// GetNamingHint returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.State, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.External, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider struct {
	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider

	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult includes the requested fields of the GraphQL interface AccessProviderWithOptionalAccessRequestsResult.
//
// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult is implemented by the following types:
// CreateAccessProviderCreateAccessProvider
// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests
// CreateAccessProviderCreateAccessProviderInvalidInputError
// CreateAccessProviderCreateAccessProviderNotFoundError
// CreateAccessProviderCreateAccessProviderPermissionDeniedError
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult interface {
	implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateAccessProviderCreateAccessProvider) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderNotFoundError) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}

func __unmarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(b []byte, v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(CreateAccessProviderCreateAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderWithOptionalAccessRequests":
		*v = new(CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(CreateAccessProviderCreateAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateAccessProviderCreateAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateAccessProviderCreateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderWithOptionalAccessRequestsResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateAccessProviderCreateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateAccessProviderCreateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests:
		typename = "AccessProviderWithOptionalAccessRequests"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests
		}{typename, v}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateAccessProviderCreateAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateAccessProviderCreateAccessProviderNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%T"`, v)
	}
}

// CreateAccessProviderCreateAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type CreateAccessProviderCreateAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateAccessProviderCreateAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProviderInvalidInputError, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// CreateAccessProviderCreateAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateAccessProviderCreateAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// CreateAccessProviderCreateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateAccessProviderCreateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateAccessProviderCreateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateAccessProviderResponse is returned by CreateAccessProvider on success.
type CreateAccessProviderResponse struct {
	CreateAccessProvider CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult `json:"-"`
}

// GetCreateAccessProvider returns CreateAccessProviderResponse.CreateAccessProvider, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderResponse) GetCreateAccessProvider() CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult {
	return v.CreateAccessProvider
}

func (v *CreateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderResponse
		CreateAccessProvider json.RawMessage `json:"createAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateAccessProvider
		src := firstPass.CreateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateAccessProviderResponse.CreateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateAccessProviderResponse struct {
	CreateAccessProvider json.RawMessage `json:"createAccessProvider"`
}

func (v *CreateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderResponse) __premarshalJSON() (*__premarshalCreateAccessProviderResponse, error) {
	var retval __premarshalCreateAccessProviderResponse

	{

		dst := &retval.CreateAccessProvider
		src := v.CreateAccessProvider
		var err error
		*dst, err = __marshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateAccessProviderResponse.CreateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// CreateDataSourceCreateDataSource includes the requested fields of the GraphQL type DataSource.
type CreateDataSourceCreateDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSource.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetTypename() *string { return v.Typename }

// GetId returns CreateDataSourceCreateDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetId() string { return v.DataSource.Id }

// GetName returns CreateDataSourceCreateDataSource.Name, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetName() string { return v.DataSource.Name }

// GetType returns CreateDataSourceCreateDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns CreateDataSourceCreateDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns CreateDataSourceCreateDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns CreateDataSourceCreateDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns CreateDataSourceCreateDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns CreateDataSourceCreateDataSource.Parent, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *CreateDataSourceCreateDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *CreateDataSourceCreateDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSource) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSource, error) {
	var retval __premarshalCreateDataSourceCreateDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// CreateDataSourceCreateDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// CreateDataSourceCreateDataSourceDataSourceResult is implemented by the following types:
// CreateDataSourceCreateDataSource
// CreateDataSourceCreateDataSourceInvalidInputError
// CreateDataSourceCreateDataSourceNotFoundError
// CreateDataSourceCreateDataSourcePermissionDeniedError
type CreateDataSourceCreateDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateDataSourceCreateDataSource) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}
func (v *CreateDataSourceCreateDataSourceInvalidInputError) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}
func (v *CreateDataSourceCreateDataSourceNotFoundError) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}

func __unmarshalCreateDataSourceCreateDataSourceDataSourceResult(b []byte, v *CreateDataSourceCreateDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(CreateDataSourceCreateDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(CreateDataSourceCreateDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateDataSourceCreateDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateDataSourceCreateDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateDataSourceCreateDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateDataSourceCreateDataSourceDataSourceResult(v *CreateDataSourceCreateDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateDataSourceCreateDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateDataSourceCreateDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateDataSourceCreateDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *CreateDataSourceCreateDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateDataSourceCreateDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateDataSourceCreateDataSourceDataSourceResult: "%T"`, v)
	}
}

// CreateDataSourceCreateDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type CreateDataSourceCreateDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateDataSourceCreateDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourceInvalidInputError) GetTypename() *string { return v.Typename }

// CreateDataSourceCreateDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateDataSourceCreateDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns CreateDataSourceCreateDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSourceNotFoundError, error) {
	var retval __premarshalCreateDataSourceCreateDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateDataSourceCreateDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateDataSourceCreateDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateDataSourceCreateDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSourcePermissionDeniedError, error) {
	var retval __premarshalCreateDataSourceCreateDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateDataSourceResponse is returned by CreateDataSource on success.
type CreateDataSourceResponse struct {
	CreateDataSource CreateDataSourceCreateDataSourceDataSourceResult `json:"-"`
}

// GetCreateDataSource returns CreateDataSourceResponse.CreateDataSource, and is useful for accessing the field via an interface.
func (v *CreateDataSourceResponse) GetCreateDataSource() CreateDataSourceCreateDataSourceDataSourceResult {
	return v.CreateDataSource
}

func (v *CreateDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceResponse
		CreateDataSource json.RawMessage `json:"createDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateDataSource
		src := firstPass.CreateDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateDataSourceCreateDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateDataSourceResponse.CreateDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateDataSourceResponse struct {
	CreateDataSource json.RawMessage `json:"createDataSource"`
}

func (v *CreateDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceResponse) __premarshalJSON() (*__premarshalCreateDataSourceResponse, error) {
	var retval __premarshalCreateDataSourceResponse

	{

		dst := &retval.CreateDataSource
		src := v.CreateDataSource
		var err error
		*dst, err = __marshalCreateDataSourceCreateDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateDataSourceResponse.CreateDataSource: %w", err)
		}
	}
	return &retval, nil
}

// CreateGrantCategoryCreateGrantCategory includes the requested fields of the GraphQL type GrantCategory.
type CreateGrantCategoryCreateGrantCategory struct {
	Typename             *string `json:"__typename"`
	GrantCategoryDetails `json:"-"`
}

// GetTypename returns CreateGrantCategoryCreateGrantCategory.Typename, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetTypename() *string { return v.Typename }

// GetId returns CreateGrantCategoryCreateGrantCategory.Id, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetId() string { return v.GrantCategoryDetails.Id }

// GetCreatedAt returns CreateGrantCategoryCreateGrantCategory.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetCreatedAt() time.Time {
	return v.GrantCategoryDetails.CreatedAt
}

// GetModifiedAt returns CreateGrantCategoryCreateGrantCategory.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetModifiedAt() time.Time {
	return v.GrantCategoryDetails.ModifiedAt
}

// GetIsSystem returns CreateGrantCategoryCreateGrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetIsSystem() bool {
	return v.GrantCategoryDetails.IsSystem
}

// GetName returns CreateGrantCategoryCreateGrantCategory.Name, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetName() string { return v.GrantCategoryDetails.Name }

// GetDescription returns CreateGrantCategoryCreateGrantCategory.Description, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetDescription() string {
	return v.GrantCategoryDetails.Description
}

// GetIcon returns CreateGrantCategoryCreateGrantCategory.Icon, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetIcon() string { return v.GrantCategoryDetails.Icon }

// GetIsDefault returns CreateGrantCategoryCreateGrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetIsDefault() bool {
	return v.GrantCategoryDetails.IsDefault
}

// GetCanCreate returns CreateGrantCategoryCreateGrantCategory.CanCreate, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetCanCreate() bool {
	return v.GrantCategoryDetails.CanCreate
}

// GetAllowDuplicateNames returns CreateGrantCategoryCreateGrantCategory.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetAllowDuplicateNames() bool {
	return v.GrantCategoryDetails.AllowDuplicateNames
}

// GetMultiDataSource returns CreateGrantCategoryCreateGrantCategory.MultiDataSource, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetMultiDataSource() bool {
	return v.GrantCategoryDetails.MultiDataSource
}

// GetDefaultTypePerDataSource returns CreateGrantCategoryCreateGrantCategory.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetDefaultTypePerDataSource() []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource {
	return v.GrantCategoryDetails.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns CreateGrantCategoryCreateGrantCategory.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetAllowedWhoItems() GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems {
	return v.GrantCategoryDetails.AllowedWhoItems
}

// GetAllowedWhatItems returns CreateGrantCategoryCreateGrantCategory.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategory) GetAllowedWhatItems() GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems {
	return v.GrantCategoryDetails.AllowedWhatItems
}

func (v *CreateGrantCategoryCreateGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateGrantCategoryCreateGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateGrantCategoryCreateGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateGrantCategoryCreateGrantCategory struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	IsSystem bool `json:"isSystem"`

	Name string `json:"name"`

	Description string `json:"description"`

	Icon string `json:"icon"`

	IsDefault bool `json:"isDefault"`

	CanCreate bool `json:"canCreate"`

	AllowDuplicateNames bool `json:"allowDuplicateNames"`

	MultiDataSource bool `json:"multiDataSource"`

	DefaultTypePerDataSource []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource `json:"defaultTypePerDataSource"`

	AllowedWhoItems GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems `json:"allowedWhoItems"`

	AllowedWhatItems GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems `json:"allowedWhatItems"`
}

func (v *CreateGrantCategoryCreateGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateGrantCategoryCreateGrantCategory) __premarshalJSON() (*__premarshalCreateGrantCategoryCreateGrantCategory, error) {
	var retval __premarshalCreateGrantCategoryCreateGrantCategory

	retval.Typename = v.Typename
	retval.Id = v.GrantCategoryDetails.Id
	retval.CreatedAt = v.GrantCategoryDetails.CreatedAt
	retval.ModifiedAt = v.GrantCategoryDetails.ModifiedAt
	retval.IsSystem = v.GrantCategoryDetails.IsSystem
	retval.Name = v.GrantCategoryDetails.Name
	retval.Description = v.GrantCategoryDetails.Description
	retval.Icon = v.GrantCategoryDetails.Icon
	retval.IsDefault = v.GrantCategoryDetails.IsDefault
	retval.CanCreate = v.GrantCategoryDetails.CanCreate
	retval.AllowDuplicateNames = v.GrantCategoryDetails.AllowDuplicateNames
	retval.MultiDataSource = v.GrantCategoryDetails.MultiDataSource
	retval.DefaultTypePerDataSource = v.GrantCategoryDetails.DefaultTypePerDataSource
	retval.AllowedWhoItems = v.GrantCategoryDetails.AllowedWhoItems
	retval.AllowedWhatItems = v.GrantCategoryDetails.AllowedWhatItems
	return &retval, nil
}

// CreateGrantCategoryCreateGrantCategoryGrantCategoryResult includes the requested fields of the GraphQL interface GrantCategoryResult.
//
// CreateGrantCategoryCreateGrantCategoryGrantCategoryResult is implemented by the following types:
// CreateGrantCategoryCreateGrantCategory
// CreateGrantCategoryCreateGrantCategoryInvalidInputError
// CreateGrantCategoryCreateGrantCategoryNotFoundError
// CreateGrantCategoryCreateGrantCategoryPermissionDeniedError
type CreateGrantCategoryCreateGrantCategoryGrantCategoryResult interface {
	implementsGraphQLInterfaceCreateGrantCategoryCreateGrantCategoryGrantCategoryResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateGrantCategoryCreateGrantCategory) implementsGraphQLInterfaceCreateGrantCategoryCreateGrantCategoryGrantCategoryResult() {
}
func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) implementsGraphQLInterfaceCreateGrantCategoryCreateGrantCategoryGrantCategoryResult() {
}
func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) implementsGraphQLInterfaceCreateGrantCategoryCreateGrantCategoryGrantCategoryResult() {
}
func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) implementsGraphQLInterfaceCreateGrantCategoryCreateGrantCategoryGrantCategoryResult() {
}

func __unmarshalCreateGrantCategoryCreateGrantCategoryGrantCategoryResult(b []byte, v *CreateGrantCategoryCreateGrantCategoryGrantCategoryResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GrantCategory":
		*v = new(CreateGrantCategoryCreateGrantCategory)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(CreateGrantCategoryCreateGrantCategoryInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateGrantCategoryCreateGrantCategoryNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateGrantCategoryCreateGrantCategoryPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GrantCategoryResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateGrantCategoryCreateGrantCategoryGrantCategoryResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateGrantCategoryCreateGrantCategoryGrantCategoryResult(v *CreateGrantCategoryCreateGrantCategoryGrantCategoryResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateGrantCategoryCreateGrantCategory:
		typename = "GrantCategory"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateGrantCategoryCreateGrantCategory
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateGrantCategoryCreateGrantCategoryInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateGrantCategoryCreateGrantCategoryInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateGrantCategoryCreateGrantCategoryNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateGrantCategoryCreateGrantCategoryNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateGrantCategoryCreateGrantCategoryPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateGrantCategoryCreateGrantCategoryGrantCategoryResult: "%T"`, v)
	}
}

// CreateGrantCategoryCreateGrantCategoryInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type CreateGrantCategoryCreateGrantCategoryInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns CreateGrantCategoryCreateGrantCategoryInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateGrantCategoryCreateGrantCategoryInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateGrantCategoryCreateGrantCategoryInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateGrantCategoryCreateGrantCategoryInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateGrantCategoryCreateGrantCategoryInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateGrantCategoryCreateGrantCategoryInvalidInputError) __premarshalJSON() (*__premarshalCreateGrantCategoryCreateGrantCategoryInvalidInputError, error) {
	var retval __premarshalCreateGrantCategoryCreateGrantCategoryInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// CreateGrantCategoryCreateGrantCategoryNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateGrantCategoryCreateGrantCategoryNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateGrantCategoryCreateGrantCategoryNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateGrantCategoryCreateGrantCategoryNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateGrantCategoryCreateGrantCategoryNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateGrantCategoryCreateGrantCategoryNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateGrantCategoryCreateGrantCategoryNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateGrantCategoryCreateGrantCategoryNotFoundError) __premarshalJSON() (*__premarshalCreateGrantCategoryCreateGrantCategoryNotFoundError, error) {
	var retval __premarshalCreateGrantCategoryCreateGrantCategoryNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateGrantCategoryCreateGrantCategoryPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateGrantCategoryCreateGrantCategoryPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateGrantCategoryCreateGrantCategoryPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateGrantCategoryCreateGrantCategoryPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateGrantCategoryCreateGrantCategoryPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateGrantCategoryCreateGrantCategoryPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateGrantCategoryCreateGrantCategoryPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateGrantCategoryCreateGrantCategoryPermissionDeniedError) __premarshalJSON() (*__premarshalCreateGrantCategoryCreateGrantCategoryPermissionDeniedError, error) {
	var retval __premarshalCreateGrantCategoryCreateGrantCategoryPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateGrantCategoryResponse is returned by CreateGrantCategory on success.
type CreateGrantCategoryResponse struct {
	CreateGrantCategory CreateGrantCategoryCreateGrantCategoryGrantCategoryResult `json:"-"`
}

// GetCreateGrantCategory returns CreateGrantCategoryResponse.CreateGrantCategory, and is useful for accessing the field via an interface.
func (v *CreateGrantCategoryResponse) GetCreateGrantCategory() CreateGrantCategoryCreateGrantCategoryGrantCategoryResult {
	return v.CreateGrantCategory
}

func (v *CreateGrantCategoryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateGrantCategoryResponse
		CreateGrantCategory json.RawMessage `json:"createGrantCategory"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateGrantCategoryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateGrantCategory
		src := firstPass.CreateGrantCategory
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateGrantCategoryCreateGrantCategoryGrantCategoryResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateGrantCategoryResponse.CreateGrantCategory: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateGrantCategoryResponse struct {
	CreateGrantCategory json.RawMessage `json:"createGrantCategory"`
}

func (v *CreateGrantCategoryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateGrantCategoryResponse) __premarshalJSON() (*__premarshalCreateGrantCategoryResponse, error) {
	var retval __premarshalCreateGrantCategoryResponse

	{

		dst := &retval.CreateGrantCategory
		src := v.CreateGrantCategory
		var err error
		*dst, err = __marshalCreateGrantCategoryCreateGrantCategoryGrantCategoryResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateGrantCategoryResponse.CreateGrantCategory: %w", err)
		}
	}
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type CreateIdentityStoreCreateIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns CreateIdentityStoreCreateIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns CreateIdentityStoreCreateIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns CreateIdentityStoreCreateIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns CreateIdentityStoreCreateIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns CreateIdentityStoreCreateIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns CreateIdentityStoreCreateIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns CreateIdentityStoreCreateIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns CreateIdentityStoreCreateIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *CreateIdentityStoreCreateIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *CreateIdentityStoreCreateIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStore) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStore, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type CreateIdentityStoreCreateIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// CreateIdentityStoreCreateIdentityStoreIdentityStoreResult is implemented by the following types:
// CreateIdentityStoreCreateIdentityStoreAlreadyExistsError
// CreateIdentityStoreCreateIdentityStore
// CreateIdentityStoreCreateIdentityStoreInvalidInputError
// CreateIdentityStoreCreateIdentityStoreNotFoundError
// CreateIdentityStoreCreateIdentityStorePermissionDeniedError
type CreateIdentityStoreCreateIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStore) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStoreInvalidInputError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}

func __unmarshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(b []byte, v *CreateIdentityStoreCreateIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(CreateIdentityStoreCreateIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(CreateIdentityStoreCreateIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(CreateIdentityStoreCreateIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateIdentityStoreCreateIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateIdentityStoreCreateIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateIdentityStoreCreateIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(v *CreateIdentityStoreCreateIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateIdentityStoreCreateIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateIdentityStoreCreateIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// CreateIdentityStoreCreateIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type CreateIdentityStoreCreateIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// CreateIdentityStoreCreateIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateIdentityStoreCreateIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateIdentityStoreCreateIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateIdentityStoreResponse is returned by CreateIdentityStore on success.
type CreateIdentityStoreResponse struct {
	CreateIdentityStore CreateIdentityStoreCreateIdentityStoreIdentityStoreResult `json:"-"`
}

// GetCreateIdentityStore returns CreateIdentityStoreResponse.CreateIdentityStore, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreResponse) GetCreateIdentityStore() CreateIdentityStoreCreateIdentityStoreIdentityStoreResult {
	return v.CreateIdentityStore
}

func (v *CreateIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreResponse
		CreateIdentityStore json.RawMessage `json:"createIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateIdentityStore
		src := firstPass.CreateIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateIdentityStoreResponse.CreateIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateIdentityStoreResponse struct {
	CreateIdentityStore json.RawMessage `json:"createIdentityStore"`
}

func (v *CreateIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreResponse) __premarshalJSON() (*__premarshalCreateIdentityStoreResponse, error) {
	var retval __premarshalCreateIdentityStoreResponse

	{

		dst := &retval.CreateIdentityStore
		src := v.CreateIdentityStore
		var err error
		*dst, err = __marshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateIdentityStoreResponse.CreateIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// CreateUserCreateUser includes the requested fields of the GraphQL type User.
type CreateUserCreateUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns CreateUserCreateUser.Typename, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetTypename() *string { return v.Typename }

// GetId returns CreateUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetId() string { return v.User.Id }

// GetName returns CreateUserCreateUser.Name, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetName() string { return v.User.Name }

// GetEmail returns CreateUserCreateUser.Email, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns CreateUserCreateUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns CreateUserCreateUser.Type, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetType() UserType { return v.User.Type }

func (v *CreateUserCreateUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserCreateUser
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserCreateUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserCreateUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *CreateUserCreateUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserCreateUser) __premarshalJSON() (*__premarshalCreateUserCreateUser, error) {
	var retval __premarshalCreateUserCreateUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// CreateUserCreateUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type CreateUserCreateUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns CreateUserCreateUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns CreateUserCreateUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns CreateUserCreateUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *CreateUserCreateUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserCreateUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserCreateUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserCreateUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *CreateUserCreateUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserCreateUserInvalidEmailError) __premarshalJSON() (*__premarshalCreateUserCreateUserInvalidEmailError, error) {
	var retval __premarshalCreateUserCreateUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// CreateUserCreateUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type CreateUserCreateUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateUserCreateUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserInvalidInputError) GetTypename() *string { return v.Typename }

// CreateUserCreateUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateUserCreateUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateUserCreateUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns CreateUserCreateUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *CreateUserCreateUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserCreateUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserCreateUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserCreateUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateUserCreateUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserCreateUserNotFoundError) __premarshalJSON() (*__premarshalCreateUserCreateUserNotFoundError, error) {
	var retval __premarshalCreateUserCreateUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateUserCreateUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateUserCreateUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateUserCreateUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns CreateUserCreateUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateUserCreateUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserCreateUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserCreateUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserCreateUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateUserCreateUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserCreateUserPermissionDeniedError) __premarshalJSON() (*__premarshalCreateUserCreateUserPermissionDeniedError, error) {
	var retval __premarshalCreateUserCreateUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateUserCreateUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// CreateUserCreateUserUserResult is implemented by the following types:
// CreateUserCreateUserInvalidEmailError
// CreateUserCreateUserInvalidInputError
// CreateUserCreateUserNotFoundError
// CreateUserCreateUserPermissionDeniedError
// CreateUserCreateUser
type CreateUserCreateUserUserResult interface {
	implementsGraphQLInterfaceCreateUserCreateUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateUserCreateUserInvalidEmailError) implementsGraphQLInterfaceCreateUserCreateUserUserResult() {
}
func (v *CreateUserCreateUserInvalidInputError) implementsGraphQLInterfaceCreateUserCreateUserUserResult() {
}
func (v *CreateUserCreateUserNotFoundError) implementsGraphQLInterfaceCreateUserCreateUserUserResult() {
}
func (v *CreateUserCreateUserPermissionDeniedError) implementsGraphQLInterfaceCreateUserCreateUserUserResult() {
}
func (v *CreateUserCreateUser) implementsGraphQLInterfaceCreateUserCreateUserUserResult() {}

func __unmarshalCreateUserCreateUserUserResult(b []byte, v *CreateUserCreateUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(CreateUserCreateUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(CreateUserCreateUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateUserCreateUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateUserCreateUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(CreateUserCreateUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateUserCreateUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateUserCreateUserUserResult(v *CreateUserCreateUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateUserCreateUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateUserCreateUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateUserCreateUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateUserCreateUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *CreateUserCreateUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateUserCreateUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateUserCreateUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateUserCreateUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateUserCreateUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateUserCreateUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateUserCreateUserUserResult: "%T"`, v)
	}
}

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	CreateUser CreateUserCreateUserUserResult `json:"-"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() CreateUserCreateUserUserResult { return v.CreateUser }

func (v *CreateUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserResponse
		CreateUser json.RawMessage `json:"createUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateUser
		src := firstPass.CreateUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateUserCreateUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateUserResponse.CreateUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateUserResponse struct {
	CreateUser json.RawMessage `json:"createUser"`
}

func (v *CreateUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserResponse) __premarshalJSON() (*__premarshalCreateUserResponse, error) {
	var retval __premarshalCreateUserResponse

	{

		dst := &retval.CreateUser
		src := v.CreateUser
		var err error
		*dst, err = __marshalCreateUserCreateUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateUserResponse.CreateUser: %w", err)
		}
	}
	return &retval, nil
}

// CurrentUserCurrentUser includes the requested fields of the GraphQL type User.
type CurrentUserCurrentUser struct {
	User `json:"-"`
}

// GetId returns CurrentUserCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetId() string { return v.User.Id }

// GetName returns CurrentUserCurrentUser.Name, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetName() string { return v.User.Name }

// GetEmail returns CurrentUserCurrentUser.Email, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns CurrentUserCurrentUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns CurrentUserCurrentUser.Type, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetType() UserType { return v.User.Type }

func (v *CurrentUserCurrentUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CurrentUserCurrentUser
		graphql.NoUnmarshalJSON
	}
	firstPass.CurrentUserCurrentUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCurrentUserCurrentUser struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *CurrentUserCurrentUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CurrentUserCurrentUser) __premarshalJSON() (*__premarshalCurrentUserCurrentUser, error) {
	var retval __premarshalCurrentUserCurrentUser

	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// CurrentUserResponse is returned by CurrentUser on success.
type CurrentUserResponse struct {
	CurrentUser *CurrentUserCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns CurrentUserResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *CurrentUserResponse) GetCurrentUser() *CurrentUserCurrentUser { return v.CurrentUser }

type DataComparisonExpressionAggregatorInput struct {
	Operator BinaryExpressionAggregatorOperator `json:"operator"`
	Operands []DataComparisonExpressionInput    `json:"operands"`
}

// GetOperator returns DataComparisonExpressionAggregatorInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionAggregatorInput) GetOperator() BinaryExpressionAggregatorOperator {
	return v.Operator
}

// GetOperands returns DataComparisonExpressionAggregatorInput.Operands, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionAggregatorInput) GetOperands() []DataComparisonExpressionInput {
	return v.Operands
}

type DataComparisonExpressionComparisonInput struct {
	Operator     DataComparisonExpressionComparisonOperator `json:"operator"`
	LeftOperand  DataComparisonExpressionOperandInput       `json:"leftOperand"`
	RightOperand DataComparisonExpressionOperandInput       `json:"rightOperand"`
}

// GetOperator returns DataComparisonExpressionComparisonInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetOperator() DataComparisonExpressionComparisonOperator {
	return v.Operator
}

// GetLeftOperand returns DataComparisonExpressionComparisonInput.LeftOperand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetLeftOperand() DataComparisonExpressionOperandInput {
	return v.LeftOperand
}

// GetRightOperand returns DataComparisonExpressionComparisonInput.RightOperand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetRightOperand() DataComparisonExpressionOperandInput {
	return v.RightOperand
}

type DataComparisonExpressionComparisonOperator string

const (
	DataComparisonExpressionComparisonOperatorEqual              DataComparisonExpressionComparisonOperator = "Equal"
	DataComparisonExpressionComparisonOperatorNotequal           DataComparisonExpressionComparisonOperator = "NotEqual"
	DataComparisonExpressionComparisonOperatorLessthan           DataComparisonExpressionComparisonOperator = "LessThan"
	DataComparisonExpressionComparisonOperatorLessthanorequal    DataComparisonExpressionComparisonOperator = "LessThanOrEqual"
	DataComparisonExpressionComparisonOperatorGreaterthan        DataComparisonExpressionComparisonOperator = "GreaterThan"
	DataComparisonExpressionComparisonOperatorGreaterthanorequal DataComparisonExpressionComparisonOperator = "GreaterThanOrEqual"
)

var AllDataComparisonExpressionComparisonOperator = []DataComparisonExpressionComparisonOperator{
	DataComparisonExpressionComparisonOperatorEqual,
	DataComparisonExpressionComparisonOperatorNotequal,
	DataComparisonExpressionComparisonOperatorLessthan,
	DataComparisonExpressionComparisonOperatorLessthanorequal,
	DataComparisonExpressionComparisonOperatorGreaterthan,
	DataComparisonExpressionComparisonOperatorGreaterthanorequal,
}

type DataComparisonExpressionEntityType string

const (
	DataComparisonExpressionEntityTypeDataobject            DataComparisonExpressionEntityType = "DataObject"
	DataComparisonExpressionEntityTypeColumnreferencebyname DataComparisonExpressionEntityType = "ColumnReferenceByName"
)

var AllDataComparisonExpressionEntityType = []DataComparisonExpressionEntityType{
	DataComparisonExpressionEntityTypeDataobject,
	DataComparisonExpressionEntityTypeColumnreferencebyname,
}

type DataComparisonExpressionInput struct {
	Literal         *bool                                         `json:"literal,omitempty"`
	Comparison      *DataComparisonExpressionComparisonInput      `json:"comparison,omitempty"`
	Aggregator      *DataComparisonExpressionAggregatorInput      `json:"aggregator,omitempty"`
	UnaryExpression *DataComparisonExpressionUnaryExpressionInput `json:"unaryExpression,omitempty"`
}

// GetLiteral returns DataComparisonExpressionInput.Literal, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetLiteral() *bool { return v.Literal }

// GetComparison returns DataComparisonExpressionInput.Comparison, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetComparison() *DataComparisonExpressionComparisonInput {
	return v.Comparison
}

// GetAggregator returns DataComparisonExpressionInput.Aggregator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetAggregator() *DataComparisonExpressionAggregatorInput {
	return v.Aggregator
}

// GetUnaryExpression returns DataComparisonExpressionInput.UnaryExpression, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetUnaryExpression() *DataComparisonExpressionUnaryExpressionInput {
	return v.UnaryExpression
}

type DataComparisonExpressionLiteral struct {
	Bool      *bool      `json:"bool,omitempty"`
	Int       *int       `json:"int,omitempty"`
	Float     *float64   `json:"float,omitempty"`
	Str       *string    `json:"str,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// GetBool returns DataComparisonExpressionLiteral.Bool, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetBool() *bool { return v.Bool }

// GetInt returns DataComparisonExpressionLiteral.Int, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetInt() *int { return v.Int }

// GetFloat returns DataComparisonExpressionLiteral.Float, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetFloat() *float64 { return v.Float }

// GetStr returns DataComparisonExpressionLiteral.Str, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetStr() *string { return v.Str }

// GetTimestamp returns DataComparisonExpressionLiteral.Timestamp, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetTimestamp() *time.Time { return v.Timestamp }

type DataComparisonExpressionOperandInput struct {
	Reference *DataComparisonExpressionReferenceInput `json:"reference,omitempty"`
	Literal   *DataComparisonExpressionLiteral        `json:"literal,omitempty"`
}

// GetReference returns DataComparisonExpressionOperandInput.Reference, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionOperandInput) GetReference() *DataComparisonExpressionReferenceInput {
	return v.Reference
}

// GetLiteral returns DataComparisonExpressionOperandInput.Literal, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionOperandInput) GetLiteral() *DataComparisonExpressionLiteral {
	return v.Literal
}

type DataComparisonExpressionReferenceInput struct {
	EntityType DataComparisonExpressionEntityType `json:"entityType"`
	EntityId   string                             `json:"entityId"`
}

// GetEntityType returns DataComparisonExpressionReferenceInput.EntityType, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionReferenceInput) GetEntityType() DataComparisonExpressionEntityType {
	return v.EntityType
}

// GetEntityId returns DataComparisonExpressionReferenceInput.EntityId, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionReferenceInput) GetEntityId() string { return v.EntityId }

type DataComparisonExpressionUnaryExpressionInput struct {
	Operator BinaryExpressionUnaryExpressionOperator `json:"operator"`
	Operand  DataComparisonExpressionInput           `json:"operand"`
}

// GetOperator returns DataComparisonExpressionUnaryExpressionInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionUnaryExpressionInput) GetOperator() BinaryExpressionUnaryExpressionOperator {
	return v.Operator
}

// GetOperand returns DataComparisonExpressionUnaryExpressionInput.Operand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionUnaryExpressionInput) GetOperand() DataComparisonExpressionInput {
	return v.Operand
}

// DataObject includes the GraphQL fields of DataObject requested by the fragment DataObject.
type DataObject struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	FullName    string  `json:"fullName"`
	Type        string  `json:"type"`
	DataType    *string `json:"dataType"`
	Deleted     bool    `json:"deleted"`
	Description string  `json:"description"`
	// Returns the data source linked to the data object. This can be linked through its parents.
	DataSource *DataObjectDataSource `json:"dataSource"`
	// Returns the direct parent data object
	Parent *DataObjectParentDataObject `json:"parent"`
}

// GetId returns DataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObject) GetId() string { return v.Id }

// GetName returns DataObject.Name, and is useful for accessing the field via an interface.
func (v *DataObject) GetName() string { return v.Name }

// GetFullName returns DataObject.FullName, and is useful for accessing the field via an interface.
func (v *DataObject) GetFullName() string { return v.FullName }

// GetType returns DataObject.Type, and is useful for accessing the field via an interface.
func (v *DataObject) GetType() string { return v.Type }

// GetDataType returns DataObject.DataType, and is useful for accessing the field via an interface.
func (v *DataObject) GetDataType() *string { return v.DataType }

// GetDeleted returns DataObject.Deleted, and is useful for accessing the field via an interface.
func (v *DataObject) GetDeleted() bool { return v.Deleted }

// GetDescription returns DataObject.Description, and is useful for accessing the field via an interface.
func (v *DataObject) GetDescription() string { return v.Description }

// GetDataSource returns DataObject.DataSource, and is useful for accessing the field via an interface.
func (v *DataObject) GetDataSource() *DataObjectDataSource { return v.DataSource }

// GetParent returns DataObject.Parent, and is useful for accessing the field via an interface.
func (v *DataObject) GetParent() *DataObjectParentDataObject { return v.Parent }

// DataObjectByExternalIdDataObjectsPagedResult includes the requested fields of the GraphQL type PagedResult.
type DataObjectByExternalIdDataObjectsPagedResult struct {
	Edges []DataObjectByExternalIdDataObjectsPagedResultEdgesEdge `json:"edges"`
}

// GetEdges returns DataObjectByExternalIdDataObjectsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResult) GetEdges() []DataObjectByExternalIdDataObjectsPagedResultEdgesEdge {
	return v.Edges
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdge includes the requested fields of the GraphQL type Edge.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdge struct {
	Node *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem `json:"-"`
}

// GetNode returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) GetNode() *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem {
	return v.Node
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectByExternalIdDataObjectsPagedResultEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectByExternalIdDataObjectsPagedResultEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem)
			err = __unmarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) __premarshalJSON() (*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge, error) {
	var retval __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject struct {
	Typename   *string `json:"__typename"`
	DataObject `json:"-"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetTypename() *string {
	return v.Typename
}

// GetId returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetId() string {
	return v.DataObject.Id
}

// GetName returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Name, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetName() string {
	return v.DataObject.Name
}

// GetFullName returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.FullName, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetFullName() string {
	return v.DataObject.FullName
}

// GetType returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Type, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetType() string {
	return v.DataObject.Type
}

// GetDataType returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.DataType, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDataType() *string {
	return v.DataObject.DataType
}

// GetDeleted returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDeleted() bool {
	return v.DataObject.Deleted
}

// GetDescription returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Description, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDescription() string {
	return v.DataObject.Description
}

// GetDataSource returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.DataSource, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDataSource() *DataObjectDataSource {
	return v.DataObject.DataSource
}

// GetParent returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Parent, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetParent() *DataObjectParentDataObject {
	return v.DataObject.Parent
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`

	Description string `json:"description"`

	DataSource *DataObjectDataSource `json:"dataSource"`

	Parent *DataObjectParentDataObject `json:"parent"`
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) __premarshalJSON() (*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject, error) {
	var retval __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject

	retval.Typename = v.Typename
	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	retval.Description = v.DataObject.Description
	retval.DataSource = v.DataObject.DataSource
	retval.Parent = v.DataObject.Parent
	return &retval, nil
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem is implemented by the following types:
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}

func __unmarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(b []byte, v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject:
		typename = "DataObject"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem: "%T"`, v)
	}
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeStringValue) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdResponse is returned by DataObjectByExternalId on success.
type DataObjectByExternalIdResponse struct {
	DataObjects DataObjectByExternalIdDataObjectsPagedResult `json:"dataObjects"`
}

// GetDataObjects returns DataObjectByExternalIdResponse.DataObjects, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdResponse) GetDataObjects() DataObjectByExternalIdDataObjectsPagedResult {
	return v.DataObjects
}

// DataObjectDataSource includes the requested fields of the GraphQL type DataSource.
type DataObjectDataSource struct {
	Id string `json:"id"`
}

// GetId returns DataObjectDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataObjectDataSource) GetId() string { return v.Id }

type DataObjectFilterInput struct {
	DataSources                 []string             `json:"dataSources"`
	Parents                     []string             `json:"parents"`
	Ancestors                   []string             `json:"ancestors"`
	Types                       []string             `json:"types"`
	FullNames                   []string             `json:"fullNames"`
	Search                      *string              `json:"search,omitempty"`
	IncludeDataSource           *bool                `json:"includeDataSource,omitempty"`
	AsOwner                     *bool                `json:"asOwner,omitempty"`
	CanUse                      *bool                `json:"canUse,omitempty"`
	Owners                      []string             `json:"owners"`
	IncludeDeleted              *bool                `json:"includeDeleted,omitempty"`
	DataTypes                   []string             `json:"dataTypes"`
	Exclude                     []string             `json:"exclude"`
	HasTags                     []TagFilter          `json:"hasTags"`
	SupportedDataSourceFeatures []DataSourceFeatures `json:"supportedDataSourceFeatures"`
	CanRequestAccess            *bool                `json:"canRequestAccess,omitempty"`
}

// GetDataSources returns DataObjectFilterInput.DataSources, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetDataSources() []string { return v.DataSources }

// GetParents returns DataObjectFilterInput.Parents, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetParents() []string { return v.Parents }

// GetAncestors returns DataObjectFilterInput.Ancestors, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetAncestors() []string { return v.Ancestors }

// GetTypes returns DataObjectFilterInput.Types, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetTypes() []string { return v.Types }

// GetFullNames returns DataObjectFilterInput.FullNames, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetFullNames() []string { return v.FullNames }

// GetSearch returns DataObjectFilterInput.Search, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetSearch() *string { return v.Search }

// GetIncludeDataSource returns DataObjectFilterInput.IncludeDataSource, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetIncludeDataSource() *bool { return v.IncludeDataSource }

// GetAsOwner returns DataObjectFilterInput.AsOwner, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetAsOwner() *bool { return v.AsOwner }

// GetCanUse returns DataObjectFilterInput.CanUse, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetCanUse() *bool { return v.CanUse }

// GetOwners returns DataObjectFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetOwners() []string { return v.Owners }

// GetIncludeDeleted returns DataObjectFilterInput.IncludeDeleted, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetIncludeDeleted() *bool { return v.IncludeDeleted }

// GetDataTypes returns DataObjectFilterInput.DataTypes, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetDataTypes() []string { return v.DataTypes }

// GetExclude returns DataObjectFilterInput.Exclude, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetExclude() []string { return v.Exclude }

// GetHasTags returns DataObjectFilterInput.HasTags, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetHasTags() []TagFilter { return v.HasTags }

// GetSupportedDataSourceFeatures returns DataObjectFilterInput.SupportedDataSourceFeatures, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetSupportedDataSourceFeatures() []DataSourceFeatures {
	return v.SupportedDataSourceFeatures
}

// GetCanRequestAccess returns DataObjectFilterInput.CanRequestAccess, and is useful for accessing the field via an interface.
func (v *DataObjectFilterInput) GetCanRequestAccess() *bool { return v.CanRequestAccess }

type DataObjectOrderByInput struct {
	Name     *Sort `json:"name,omitempty"`
	FullName *Sort `json:"fullName,omitempty"`
	Type     *Sort `json:"type,omitempty"`
}

// GetName returns DataObjectOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *DataObjectOrderByInput) GetName() *Sort { return v.Name }

// GetFullName returns DataObjectOrderByInput.FullName, and is useful for accessing the field via an interface.
func (v *DataObjectOrderByInput) GetFullName() *Sort { return v.FullName }

// GetType returns DataObjectOrderByInput.Type, and is useful for accessing the field via an interface.
func (v *DataObjectOrderByInput) GetType() *Sort { return v.Type }

// DataObjectPage includes the GraphQL fields of PagedResult requested by the fragment DataObjectPage.
type DataObjectPage struct {
	PageInfo *DataObjectPagePageInfo   `json:"pageInfo"`
	Edges    []DataObjectPageEdgesEdge `json:"edges"`
}

// GetPageInfo returns DataObjectPage.PageInfo, and is useful for accessing the field via an interface.
func (v *DataObjectPage) GetPageInfo() *DataObjectPagePageInfo { return v.PageInfo }

// GetEdges returns DataObjectPage.Edges, and is useful for accessing the field via an interface.
func (v *DataObjectPage) GetEdges() []DataObjectPageEdgesEdge { return v.Edges }

// DataObjectPageEdgesEdge includes the requested fields of the GraphQL type Edge.
type DataObjectPageEdgesEdge struct {
	Cursor *string                          `json:"cursor"`
	Node   *DataObjectPageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns DataObjectPageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns DataObjectPageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdge) GetNode() *DataObjectPageEdgesEdgeNodeItem { return v.Node }

func (v *DataObjectPageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectPageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectPageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DataObjectPageEdgesEdgeNodeItem)
			err = __unmarshalDataObjectPageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataObjectPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataObjectPageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *DataObjectPageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectPageEdgesEdge) __premarshalJSON() (*__premarshalDataObjectPageEdgesEdge, error) {
	var retval __premarshalDataObjectPageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalDataObjectPageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal DataObjectPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// DataObjectPageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DataObjectPageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type DataObjectPageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type DataObjectPageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type DataObjectPageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type DataObjectPageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type DataObjectPageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type DataObjectPageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type DataObjectPageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type DataObjectPageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type DataObjectPageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type DataObjectPageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type DataObjectPageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type DataObjectPageEdgesEdgeNodeDataObject struct {
	Typename   *string `json:"__typename"`
	DataObject `json:"-"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// GetId returns DataObjectPageEdgesEdgeNodeDataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetId() string { return v.DataObject.Id }

// GetName returns DataObjectPageEdgesEdgeNodeDataObject.Name, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetName() string { return v.DataObject.Name }

// GetFullName returns DataObjectPageEdgesEdgeNodeDataObject.FullName, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetFullName() string { return v.DataObject.FullName }

// GetType returns DataObjectPageEdgesEdgeNodeDataObject.Type, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetType() string { return v.DataObject.Type }

// GetDataType returns DataObjectPageEdgesEdgeNodeDataObject.DataType, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetDataType() *string { return v.DataObject.DataType }

// GetDeleted returns DataObjectPageEdgesEdgeNodeDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetDeleted() bool { return v.DataObject.Deleted }

// GetDescription returns DataObjectPageEdgesEdgeNodeDataObject.Description, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetDescription() string {
	return v.DataObject.Description
}

// GetDataSource returns DataObjectPageEdgesEdgeNodeDataObject.DataSource, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetDataSource() *DataObjectDataSource {
	return v.DataObject.DataSource
}

// GetParent returns DataObjectPageEdgesEdgeNodeDataObject.Parent, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObject) GetParent() *DataObjectParentDataObject {
	return v.DataObject.Parent
}

func (v *DataObjectPageEdgesEdgeNodeDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectPageEdgesEdgeNodeDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectPageEdgesEdgeNodeDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataObjectPageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`

	Description string `json:"description"`

	DataSource *DataObjectDataSource `json:"dataSource"`

	Parent *DataObjectParentDataObject `json:"parent"`
}

func (v *DataObjectPageEdgesEdgeNodeDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectPageEdgesEdgeNodeDataObject) __premarshalJSON() (*__premarshalDataObjectPageEdgesEdgeNodeDataObject, error) {
	var retval __premarshalDataObjectPageEdgesEdgeNodeDataObject

	retval.Typename = v.Typename
	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	retval.Description = v.DataObject.Description
	retval.DataSource = v.DataObject.DataSource
	retval.Parent = v.DataObject.Parent
	return &retval, nil
}

// DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type DataObjectPageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type DataObjectPageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataObjectPageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type DataObjectPageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type DataObjectPageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type DataObjectPageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeDatasourceNotification) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type DataObjectPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataObjectPageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type DataObjectPageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// DataObjectPageEdgesEdgeNodeItem is implemented by the following types:
// DataObjectPageEdgesEdgeNodeAccessProvider
// DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail
// DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult
// DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail
// DataObjectPageEdgesEdgeNodeAccessProviderMatch
// DataObjectPageEdgesEdgeNodeAccessRequest
// DataObjectPageEdgesEdgeNodeAccessRequestNotification
// DataObjectPageEdgesEdgeNodeAccessRequestWhatItem
// DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem
// DataObjectPageEdgesEdgeNodeAccessWhatItem
// DataObjectPageEdgesEdgeNodeAccessWhoItem
// DataObjectPageEdgesEdgeNodeAccount
// DataObjectPageEdgesEdgeNodeAuditDiffLog
// DataObjectPageEdgesEdgeNodeComment
// DataObjectPageEdgesEdgeNodeCommentNotification
// DataObjectPageEdgesEdgeNodeDataAccessReturnItem
// DataObjectPageEdgesEdgeNodeDataObject
// DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation
// DataObjectPageEdgesEdgeNodeDataObjectInsightsResult
// DataObjectPageEdgesEdgeNodeDataObjectType
// DataObjectPageEdgesEdgeNodeDataSource
// DataObjectPageEdgesEdgeNodeDataSourceShare
// DataObjectPageEdgesEdgeNodeDataUsage
// DataObjectPageEdgesEdgeNodeDatasourceNotification
// DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification
// DataObjectPageEdgesEdgeNodeGroup
// DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem
// DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem
// DataObjectPageEdgesEdgeNodeIdentityStore
// DataObjectPageEdgesEdgeNodeIssue
// DataObjectPageEdgesEdgeNodeJob
// DataObjectPageEdgesEdgeNodeJobLogMsg
// DataObjectPageEdgesEdgeNodePromiseDetails
// DataObjectPageEdgesEdgeNodeQueryHistoryDataObject
// DataObjectPageEdgesEdgeNodeQueryHistoryStatement
// DataObjectPageEdgesEdgeNodeRole
// DataObjectPageEdgesEdgeNodeRoleAssignment
// DataObjectPageEdgesEdgeNodeRoleAssignmentNotification
// DataObjectPageEdgesEdgeNodeRoleDelegationNotification
// DataObjectPageEdgesEdgeNodeSearchResultItem
// DataObjectPageEdgesEdgeNodeStringValue
// DataObjectPageEdgesEdgeNodeTag
// DataObjectPageEdgesEdgeNodeTask
// DataObjectPageEdgesEdgeNodeTaskNotification
// DataObjectPageEdgesEdgeNodeUser
// DataObjectPageEdgesEdgeNodeUserAccessReturnItem
// DataObjectPageEdgesEdgeNodeUserInsightsResult
// DataObjectPageEdgesEdgeNodeUserSubtask
// DataObjectPageEdgesEdgeNodeUserTask
type DataObjectPageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataObjectPageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAccount) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeComment) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeGroup) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeIssue) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeJob) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeRole) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeTag) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeTask) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeUser) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}
func (v *DataObjectPageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceDataObjectPageEdgesEdgeNodeItem() {
}

func __unmarshalDataObjectPageEdgesEdgeNodeItem(b []byte, v *DataObjectPageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DataObjectPageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(DataObjectPageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(DataObjectPageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(DataObjectPageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(DataObjectPageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(DataObjectPageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(DataObjectPageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(DataObjectPageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(DataObjectPageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(DataObjectPageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(DataObjectPageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(DataObjectPageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(DataObjectPageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(DataObjectPageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(DataObjectPageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(DataObjectPageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(DataObjectPageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(DataObjectPageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(DataObjectPageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(DataObjectPageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(DataObjectPageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(DataObjectPageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(DataObjectPageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(DataObjectPageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(DataObjectPageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(DataObjectPageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(DataObjectPageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(DataObjectPageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(DataObjectPageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(DataObjectPageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(DataObjectPageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(DataObjectPageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(DataObjectPageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(DataObjectPageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(DataObjectPageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(DataObjectPageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(DataObjectPageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(DataObjectPageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(DataObjectPageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(DataObjectPageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(DataObjectPageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataObjectPageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalDataObjectPageEdgesEdgeNodeItem(v *DataObjectPageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataObjectPageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataObjectPageEdgesEdgeNodeDataObject
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectPageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectPageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataObjectPageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// DataObjectPageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type DataObjectPageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type DataObjectPageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type DataObjectPageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type DataObjectPageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type DataObjectPageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type DataObjectPageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type DataObjectPageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type DataObjectPageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type DataObjectPageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectPageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type DataObjectPageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type DataObjectPageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type DataObjectPageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type DataObjectPageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type DataObjectPageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type DataObjectPageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type DataObjectPageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type DataObjectPageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type DataObjectPageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// DataObjectPageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type DataObjectPageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectPageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectPageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// DataObjectPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type DataObjectPagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns DataObjectPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataObjectPagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns DataObjectPagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataObjectPagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *DataObjectPagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectPagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectPagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataObjectPagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *DataObjectPagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectPagePageInfo) __premarshalJSON() (*__premarshalDataObjectPagePageInfo, error) {
	var retval __premarshalDataObjectPagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// DataObjectParentDataObject includes the requested fields of the GraphQL type DataObject.
type DataObjectParentDataObject struct {
	Id string `json:"id"`
}

// GetId returns DataObjectParentDataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObjectParentDataObject) GetId() string { return v.Id }

// DataSource includes the GraphQL fields of DataSource requested by the fragment DataSource.
type DataSource struct {
	Id          string                      `json:"id"`
	Name        string                      `json:"name"`
	Type        string                      `json:"type"`
	Description string                      `json:"description"`
	CreatedAt   time.Time                   `json:"createdAt"`
	ModifiedAt  time.Time                   `json:"modifiedAt"`
	SyncMethod  DataSourceSyncMethod        `json:"syncMethod"`
	Parent      *DataSourceParentDataSource `json:"parent"`
}

// GetId returns DataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSource) GetId() string { return v.Id }

// GetName returns DataSource.Name, and is useful for accessing the field via an interface.
func (v *DataSource) GetName() string { return v.Name }

// GetType returns DataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSource) GetType() string { return v.Type }

// GetDescription returns DataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSource) GetDescription() string { return v.Description }

// GetCreatedAt returns DataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns DataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetSyncMethod returns DataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSource) GetSyncMethod() DataSourceSyncMethod { return v.SyncMethod }

// GetParent returns DataSource.Parent, and is useful for accessing the field via an interface.
func (v *DataSource) GetParent() *DataSourceParentDataSource { return v.Parent }

type DataSourceFeatures string

const (
	DataSourceFeaturesColumnmasking DataSourceFeatures = "ColumnMasking"
	DataSourceFeaturesRowfiltering  DataSourceFeatures = "RowFiltering"
	DataSourceFeaturesDatasharing   DataSourceFeatures = "DataSharing"
)

var AllDataSourceFeatures = []DataSourceFeatures{
	DataSourceFeaturesColumnmasking,
	DataSourceFeaturesRowfiltering,
	DataSourceFeaturesDatasharing,
}

type DataSourceFilterInput struct {
	Types                 []string              `json:"types"`
	Search                *string               `json:"search,omitempty"`
	Parent                *string               `json:"parent,omitempty"`
	Owners                []string              `json:"owners"`
	IncompleteDataWarning *bool                 `json:"incompleteDataWarning,omitempty"`
	SupportedFeatures     []*DataSourceFeatures `json:"supportedFeatures,omitempty"`
}

// GetTypes returns DataSourceFilterInput.Types, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetTypes() []string { return v.Types }

// GetSearch returns DataSourceFilterInput.Search, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetSearch() *string { return v.Search }

// GetParent returns DataSourceFilterInput.Parent, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetParent() *string { return v.Parent }

// GetOwners returns DataSourceFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetOwners() []string { return v.Owners }

// GetIncompleteDataWarning returns DataSourceFilterInput.IncompleteDataWarning, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetIncompleteDataWarning() *bool { return v.IncompleteDataWarning }

// GetSupportedFeatures returns DataSourceFilterInput.SupportedFeatures, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetSupportedFeatures() []*DataSourceFeatures {
	return v.SupportedFeatures
}

// DataSourceIdentityStoresDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceIdentityStoresDataSource struct {
	Typename       *string                                                          `json:"__typename"`
	IdentityStores []*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore `json:"identityStores"`
}

// GetTypename returns DataSourceIdentityStoresDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSource) GetTypename() *string { return v.Typename }

// GetIdentityStores returns DataSourceIdentityStoresDataSource.IdentityStores, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSource) GetIdentityStores() []*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore {
	return v.IdentityStores
}

// DataSourceIdentityStoresDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// DataSourceIdentityStoresDataSourceDataSourceResult is implemented by the following types:
// DataSourceIdentityStoresDataSource
// DataSourceIdentityStoresDataSourceInvalidInputError
// DataSourceIdentityStoresDataSourceNotFoundError
// DataSourceIdentityStoresDataSourcePermissionDeniedError
type DataSourceIdentityStoresDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourceIdentityStoresDataSource) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}
func (v *DataSourceIdentityStoresDataSourceInvalidInputError) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}
func (v *DataSourceIdentityStoresDataSourceNotFoundError) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}

func __unmarshalDataSourceIdentityStoresDataSourceDataSourceResult(b []byte, v *DataSourceIdentityStoresDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(DataSourceIdentityStoresDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DataSourceIdentityStoresDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DataSourceIdentityStoresDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DataSourceIdentityStoresDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourceIdentityStoresDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourceIdentityStoresDataSourceDataSourceResult(v *DataSourceIdentityStoresDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourceIdentityStoresDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceIdentityStoresDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceIdentityStoresDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceIdentityStoresDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceIdentityStoresDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourceIdentityStoresDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataSourceIdentityStoresDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourceIdentityStoresDataSourceDataSourceResult: "%T"`, v)
	}
}

// DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore struct {
	IdentityStore `json:"-"`
}

// GetId returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetId() string {
	return v.IdentityStore.Id
}

// GetName returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetName() string {
	return v.IdentityStore.Name
}

// GetType returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetType() string {
	return v.IdentityStore.Type
}

// GetDescription returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetMaster() bool {
	return v.IdentityStore.Master
}

// GetNative returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetNative() bool {
	return v.IdentityStore.Native
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) __premarshalJSON() (*__premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore, error) {
	var retval __premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore

	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// DataSourceIdentityStoresDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DataSourceIdentityStoresDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourceIdentityStoresDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// DataSourceIdentityStoresDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DataSourceIdentityStoresDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DataSourceIdentityStoresDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns DataSourceIdentityStoresDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DataSourceIdentityStoresDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceIdentityStoresDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DataSourceIdentityStoresDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresDataSourceNotFoundError) __premarshalJSON() (*__premarshalDataSourceIdentityStoresDataSourceNotFoundError, error) {
	var retval __premarshalDataSourceIdentityStoresDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DataSourceIdentityStoresDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DataSourceIdentityStoresDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DataSourceIdentityStoresDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DataSourceIdentityStoresDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError, error) {
	var retval __premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DataSourceIdentityStoresResponse is returned by DataSourceIdentityStores on success.
type DataSourceIdentityStoresResponse struct {
	DataSource DataSourceIdentityStoresDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns DataSourceIdentityStoresResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresResponse) GetDataSource() DataSourceIdentityStoresDataSourceDataSourceResult {
	return v.DataSource
}

func (v *DataSourceIdentityStoresResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDataSourceIdentityStoresDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourceIdentityStoresResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourceIdentityStoresResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *DataSourceIdentityStoresResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresResponse) __premarshalJSON() (*__premarshalDataSourceIdentityStoresResponse, error) {
	var retval __premarshalDataSourceIdentityStoresResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalDataSourceIdentityStoresDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceIdentityStoresResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

type DataSourceInput struct {
	Name                    *string               `json:"name,omitempty"`
	Description             *string               `json:"description,omitempty"`
	Parent                  *string               `json:"parent,omitempty"`
	SyncMethod              *DataSourceSyncMethod `json:"syncMethod,omitempty"`
	CanRequestAccess        *bool                 `json:"canRequestAccess,omitempty"`
	CanRequestAccessToTypes []string              `json:"canRequestAccessToTypes"`
}

// GetName returns DataSourceInput.Name, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetName() *string { return v.Name }

// GetDescription returns DataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetDescription() *string { return v.Description }

// GetParent returns DataSourceInput.Parent, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetParent() *string { return v.Parent }

// GetSyncMethod returns DataSourceInput.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetSyncMethod() *DataSourceSyncMethod { return v.SyncMethod }

// GetCanRequestAccess returns DataSourceInput.CanRequestAccess, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetCanRequestAccess() *bool { return v.CanRequestAccess }

// GetCanRequestAccessToTypes returns DataSourceInput.CanRequestAccessToTypes, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetCanRequestAccessToTypes() []string { return v.CanRequestAccessToTypes }

// DataSourceMaskInformationDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceMaskInformationDataSource struct {
	Typename        *string                                             `json:"__typename"`
	MaskingMetadata *DataSourceMaskInformationDataSourceMaskingMetadata `json:"maskingMetadata"`
}

// GetTypename returns DataSourceMaskInformationDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSource) GetTypename() *string { return v.Typename }

// GetMaskingMetadata returns DataSourceMaskInformationDataSource.MaskingMetadata, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSource) GetMaskingMetadata() *DataSourceMaskInformationDataSourceMaskingMetadata {
	return v.MaskingMetadata
}

// DataSourceMaskInformationDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// DataSourceMaskInformationDataSourceDataSourceResult is implemented by the following types:
// DataSourceMaskInformationDataSource
// DataSourceMaskInformationDataSourceInvalidInputError
// DataSourceMaskInformationDataSourceNotFoundError
// DataSourceMaskInformationDataSourcePermissionDeniedError
type DataSourceMaskInformationDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceDataSourceMaskInformationDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourceMaskInformationDataSource) implementsGraphQLInterfaceDataSourceMaskInformationDataSourceDataSourceResult() {
}
func (v *DataSourceMaskInformationDataSourceInvalidInputError) implementsGraphQLInterfaceDataSourceMaskInformationDataSourceDataSourceResult() {
}
func (v *DataSourceMaskInformationDataSourceNotFoundError) implementsGraphQLInterfaceDataSourceMaskInformationDataSourceDataSourceResult() {
}
func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) implementsGraphQLInterfaceDataSourceMaskInformationDataSourceDataSourceResult() {
}

func __unmarshalDataSourceMaskInformationDataSourceDataSourceResult(b []byte, v *DataSourceMaskInformationDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(DataSourceMaskInformationDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DataSourceMaskInformationDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DataSourceMaskInformationDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DataSourceMaskInformationDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourceMaskInformationDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourceMaskInformationDataSourceDataSourceResult(v *DataSourceMaskInformationDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourceMaskInformationDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceMaskInformationDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceMaskInformationDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceMaskInformationDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceMaskInformationDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourceMaskInformationDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataSourceMaskInformationDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourceMaskInformationDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourceMaskInformationDataSourceDataSourceResult: "%T"`, v)
	}
}

// DataSourceMaskInformationDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DataSourceMaskInformationDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourceMaskInformationDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// DataSourceMaskInformationDataSourceMaskingMetadata includes the requested fields of the GraphQL type MaskingMetadata.
type DataSourceMaskInformationDataSourceMaskingMetadata struct {
	MaskingMetadata `json:"-"`
}

// GetDefaultMaskExternalName returns DataSourceMaskInformationDataSourceMaskingMetadata.DefaultMaskExternalName, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourceMaskingMetadata) GetDefaultMaskExternalName() *string {
	return v.MaskingMetadata.DefaultMaskExternalName
}

// GetMaskTypes returns DataSourceMaskInformationDataSourceMaskingMetadata.MaskTypes, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourceMaskingMetadata) GetMaskTypes() []MaskingMetadataMaskTypesMaskType {
	return v.MaskingMetadata.MaskTypes
}

func (v *DataSourceMaskInformationDataSourceMaskingMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceMaskInformationDataSourceMaskingMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceMaskInformationDataSourceMaskingMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaskingMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceMaskInformationDataSourceMaskingMetadata struct {
	DefaultMaskExternalName *string `json:"defaultMaskExternalName"`

	MaskTypes []MaskingMetadataMaskTypesMaskType `json:"maskTypes"`
}

func (v *DataSourceMaskInformationDataSourceMaskingMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceMaskInformationDataSourceMaskingMetadata) __premarshalJSON() (*__premarshalDataSourceMaskInformationDataSourceMaskingMetadata, error) {
	var retval __premarshalDataSourceMaskInformationDataSourceMaskingMetadata

	retval.DefaultMaskExternalName = v.MaskingMetadata.DefaultMaskExternalName
	retval.MaskTypes = v.MaskingMetadata.MaskTypes
	return &retval, nil
}

// DataSourceMaskInformationDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DataSourceMaskInformationDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DataSourceMaskInformationDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns DataSourceMaskInformationDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DataSourceMaskInformationDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceMaskInformationDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceMaskInformationDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceMaskInformationDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DataSourceMaskInformationDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceMaskInformationDataSourceNotFoundError) __premarshalJSON() (*__premarshalDataSourceMaskInformationDataSourceNotFoundError, error) {
	var retval __premarshalDataSourceMaskInformationDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DataSourceMaskInformationDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DataSourceMaskInformationDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DataSourceMaskInformationDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DataSourceMaskInformationDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceMaskInformationDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceMaskInformationDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceMaskInformationDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceMaskInformationDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalDataSourceMaskInformationDataSourcePermissionDeniedError, error) {
	var retval __premarshalDataSourceMaskInformationDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DataSourceMaskInformationResponse is returned by DataSourceMaskInformation on success.
type DataSourceMaskInformationResponse struct {
	DataSource DataSourceMaskInformationDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns DataSourceMaskInformationResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceMaskInformationResponse) GetDataSource() DataSourceMaskInformationDataSourceDataSourceResult {
	return v.DataSource
}

func (v *DataSourceMaskInformationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceMaskInformationResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceMaskInformationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDataSourceMaskInformationDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourceMaskInformationResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourceMaskInformationResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *DataSourceMaskInformationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceMaskInformationResponse) __premarshalJSON() (*__premarshalDataSourceMaskInformationResponse, error) {
	var retval __premarshalDataSourceMaskInformationResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalDataSourceMaskInformationDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceMaskInformationResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

type DataSourceOrderByInput struct {
	Name *Sort `json:"name,omitempty"`
}

// GetName returns DataSourceOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *DataSourceOrderByInput) GetName() *Sort { return v.Name }

// DataSourcePage includes the GraphQL fields of PagedResult requested by the fragment DataSourcePage.
type DataSourcePage struct {
	PageInfo *DataSourcePagePageInfo   `json:"pageInfo"`
	Edges    []DataSourcePageEdgesEdge `json:"edges"`
}

// GetPageInfo returns DataSourcePage.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcePage) GetPageInfo() *DataSourcePagePageInfo { return v.PageInfo }

// GetEdges returns DataSourcePage.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcePage) GetEdges() []DataSourcePageEdgesEdge { return v.Edges }

// DataSourcePageEdgesEdge includes the requested fields of the GraphQL type Edge.
type DataSourcePageEdgesEdge struct {
	Cursor *string                          `json:"cursor"`
	Node   *DataSourcePageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns DataSourcePageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns DataSourcePageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdge) GetNode() *DataSourcePageEdgesEdgeNodeItem { return v.Node }

func (v *DataSourcePageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DataSourcePageEdgesEdgeNodeItem)
			err = __unmarshalDataSourcePageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourcePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourcePageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *DataSourcePageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePageEdgesEdge) __premarshalJSON() (*__premarshalDataSourcePageEdgesEdge, error) {
	var retval __premarshalDataSourcePageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalDataSourcePageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal DataSourcePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// DataSourcePageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DataSourcePageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type DataSourcePageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type DataSourcePageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type DataSourcePageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type DataSourcePageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type DataSourcePageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type DataSourcePageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type DataSourcePageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type DataSourcePageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type DataSourcePageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type DataSourcePageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type DataSourcePageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type DataSourcePageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type DataSourcePageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type DataSourcePageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourcePageEdgesEdgeNodeDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// GetId returns DataSourcePageEdgesEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetId() string { return v.DataSource.Id }

// GetName returns DataSourcePageEdgesEdgeNodeDataSource.Name, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetName() string { return v.DataSource.Name }

// GetType returns DataSourcePageEdgesEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns DataSourcePageEdgesEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns DataSourcePageEdgesEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns DataSourcePageEdgesEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns DataSourcePageEdgesEdgeNodeDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns DataSourcePageEdgesEdgeNodeDataSource.Parent, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePageEdgesEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePageEdgesEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcePageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcePageEdgesEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcePageEdgesEdgeNodeDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// DataSourcePageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type DataSourcePageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type DataSourcePageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type DataSourcePageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDatasourceNotification) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type DataSourcePageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataSourcePageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type DataSourcePageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// DataSourcePageEdgesEdgeNodeItem is implemented by the following types:
// DataSourcePageEdgesEdgeNodeAccessProvider
// DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail
// DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult
// DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail
// DataSourcePageEdgesEdgeNodeAccessProviderMatch
// DataSourcePageEdgesEdgeNodeAccessRequest
// DataSourcePageEdgesEdgeNodeAccessRequestNotification
// DataSourcePageEdgesEdgeNodeAccessRequestWhatItem
// DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem
// DataSourcePageEdgesEdgeNodeAccessWhatItem
// DataSourcePageEdgesEdgeNodeAccessWhoItem
// DataSourcePageEdgesEdgeNodeAccount
// DataSourcePageEdgesEdgeNodeAuditDiffLog
// DataSourcePageEdgesEdgeNodeComment
// DataSourcePageEdgesEdgeNodeCommentNotification
// DataSourcePageEdgesEdgeNodeDataAccessReturnItem
// DataSourcePageEdgesEdgeNodeDataObject
// DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation
// DataSourcePageEdgesEdgeNodeDataObjectInsightsResult
// DataSourcePageEdgesEdgeNodeDataObjectType
// DataSourcePageEdgesEdgeNodeDataSource
// DataSourcePageEdgesEdgeNodeDataSourceShare
// DataSourcePageEdgesEdgeNodeDataUsage
// DataSourcePageEdgesEdgeNodeDatasourceNotification
// DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification
// DataSourcePageEdgesEdgeNodeGroup
// DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem
// DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem
// DataSourcePageEdgesEdgeNodeIdentityStore
// DataSourcePageEdgesEdgeNodeIssue
// DataSourcePageEdgesEdgeNodeJob
// DataSourcePageEdgesEdgeNodeJobLogMsg
// DataSourcePageEdgesEdgeNodePromiseDetails
// DataSourcePageEdgesEdgeNodeQueryHistoryDataObject
// DataSourcePageEdgesEdgeNodeQueryHistoryStatement
// DataSourcePageEdgesEdgeNodeRole
// DataSourcePageEdgesEdgeNodeRoleAssignment
// DataSourcePageEdgesEdgeNodeRoleAssignmentNotification
// DataSourcePageEdgesEdgeNodeRoleDelegationNotification
// DataSourcePageEdgesEdgeNodeSearchResultItem
// DataSourcePageEdgesEdgeNodeStringValue
// DataSourcePageEdgesEdgeNodeTag
// DataSourcePageEdgesEdgeNodeTask
// DataSourcePageEdgesEdgeNodeTaskNotification
// DataSourcePageEdgesEdgeNodeUser
// DataSourcePageEdgesEdgeNodeUserAccessReturnItem
// DataSourcePageEdgesEdgeNodeUserInsightsResult
// DataSourcePageEdgesEdgeNodeUserSubtask
// DataSourcePageEdgesEdgeNodeUserTask
type DataSourcePageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourcePageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccount) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeComment) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroup) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeIssue) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeJob) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRole) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTag) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUser) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}

func __unmarshalDataSourcePageEdgesEdgeNodeItem(b []byte, v *DataSourcePageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(DataSourcePageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(DataSourcePageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(DataSourcePageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(DataSourcePageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(DataSourcePageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(DataSourcePageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(DataSourcePageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(DataSourcePageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(DataSourcePageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(DataSourcePageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(DataSourcePageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(DataSourcePageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(DataSourcePageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(DataSourcePageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(DataSourcePageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(DataSourcePageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(DataSourcePageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(DataSourcePageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(DataSourcePageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(DataSourcePageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(DataSourcePageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(DataSourcePageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(DataSourcePageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(DataSourcePageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(DataSourcePageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(DataSourcePageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(DataSourcePageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(DataSourcePageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(DataSourcePageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(DataSourcePageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(DataSourcePageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(DataSourcePageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourcePageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourcePageEdgesEdgeNodeItem(v *DataSourcePageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourcePageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourcePageEdgesEdgeNodeDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourcePageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// DataSourcePageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type DataSourcePageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type DataSourcePageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type DataSourcePageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type DataSourcePageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type DataSourcePageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type DataSourcePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type DataSourcePageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type DataSourcePageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type DataSourcePageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type DataSourcePageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type DataSourcePageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type DataSourcePageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type DataSourcePageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type DataSourcePageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type DataSourcePageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type DataSourcePageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type DataSourcePageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type DataSourcePageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type DataSourcePageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// DataSourcePagePageInfo includes the requested fields of the GraphQL type PageInfo.
type DataSourcePagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns DataSourcePagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcePagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns DataSourcePagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcePagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *DataSourcePagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcePagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *DataSourcePagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePagePageInfo) __premarshalJSON() (*__premarshalDataSourcePagePageInfo, error) {
	var retval __premarshalDataSourcePagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// DataSourceParentDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceParentDataSource struct {
	Id string `json:"id"`
}

// GetId returns DataSourceParentDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceParentDataSource) GetId() string { return v.Id }

type DataSourceSyncMethod string

const (
	DataSourceSyncMethodOnPrem             DataSourceSyncMethod = "ON_PREM"
	DataSourceSyncMethodCloudManualTrigger DataSourceSyncMethod = "CLOUD_MANUAL_TRIGGER"
)

var AllDataSourceSyncMethod = []DataSourceSyncMethod{
	DataSourceSyncMethodOnPrem,
	DataSourceSyncMethodCloudManualTrigger,
}

type DataSourceTypeInfo struct {
	DataSource         string  `json:"dataSource"`
	AccessProviderType *string `json:"accessProviderType,omitempty"`
}

// GetDataSource returns DataSourceTypeInfo.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceTypeInfo) GetDataSource() string { return v.DataSource }

// GetAccessProviderType returns DataSourceTypeInfo.AccessProviderType, and is useful for accessing the field via an interface.
func (v *DataSourceTypeInfo) GetAccessProviderType() *string { return v.AccessProviderType }

// DeactivateAccessProviderDeactivateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DeactivateAccessProviderDeactivateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns DeactivateAccessProviderDeactivateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns DeactivateAccessProviderDeactivateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns DeactivateAccessProviderDeactivateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns DeactivateAccessProviderDeactivateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns DeactivateAccessProviderDeactivateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns DeactivateAccessProviderDeactivateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetName() string {
	return v.AccessProvider.Name
}

// GetNamingHint returns DeactivateAccessProviderDeactivateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns DeactivateAccessProviderDeactivateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns DeactivateAccessProviderDeactivateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns DeactivateAccessProviderDeactivateAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns DeactivateAccessProviderDeactivateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns DeactivateAccessProviderDeactivateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns DeactivateAccessProviderDeactivateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns DeactivateAccessProviderDeactivateAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns DeactivateAccessProviderDeactivateAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns DeactivateAccessProviderDeactivateAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns DeactivateAccessProviderDeactivateAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns DeactivateAccessProviderDeactivateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns DeactivateAccessProviderDeactivateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns DeactivateAccessProviderDeactivateAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns DeactivateAccessProviderDeactivateAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns DeactivateAccessProviderDeactivateAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *DeactivateAccessProviderDeactivateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeactivateAccessProviderDeactivateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.DeactivateAccessProviderDeactivateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeactivateAccessProviderDeactivateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *DeactivateAccessProviderDeactivateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeactivateAccessProviderDeactivateAccessProvider) __premarshalJSON() (*__premarshalDeactivateAccessProviderDeactivateAccessProvider, error) {
	var retval __premarshalDeactivateAccessProviderDeactivateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult is implemented by the following types:
// DeactivateAccessProviderDeactivateAccessProvider
// DeactivateAccessProviderDeactivateAccessProviderInvalidInputError
// DeactivateAccessProviderDeactivateAccessProviderNotFoundError
// DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError
type DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeactivateAccessProviderDeactivateAccessProvider) implementsGraphQLInterfaceDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult() {
}
func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) implementsGraphQLInterfaceDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult() {
}
func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) implementsGraphQLInterfaceDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult() {
}
func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult() {
}

func __unmarshalDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult(b []byte, v *DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DeactivateAccessProviderDeactivateAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DeactivateAccessProviderDeactivateAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeactivateAccessProviderDeactivateAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult(v *DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeactivateAccessProviderDeactivateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeactivateAccessProviderDeactivateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeactivateAccessProviderDeactivateAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeactivateAccessProviderDeactivateAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeactivateAccessProviderDeactivateAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// DeactivateAccessProviderDeactivateAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeactivateAccessProviderDeactivateAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns DeactivateAccessProviderDeactivateAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeactivateAccessProviderDeactivateAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeactivateAccessProviderDeactivateAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeactivateAccessProviderDeactivateAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeactivateAccessProviderDeactivateAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeactivateAccessProviderDeactivateAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalDeactivateAccessProviderDeactivateAccessProviderInvalidInputError, error) {
	var retval __premarshalDeactivateAccessProviderDeactivateAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// DeactivateAccessProviderDeactivateAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeactivateAccessProviderDeactivateAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DeactivateAccessProviderDeactivateAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeactivateAccessProviderDeactivateAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeactivateAccessProviderDeactivateAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeactivateAccessProviderDeactivateAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeactivateAccessProviderDeactivateAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeactivateAccessProviderDeactivateAccessProviderNotFoundError) __premarshalJSON() (*__premarshalDeactivateAccessProviderDeactivateAccessProviderNotFoundError, error) {
	var retval __premarshalDeactivateAccessProviderDeactivateAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalDeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalDeactivateAccessProviderDeactivateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeactivateAccessProviderResponse is returned by DeactivateAccessProvider on success.
type DeactivateAccessProviderResponse struct {
	DeactivateAccessProvider DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult `json:"-"`
}

// GetDeactivateAccessProvider returns DeactivateAccessProviderResponse.DeactivateAccessProvider, and is useful for accessing the field via an interface.
func (v *DeactivateAccessProviderResponse) GetDeactivateAccessProvider() DeactivateAccessProviderDeactivateAccessProviderAccessProviderResult {
	return v.DeactivateAccessProvider
}

func (v *DeactivateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeactivateAccessProviderResponse
		DeactivateAccessProvider json.RawMessage `json:"deactivateAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeactivateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeactivateAccessProvider
		src := firstPass.DeactivateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeactivateAccessProviderResponse.DeactivateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeactivateAccessProviderResponse struct {
	DeactivateAccessProvider json.RawMessage `json:"deactivateAccessProvider"`
}

func (v *DeactivateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeactivateAccessProviderResponse) __premarshalJSON() (*__premarshalDeactivateAccessProviderResponse, error) {
	var retval __premarshalDeactivateAccessProviderResponse

	{

		dst := &retval.DeactivateAccessProvider
		src := v.DeactivateAccessProvider
		var err error
		*dst, err = __marshalDeactivateAccessProviderDeactivateAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeactivateAccessProviderResponse.DeactivateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DeleteAccessProviderDeleteAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns DeleteAccessProviderDeleteAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns DeleteAccessProviderDeleteAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns DeleteAccessProviderDeleteAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns DeleteAccessProviderDeleteAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns DeleteAccessProviderDeleteAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns DeleteAccessProviderDeleteAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns DeleteAccessProviderDeleteAccessProvider.State, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns DeleteAccessProviderDeleteAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns DeleteAccessProviderDeleteAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns DeleteAccessProviderDeleteAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns DeleteAccessProviderDeleteAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns DeleteAccessProviderDeleteAccessProvider.External, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns DeleteAccessProviderDeleteAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns DeleteAccessProviderDeleteAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns DeleteAccessProviderDeleteAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns DeleteAccessProviderDeleteAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns DeleteAccessProviderDeleteAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns DeleteAccessProviderDeleteAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns DeleteAccessProviderDeleteAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns DeleteAccessProviderDeleteAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns DeleteAccessProviderDeleteAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *DeleteAccessProviderDeleteAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *DeleteAccessProviderDeleteAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProvider) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProvider, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// DeleteAccessProviderDeleteAccessProviderAccessProviderResult is implemented by the following types:
// DeleteAccessProviderDeleteAccessProvider
// DeleteAccessProviderDeleteAccessProviderInvalidInputError
// DeleteAccessProviderDeleteAccessProviderNotFoundError
// DeleteAccessProviderDeleteAccessProviderPermissionDeniedError
type DeleteAccessProviderDeleteAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteAccessProviderDeleteAccessProvider) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}
func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}

func __unmarshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(b []byte, v *DeleteAccessProviderDeleteAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DeleteAccessProviderDeleteAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DeleteAccessProviderDeleteAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteAccessProviderDeleteAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteAccessProviderDeleteAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteAccessProviderDeleteAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(v *DeleteAccessProviderDeleteAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteAccessProviderDeleteAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteAccessProviderDeleteAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteAccessProviderDeleteAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteAccessProviderDeleteAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// DeleteAccessProviderDeleteAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeleteAccessProviderDeleteAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteAccessProviderDeleteAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProviderInvalidInputError, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteAccessProviderDeleteAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteAccessProviderDeleteAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteAccessProviderDeleteAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteAccessProviderDeleteAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteAccessProviderResponse is returned by DeleteAccessProvider on success.
type DeleteAccessProviderResponse struct {
	DeleteAccessProvider DeleteAccessProviderDeleteAccessProviderAccessProviderResult `json:"-"`
}

// GetDeleteAccessProvider returns DeleteAccessProviderResponse.DeleteAccessProvider, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderResponse) GetDeleteAccessProvider() DeleteAccessProviderDeleteAccessProviderAccessProviderResult {
	return v.DeleteAccessProvider
}

func (v *DeleteAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderResponse
		DeleteAccessProvider json.RawMessage `json:"deleteAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteAccessProvider
		src := firstPass.DeleteAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteAccessProviderResponse.DeleteAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteAccessProviderResponse struct {
	DeleteAccessProvider json.RawMessage `json:"deleteAccessProvider"`
}

func (v *DeleteAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderResponse) __premarshalJSON() (*__premarshalDeleteAccessProviderResponse, error) {
	var retval __premarshalDeleteAccessProviderResponse

	{

		dst := &retval.DeleteAccessProvider
		src := v.DeleteAccessProvider
		var err error
		*dst, err = __marshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteAccessProviderResponse.DeleteAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// DeleteDataSourceDeleteDataSource includes the requested fields of the GraphQL type DeleteDataSource.
type DeleteDataSourceDeleteDataSource struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns DeleteDataSourceDeleteDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSource) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteDataSourceDeleteDataSource.Success, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSource) GetSuccess() bool { return v.Success }

// DeleteDataSourceDeleteDataSourceDeleteDataSourceResult includes the requested fields of the GraphQL interface DeleteDataSourceResult.
//
// DeleteDataSourceDeleteDataSourceDeleteDataSourceResult is implemented by the following types:
// DeleteDataSourceDeleteDataSource
// DeleteDataSourceDeleteDataSourceInvalidInputError
// DeleteDataSourceDeleteDataSourceNotFoundError
// DeleteDataSourceDeleteDataSourcePermissionDeniedError
type DeleteDataSourceDeleteDataSourceDeleteDataSourceResult interface {
	implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteDataSourceDeleteDataSource) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}
func (v *DeleteDataSourceDeleteDataSourceInvalidInputError) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}
func (v *DeleteDataSourceDeleteDataSourceNotFoundError) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}

func __unmarshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(b []byte, v *DeleteDataSourceDeleteDataSourceDeleteDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeleteDataSource":
		*v = new(DeleteDataSourceDeleteDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DeleteDataSourceDeleteDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteDataSourceDeleteDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteDataSourceDeleteDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeleteDataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteDataSourceDeleteDataSourceDeleteDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(v *DeleteDataSourceDeleteDataSourceDeleteDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteDataSourceDeleteDataSource:
		typename = "DeleteDataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteDataSourceDeleteDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DeleteDataSourceDeleteDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteDataSourceDeleteDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteDataSourceDeleteDataSourceNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteDataSourceDeleteDataSourceNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteDataSourceDeleteDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteDataSourceDeleteDataSourceDeleteDataSourceResult: "%T"`, v)
	}
}

// DeleteDataSourceDeleteDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeleteDataSourceDeleteDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteDataSourceDeleteDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourceInvalidInputError) GetTypename() *string { return v.Typename }

// DeleteDataSourceDeleteDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteDataSourceDeleteDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteDataSourceDeleteDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// DeleteDataSourceDeleteDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteDataSourceDeleteDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteDataSourceDeleteDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteDataSourceDeleteDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteDataSourceDeleteDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteDataSourceDeleteDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError, error) {
	var retval __premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	DeleteDataSource DeleteDataSourceDeleteDataSourceDeleteDataSourceResult `json:"-"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() DeleteDataSourceDeleteDataSourceDeleteDataSourceResult {
	return v.DeleteDataSource
}

func (v *DeleteDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteDataSourceResponse
		DeleteDataSource json.RawMessage `json:"deleteDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteDataSource
		src := firstPass.DeleteDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteDataSourceResponse.DeleteDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteDataSourceResponse struct {
	DeleteDataSource json.RawMessage `json:"deleteDataSource"`
}

func (v *DeleteDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteDataSourceResponse) __premarshalJSON() (*__premarshalDeleteDataSourceResponse, error) {
	var retval __premarshalDeleteDataSourceResponse

	{

		dst := &retval.DeleteDataSource
		src := v.DeleteDataSource
		var err error
		*dst, err = __marshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteDataSourceResponse.DeleteDataSource: %w", err)
		}
	}
	return &retval, nil
}

// DeleteGrantCategoryDeleteGrantCategory includes the requested fields of the GraphQL type DeleteGrantCategory.
type DeleteGrantCategoryDeleteGrantCategory struct {
	Typename                  *string `json:"__typename"`
	DeleteGrantCategoryResult `json:"-"`
}

// GetTypename returns DeleteGrantCategoryDeleteGrantCategory.Typename, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategory) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteGrantCategoryDeleteGrantCategory.Success, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategory) GetSuccess() bool {
	return v.DeleteGrantCategoryResult.Success
}

func (v *DeleteGrantCategoryDeleteGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteGrantCategoryDeleteGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteGrantCategoryDeleteGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeleteGrantCategoryResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteGrantCategoryDeleteGrantCategory struct {
	Typename *string `json:"__typename"`

	Success bool `json:"success"`
}

func (v *DeleteGrantCategoryDeleteGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteGrantCategoryDeleteGrantCategory) __premarshalJSON() (*__premarshalDeleteGrantCategoryDeleteGrantCategory, error) {
	var retval __premarshalDeleteGrantCategoryDeleteGrantCategory

	retval.Typename = v.Typename
	retval.Success = v.DeleteGrantCategoryResult.Success
	return &retval, nil
}

// DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult includes the requested fields of the GraphQL interface DeleteGrantCategoryResult.
//
// DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult is implemented by the following types:
// DeleteGrantCategoryDeleteGrantCategory
// DeleteGrantCategoryDeleteGrantCategoryInvalidInputError
// DeleteGrantCategoryDeleteGrantCategoryNotFoundError
// DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError
type DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult interface {
	implementsGraphQLInterfaceDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteGrantCategoryDeleteGrantCategory) implementsGraphQLInterfaceDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult() {
}
func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) implementsGraphQLInterfaceDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult() {
}
func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) implementsGraphQLInterfaceDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult() {
}
func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) implementsGraphQLInterfaceDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult() {
}

func __unmarshalDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult(b []byte, v *DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeleteGrantCategory":
		*v = new(DeleteGrantCategoryDeleteGrantCategory)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DeleteGrantCategoryDeleteGrantCategoryInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteGrantCategoryDeleteGrantCategoryNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeleteGrantCategoryResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult(v *DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteGrantCategoryDeleteGrantCategory:
		typename = "DeleteGrantCategory"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteGrantCategoryDeleteGrantCategory
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteGrantCategoryDeleteGrantCategoryInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteGrantCategoryDeleteGrantCategoryNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteGrantCategoryDeleteGrantCategoryNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult: "%T"`, v)
	}
}

// DeleteGrantCategoryDeleteGrantCategoryInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeleteGrantCategoryDeleteGrantCategoryInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns DeleteGrantCategoryDeleteGrantCategoryInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteGrantCategoryDeleteGrantCategoryInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteGrantCategoryDeleteGrantCategoryInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteGrantCategoryDeleteGrantCategoryInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteGrantCategoryDeleteGrantCategoryInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteGrantCategoryDeleteGrantCategoryInvalidInputError) __premarshalJSON() (*__premarshalDeleteGrantCategoryDeleteGrantCategoryInvalidInputError, error) {
	var retval __premarshalDeleteGrantCategoryDeleteGrantCategoryInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// DeleteGrantCategoryDeleteGrantCategoryNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteGrantCategoryDeleteGrantCategoryNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DeleteGrantCategoryDeleteGrantCategoryNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteGrantCategoryDeleteGrantCategoryNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteGrantCategoryDeleteGrantCategoryNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteGrantCategoryDeleteGrantCategoryNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteGrantCategoryDeleteGrantCategoryNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteGrantCategoryDeleteGrantCategoryNotFoundError) __premarshalJSON() (*__premarshalDeleteGrantCategoryDeleteGrantCategoryNotFoundError, error) {
	var retval __premarshalDeleteGrantCategoryDeleteGrantCategoryNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError) __premarshalJSON() (*__premarshalDeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError, error) {
	var retval __premarshalDeleteGrantCategoryDeleteGrantCategoryPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteGrantCategoryResponse is returned by DeleteGrantCategory on success.
type DeleteGrantCategoryResponse struct {
	DeleteGrantCategory DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult `json:"-"`
}

// GetDeleteGrantCategory returns DeleteGrantCategoryResponse.DeleteGrantCategory, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryResponse) GetDeleteGrantCategory() DeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult {
	return v.DeleteGrantCategory
}

func (v *DeleteGrantCategoryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteGrantCategoryResponse
		DeleteGrantCategory json.RawMessage `json:"deleteGrantCategory"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteGrantCategoryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteGrantCategory
		src := firstPass.DeleteGrantCategory
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteGrantCategoryResponse.DeleteGrantCategory: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteGrantCategoryResponse struct {
	DeleteGrantCategory json.RawMessage `json:"deleteGrantCategory"`
}

func (v *DeleteGrantCategoryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteGrantCategoryResponse) __premarshalJSON() (*__premarshalDeleteGrantCategoryResponse, error) {
	var retval __premarshalDeleteGrantCategoryResponse

	{

		dst := &retval.DeleteGrantCategory
		src := v.DeleteGrantCategory
		var err error
		*dst, err = __marshalDeleteGrantCategoryDeleteGrantCategoryDeleteGrantCategoryResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteGrantCategoryResponse.DeleteGrantCategory: %w", err)
		}
	}
	return &retval, nil
}

// DeleteGrantCategoryResult includes the GraphQL fields of DeleteGrantCategory requested by the fragment DeleteGrantCategoryResult.
type DeleteGrantCategoryResult struct {
	Success bool `json:"success"`
}

// GetSuccess returns DeleteGrantCategoryResult.Success, and is useful for accessing the field via an interface.
func (v *DeleteGrantCategoryResult) GetSuccess() bool { return v.Success }

// DeleteIdentityStoreDeleteIdentityStore includes the requested fields of the GraphQL type DeleteIdentityStore.
type DeleteIdentityStoreDeleteIdentityStore struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStore) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteIdentityStoreDeleteIdentityStore.Success, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStore) GetSuccess() bool { return v.Success }

// DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult includes the requested fields of the GraphQL interface DeleteIdentityStoreResult.
//
// DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult is implemented by the following types:
// DeleteIdentityStoreDeleteIdentityStore
// DeleteIdentityStoreDeleteIdentityStoreInvalidInputError
// DeleteIdentityStoreDeleteIdentityStoreNotFoundError
// DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
type DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult interface {
	implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteIdentityStoreDeleteIdentityStore) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}
func (v *DeleteIdentityStoreDeleteIdentityStoreInvalidInputError) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}
func (v *DeleteIdentityStoreDeleteIdentityStoreNotFoundError) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}

func __unmarshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(b []byte, v *DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeleteIdentityStore":
		*v = new(DeleteIdentityStoreDeleteIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(DeleteIdentityStoreDeleteIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteIdentityStoreDeleteIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeleteIdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(v *DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteIdentityStoreDeleteIdentityStore:
		typename = "DeleteIdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteIdentityStoreDeleteIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DeleteIdentityStoreDeleteIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteIdentityStoreDeleteIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteIdentityStoreDeleteIdentityStoreNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteIdentityStoreDeleteIdentityStoreNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult: "%T"`, v)
	}
}

// DeleteIdentityStoreDeleteIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeleteIdentityStoreDeleteIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// DeleteIdentityStoreDeleteIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteIdentityStoreDeleteIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError, error) {
	var retval __premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteIdentityStoreResponse is returned by DeleteIdentityStore on success.
type DeleteIdentityStoreResponse struct {
	DeleteIdentityStore DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult `json:"-"`
}

// GetDeleteIdentityStore returns DeleteIdentityStoreResponse.DeleteIdentityStore, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreResponse) GetDeleteIdentityStore() DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult {
	return v.DeleteIdentityStore
}

func (v *DeleteIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteIdentityStoreResponse
		DeleteIdentityStore json.RawMessage `json:"deleteIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteIdentityStore
		src := firstPass.DeleteIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteIdentityStoreResponse.DeleteIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteIdentityStoreResponse struct {
	DeleteIdentityStore json.RawMessage `json:"deleteIdentityStore"`
}

func (v *DeleteIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteIdentityStoreResponse) __premarshalJSON() (*__premarshalDeleteIdentityStoreResponse, error) {
	var retval __premarshalDeleteIdentityStoreResponse

	{

		dst := &retval.DeleteIdentityStore
		src := v.DeleteIdentityStore
		var err error
		*dst, err = __marshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteIdentityStoreResponse.DeleteIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// DeleteUserDeleteUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type DeleteUserDeleteUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteUserDeleteUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserInvalidInputError) GetTypename() *string { return v.Typename }

// DeleteUserDeleteUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteUserDeleteUserNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteUserDeleteUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserNotFoundError) GetTypename() *string { return v.Typename }

// DeleteUserDeleteUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteUserDeleteUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteUserDeleteUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns DeleteUserDeleteUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteUserDeleteUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteUserDeleteUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteUserDeleteUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteUserDeleteUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteUserDeleteUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteUserDeleteUserPermissionDeniedError) __premarshalJSON() (*__premarshalDeleteUserDeleteUserPermissionDeniedError, error) {
	var retval __premarshalDeleteUserDeleteUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteUserDeleteUserUserDelete includes the requested fields of the GraphQL type UserDelete.
type DeleteUserDeleteUserUserDelete struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns DeleteUserDeleteUserUserDelete.Typename, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserUserDelete) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteUserDeleteUserUserDelete.Success, and is useful for accessing the field via an interface.
func (v *DeleteUserDeleteUserUserDelete) GetSuccess() bool { return v.Success }

// DeleteUserDeleteUserUserDeleteResult includes the requested fields of the GraphQL interface UserDeleteResult.
//
// DeleteUserDeleteUserUserDeleteResult is implemented by the following types:
// DeleteUserDeleteUserInvalidInputError
// DeleteUserDeleteUserNotFoundError
// DeleteUserDeleteUserPermissionDeniedError
// DeleteUserDeleteUserUserDelete
type DeleteUserDeleteUserUserDeleteResult interface {
	implementsGraphQLInterfaceDeleteUserDeleteUserUserDeleteResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteUserDeleteUserInvalidInputError) implementsGraphQLInterfaceDeleteUserDeleteUserUserDeleteResult() {
}
func (v *DeleteUserDeleteUserNotFoundError) implementsGraphQLInterfaceDeleteUserDeleteUserUserDeleteResult() {
}
func (v *DeleteUserDeleteUserPermissionDeniedError) implementsGraphQLInterfaceDeleteUserDeleteUserUserDeleteResult() {
}
func (v *DeleteUserDeleteUserUserDelete) implementsGraphQLInterfaceDeleteUserDeleteUserUserDeleteResult() {
}

func __unmarshalDeleteUserDeleteUserUserDeleteResult(b []byte, v *DeleteUserDeleteUserUserDeleteResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(DeleteUserDeleteUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteUserDeleteUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteUserDeleteUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "UserDelete":
		*v = new(DeleteUserDeleteUserUserDelete)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserDeleteResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteUserDeleteUserUserDeleteResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteUserDeleteUserUserDeleteResult(v *DeleteUserDeleteUserUserDeleteResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteUserDeleteUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteUserDeleteUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteUserDeleteUserNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteUserDeleteUserNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *DeleteUserDeleteUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteUserDeleteUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteUserDeleteUserUserDelete:
		typename = "UserDelete"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteUserDeleteUserUserDelete
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteUserDeleteUserUserDeleteResult: "%T"`, v)
	}
}

// DeleteUserResponse is returned by DeleteUser on success.
type DeleteUserResponse struct {
	DeleteUser DeleteUserDeleteUserUserDeleteResult `json:"-"`
}

// GetDeleteUser returns DeleteUserResponse.DeleteUser, and is useful for accessing the field via an interface.
func (v *DeleteUserResponse) GetDeleteUser() DeleteUserDeleteUserUserDeleteResult {
	return v.DeleteUser
}

func (v *DeleteUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteUserResponse
		DeleteUser json.RawMessage `json:"deleteUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteUser
		src := firstPass.DeleteUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteUserDeleteUserUserDeleteResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteUserResponse.DeleteUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteUserResponse struct {
	DeleteUser json.RawMessage `json:"deleteUser"`
}

func (v *DeleteUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteUserResponse) __premarshalJSON() (*__premarshalDeleteUserResponse, error) {
	var retval __premarshalDeleteUserResponse

	{

		dst := &retval.DeleteUser
		src := v.DeleteUser
		var err error
		*dst, err = __marshalDeleteUserDeleteUserUserDeleteResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteUserResponse.DeleteUser: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns GetAccessProviderAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns GetAccessProviderAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetIsSample() bool { return v.AccessProvider.IsSample }

// GetCreatedAt returns GetAccessProviderAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetCreatedAt() time.Time { return v.AccessProvider.CreatedAt }

// GetModifiedAt returns GetAccessProviderAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns GetAccessProviderAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns GetAccessProviderAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNamingHint() *string { return v.AccessProvider.NamingHint }

// GetState returns GetAccessProviderAccessProvider.State, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns GetAccessProviderAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns GetAccessProviderAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns GetAccessProviderAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns GetAccessProviderAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetPolicyRule() *string { return v.AccessProvider.PolicyRule }

// GetExternal returns GetAccessProviderAccessProvider.External, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetExternal() bool { return v.AccessProvider.External }

// GetWhatType returns GetAccessProviderAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns GetAccessProviderAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns GetAccessProviderAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns GetAccessProviderAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns GetAccessProviderAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns GetAccessProviderAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetComplete() *bool { return v.AccessProvider.Complete }

// GetLocks returns GetAccessProviderAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns GetAccessProviderAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns GetAccessProviderAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *GetAccessProviderAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *GetAccessProviderAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderAccessProvider, error) {
	var retval __premarshalGetAccessProviderAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// GetAccessProviderAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderAccessProvider
// GetAccessProviderAccessProviderInvalidInputError
// GetAccessProviderAccessProviderNotFoundError
// GetAccessProviderAccessProviderPermissionDeniedError
type GetAccessProviderAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderAccessProvider) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderAccessProviderInvalidInputError) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetAccessProviderAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderAccessProviderAccessProviderResult(v *GetAccessProviderAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderInvalidInputError) GetTypename() *string { return v.Typename }

// GetMessage returns GetAccessProviderAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *GetAccessProviderAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalGetAccessProviderAccessProviderInvalidInputError, error) {
	var retval __premarshalGetAccessProviderAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// GetAccessProviderAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetAccessProviderAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderResponse is returned by GetAccessProvider on success.
type GetAccessProviderResponse struct {
	AccessProvider GetAccessProviderAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderResponse) GetAccessProvider() GetAccessProviderAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderResponse) __premarshalJSON() (*__premarshalGetAccessProviderResponse, error) {
	var retval __premarshalGetAccessProviderResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderWhatAccessProvidersAccessProvider struct {
	Typename            *string                                                                           `json:"__typename"`
	WhatAccessProviders GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults `json:"-"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProvider) GetTypename() *string { return v.Typename }

// GetWhatAccessProviders returns GetAccessProviderWhatAccessProvidersAccessProvider.WhatAccessProviders, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProvider) GetWhatAccessProviders() GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults {
	return v.WhatAccessProviders
}

func (v *GetAccessProviderWhatAccessProvidersAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersAccessProvider
		WhatAccessProviders json.RawMessage `json:"whatAccessProviders"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhatAccessProviders
		src := firstPass.WhatAccessProviders
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatAccessProvidersAccessProvider.WhatAccessProviders: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersAccessProvider struct {
	Typename *string `json:"__typename"`

	WhatAccessProviders json.RawMessage `json:"whatAccessProviders"`
}

func (v *GetAccessProviderWhatAccessProvidersAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersAccessProvider, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhatAccessProviders
		src := v.WhatAccessProviders
		var err error
		*dst, err = __marshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatAccessProvidersAccessProvider.WhatAccessProviders: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderWhatAccessProvidersAccessProvider
// GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError
// GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError
// GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError
type GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatAccessProvidersAccessProvider) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult(v *GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatAccessProvidersAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatAccessProvidersAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult includes the requested fields of the GraphQL type PagedResult.
type GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult struct {
	Typename                             *string `json:"__typename"`
	AccessProviderWhatAccessProviderList `json:"-"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) GetPageInfo() *AccessProviderWhatAccessProviderListPageInfo {
	return v.AccessProviderWhatAccessProviderList.PageInfo
}

// GetEdges returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) GetEdges() []AccessProviderWhatAccessProviderListEdgesEdge {
	return v.AccessProviderWhatAccessProviderList.Edges
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatAccessProviderList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhatAccessProviderListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhatAccessProviderListEdgesEdge `json:"edges"`
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhatAccessProviderList.PageInfo
	retval.Edges = v.AccessProviderWhatAccessProviderList.Edges
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults is implemented by the following types:
// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError
// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError
// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult
// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError
type GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults interface {
	implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults() {
}
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults() {
}

func __unmarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults(b []byte, v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults(v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPagedResults: "%T"`, v)
	}
}

// GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersAccessProviderWhatAccessProvidersPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatAccessProvidersResponse is returned by GetAccessProviderWhatAccessProviders on success.
type GetAccessProviderWhatAccessProvidersResponse struct {
	AccessProvider GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderWhatAccessProvidersResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatAccessProvidersResponse) GetAccessProvider() GetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderWhatAccessProvidersResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatAccessProvidersResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatAccessProvidersResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatAccessProvidersResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatAccessProvidersResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderWhatAccessProvidersResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatAccessProvidersResponse) __premarshalJSON() (*__premarshalGetAccessProviderWhatAccessProvidersResponse, error) {
	var retval __premarshalGetAccessProviderWhatAccessProvidersResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderWhatAccessProvidersAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatAccessProvidersResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderWhatDataObjectListAccessProvider struct {
	Typename        *string                                                                      `json:"__typename"`
	WhatDataObjects GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProvider) GetTypename() *string { return v.Typename }

// GetWhatDataObjects returns GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProvider) GetWhatDataObjects() GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults {
	return v.WhatDataObjects
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProvider
		WhatDataObjects json.RawMessage `json:"whatDataObjects"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhatDataObjects
		src := firstPass.WhatDataObjects
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProvider struct {
	Typename *string `json:"__typename"`

	WhatDataObjects json.RawMessage `json:"whatDataObjects"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProvider, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhatDataObjects
		src := v.WhatDataObjects
		var err error
		*dst, err = __marshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderWhatDataObjectListAccessProvider
// GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError
// GetAccessProviderWhatDataObjectListAccessProviderNotFoundError
// GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
type GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderWhatDataObjectListAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(v *GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatDataObjectListAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatDataObjectListAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhatDataObjectListAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult includes the requested fields of the GraphQL type PagedResult.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult struct {
	Typename               *string `json:"__typename"`
	AccessProviderWhatList `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetPageInfo() *AccessProviderWhatListPageInfo {
	return v.AccessProviderWhatList.PageInfo
}

// GetEdges returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetEdges() []AccessProviderWhatListEdgesEdge {
	return v.AccessProviderWhatList.Edges
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhatListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhatListEdgesEdge `json:"edges"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhatList.PageInfo
	retval.Edges = v.AccessProviderWhatList.Edges
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults is implemented by the following types:
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults interface {
	implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}

func __unmarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(b []byte, v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults: "%T"`, v)
	}
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListResponse is returned by GetAccessProviderWhatDataObjectList on success.
type GetAccessProviderWhatDataObjectListResponse struct {
	AccessProvider GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderWhatDataObjectListResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListResponse) GetAccessProvider() GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderWhatDataObjectListResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatDataObjectListResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderWhatDataObjectListResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListResponse) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListResponse, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatDataObjectListResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhoListAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderWhoListAccessProvider struct {
	Typename *string                                                   `json:"__typename"`
	WhoList  GetAccessProviderWhoListAccessProviderWhoListPagedResults `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProvider) GetTypename() *string { return v.Typename }

// GetWhoList returns GetAccessProviderWhoListAccessProvider.WhoList, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProvider) GetWhoList() GetAccessProviderWhoListAccessProviderWhoListPagedResults {
	return v.WhoList
}

func (v *GetAccessProviderWhoListAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProvider
		WhoList json.RawMessage `json:"whoList"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhoList
		src := firstPass.WhoList
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhoListAccessProvider.WhoList: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProvider struct {
	Typename *string `json:"__typename"`

	WhoList json.RawMessage `json:"whoList"`
}

func (v *GetAccessProviderWhoListAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProvider, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhoList
		src := v.WhoList
		var err error
		*dst, err = __marshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhoListAccessProvider.WhoList: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderWhoListAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderWhoListAccessProvider
// GetAccessProviderWhoListAccessProviderInvalidInputError
// GetAccessProviderWhoListAccessProviderNotFoundError
// GetAccessProviderWhoListAccessProviderPermissionDeniedError
type GetAccessProviderWhoListAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhoListAccessProvider) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhoListAccessProviderInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderWhoListAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderWhoListAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderWhoListAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetAccessProviderWhoListAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhoListAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhoListAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhoListAccessProviderAccessProviderResult(v *GetAccessProviderWhoListAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhoListAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhoListAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderWhoListAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhoListAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhoListAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhoListAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhoListAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderWhoListInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetAccessProviderWhoListAccessProviderWhoListInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhoListAccessProviderWhoListNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhoListAccessProviderWhoListNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetAccessProviderWhoListAccessProviderWhoListPagedResult includes the requested fields of the GraphQL type PagedResult.
type GetAccessProviderWhoListAccessProviderWhoListPagedResult struct {
	Typename              *string `json:"__typename"`
	AccessProviderWhoList `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetPageInfo() *AccessProviderWhoListPageInfo {
	return v.AccessProviderWhoList.PageInfo
}

// GetEdges returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetEdges() []AccessProviderWhoListEdgesEdge {
	return v.AccessProviderWhoList.Edges
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderWhoListPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderWhoListPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhoList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhoListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhoListEdgesEdge `json:"edges"`
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhoList.PageInfo
	retval.Edges = v.AccessProviderWhoList.Edges
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderWhoListPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// GetAccessProviderWhoListAccessProviderWhoListPagedResults is implemented by the following types:
// GetAccessProviderWhoListAccessProviderWhoListInvalidInputError
// GetAccessProviderWhoListAccessProviderWhoListNotFoundError
// GetAccessProviderWhoListAccessProviderWhoListPagedResult
// GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
type GetAccessProviderWhoListAccessProviderWhoListPagedResults interface {
	implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhoListAccessProviderWhoListInvalidInputError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}
func (v *GetAccessProviderWhoListAccessProviderWhoListNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}

func __unmarshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(b []byte, v *GetAccessProviderWhoListAccessProviderWhoListPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderWhoListPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(v *GetAccessProviderWhoListAccessProviderWhoListPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhoListAccessProviderWhoListInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhoListAccessProviderWhoListInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderWhoListNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAccessProviderWhoListAccessProviderWhoListNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderWhoListPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderWhoListPagedResults: "%T"`, v)
	}
}

// GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhoListResponse is returned by GetAccessProviderWhoList on success.
type GetAccessProviderWhoListResponse struct {
	AccessProvider GetAccessProviderWhoListAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderWhoListResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListResponse) GetAccessProvider() GetAccessProviderWhoListAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderWhoListResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhoListAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhoListResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhoListResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderWhoListResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListResponse) __premarshalJSON() (*__premarshalGetAccessProviderWhoListResponse, error) {
	var retval __premarshalGetAccessProviderWhoListResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderWhoListAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhoListResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetDataObjectDataObject includes the requested fields of the GraphQL type DataObject.
type GetDataObjectDataObject struct {
	DataObject `json:"-"`
}

// GetId returns GetDataObjectDataObject.Id, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetId() string { return v.DataObject.Id }

// GetName returns GetDataObjectDataObject.Name, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetName() string { return v.DataObject.Name }

// GetFullName returns GetDataObjectDataObject.FullName, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetFullName() string { return v.DataObject.FullName }

// GetType returns GetDataObjectDataObject.Type, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetType() string { return v.DataObject.Type }

// GetDataType returns GetDataObjectDataObject.DataType, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetDataType() *string { return v.DataObject.DataType }

// GetDeleted returns GetDataObjectDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetDeleted() bool { return v.DataObject.Deleted }

// GetDescription returns GetDataObjectDataObject.Description, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetDescription() string { return v.DataObject.Description }

// GetDataSource returns GetDataObjectDataObject.DataSource, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetDataSource() *DataObjectDataSource {
	return v.DataObject.DataSource
}

// GetParent returns GetDataObjectDataObject.Parent, and is useful for accessing the field via an interface.
func (v *GetDataObjectDataObject) GetParent() *DataObjectParentDataObject { return v.DataObject.Parent }

func (v *GetDataObjectDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataObjectDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataObjectDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataObjectDataObject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`

	Description string `json:"description"`

	DataSource *DataObjectDataSource `json:"dataSource"`

	Parent *DataObjectParentDataObject `json:"parent"`
}

func (v *GetDataObjectDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataObjectDataObject) __premarshalJSON() (*__premarshalGetDataObjectDataObject, error) {
	var retval __premarshalGetDataObjectDataObject

	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	retval.Description = v.DataObject.Description
	retval.DataSource = v.DataObject.DataSource
	retval.Parent = v.DataObject.Parent
	return &retval, nil
}

// GetDataObjectResponse is returned by GetDataObject on success.
type GetDataObjectResponse struct {
	DataObject GetDataObjectDataObject `json:"dataObject"`
}

// GetDataObject returns GetDataObjectResponse.DataObject, and is useful for accessing the field via an interface.
func (v *GetDataObjectResponse) GetDataObject() GetDataObjectDataObject { return v.DataObject }

// GetDataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type GetDataSourceDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns GetDataSourceDataSource.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetTypename() *string { return v.Typename }

// GetId returns GetDataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetId() string { return v.DataSource.Id }

// GetName returns GetDataSourceDataSource.Name, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetName() string { return v.DataSource.Name }

// GetType returns GetDataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns GetDataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns GetDataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns GetDataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns GetDataSourceDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns GetDataSourceDataSource.Parent, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetParent() *DataSourceParentDataSource { return v.DataSource.Parent }

func (v *GetDataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataSourceDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *GetDataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceDataSource) __premarshalJSON() (*__premarshalGetDataSourceDataSource, error) {
	var retval __premarshalGetDataSourceDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// GetDataSourceDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// GetDataSourceDataSourceDataSourceResult is implemented by the following types:
// GetDataSourceDataSource
// GetDataSourceDataSourceInvalidInputError
// GetDataSourceDataSourceNotFoundError
// GetDataSourceDataSourcePermissionDeniedError
type GetDataSourceDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetDataSourceDataSource) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}
func (v *GetDataSourceDataSourceInvalidInputError) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}
func (v *GetDataSourceDataSourceNotFoundError) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}
func (v *GetDataSourceDataSourcePermissionDeniedError) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}

func __unmarshalGetDataSourceDataSourceDataSourceResult(b []byte, v *GetDataSourceDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(GetDataSourceDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetDataSourceDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetDataSourceDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetDataSourceDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDataSourceDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetDataSourceDataSourceDataSourceResult(v *GetDataSourceDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDataSourceDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDataSourceDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetDataSourceDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDataSourceDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetDataSourceDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDataSourceDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetDataSourceDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDataSourceDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDataSourceDataSourceDataSourceResult: "%T"`, v)
	}
}

// GetDataSourceDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetDataSourceDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetDataSourceDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourceInvalidInputError) GetTypename() *string { return v.Typename }

// GetDataSourceDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetDataSourceDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetDataSourceDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetDataSourceDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourceNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *GetDataSourceDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataSourceDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetDataSourceDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceDataSourceNotFoundError) __premarshalJSON() (*__premarshalGetDataSourceDataSourceNotFoundError, error) {
	var retval __premarshalGetDataSourceDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetDataSourceDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetDataSourceDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetDataSourceDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourcePermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetDataSourceDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetDataSourceDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataSourceDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetDataSourceDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalGetDataSourceDataSourcePermissionDeniedError, error) {
	var retval __premarshalGetDataSourceDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetDataSourceResponse is returned by GetDataSource on success.
type GetDataSourceResponse struct {
	DataSource GetDataSourceDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns GetDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *GetDataSourceResponse) GetDataSource() GetDataSourceDataSourceDataSourceResult {
	return v.DataSource
}

func (v *GetDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDataSourceDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDataSourceResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDataSourceResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *GetDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceResponse) __premarshalJSON() (*__premarshalGetDataSourceResponse, error) {
	var retval __premarshalGetDataSourceResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalGetDataSourceDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDataSourceResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

// GetGrantCategoryGrantCategory includes the requested fields of the GraphQL type GrantCategory.
type GetGrantCategoryGrantCategory struct {
	Typename             *string `json:"__typename"`
	GrantCategoryDetails `json:"-"`
}

// GetTypename returns GetGrantCategoryGrantCategory.Typename, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetTypename() *string { return v.Typename }

// GetId returns GetGrantCategoryGrantCategory.Id, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetId() string { return v.GrantCategoryDetails.Id }

// GetCreatedAt returns GetGrantCategoryGrantCategory.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetCreatedAt() time.Time {
	return v.GrantCategoryDetails.CreatedAt
}

// GetModifiedAt returns GetGrantCategoryGrantCategory.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetModifiedAt() time.Time {
	return v.GrantCategoryDetails.ModifiedAt
}

// GetIsSystem returns GetGrantCategoryGrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetIsSystem() bool { return v.GrantCategoryDetails.IsSystem }

// GetName returns GetGrantCategoryGrantCategory.Name, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetName() string { return v.GrantCategoryDetails.Name }

// GetDescription returns GetGrantCategoryGrantCategory.Description, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetDescription() string {
	return v.GrantCategoryDetails.Description
}

// GetIcon returns GetGrantCategoryGrantCategory.Icon, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetIcon() string { return v.GrantCategoryDetails.Icon }

// GetIsDefault returns GetGrantCategoryGrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetIsDefault() bool { return v.GrantCategoryDetails.IsDefault }

// GetCanCreate returns GetGrantCategoryGrantCategory.CanCreate, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetCanCreate() bool { return v.GrantCategoryDetails.CanCreate }

// GetAllowDuplicateNames returns GetGrantCategoryGrantCategory.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetAllowDuplicateNames() bool {
	return v.GrantCategoryDetails.AllowDuplicateNames
}

// GetMultiDataSource returns GetGrantCategoryGrantCategory.MultiDataSource, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetMultiDataSource() bool {
	return v.GrantCategoryDetails.MultiDataSource
}

// GetDefaultTypePerDataSource returns GetGrantCategoryGrantCategory.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetDefaultTypePerDataSource() []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource {
	return v.GrantCategoryDetails.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns GetGrantCategoryGrantCategory.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetAllowedWhoItems() GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems {
	return v.GrantCategoryDetails.AllowedWhoItems
}

// GetAllowedWhatItems returns GetGrantCategoryGrantCategory.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategory) GetAllowedWhatItems() GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems {
	return v.GrantCategoryDetails.AllowedWhatItems
}

func (v *GetGrantCategoryGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGrantCategoryGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGrantCategoryGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetGrantCategoryGrantCategory struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	IsSystem bool `json:"isSystem"`

	Name string `json:"name"`

	Description string `json:"description"`

	Icon string `json:"icon"`

	IsDefault bool `json:"isDefault"`

	CanCreate bool `json:"canCreate"`

	AllowDuplicateNames bool `json:"allowDuplicateNames"`

	MultiDataSource bool `json:"multiDataSource"`

	DefaultTypePerDataSource []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource `json:"defaultTypePerDataSource"`

	AllowedWhoItems GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems `json:"allowedWhoItems"`

	AllowedWhatItems GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems `json:"allowedWhatItems"`
}

func (v *GetGrantCategoryGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGrantCategoryGrantCategory) __premarshalJSON() (*__premarshalGetGrantCategoryGrantCategory, error) {
	var retval __premarshalGetGrantCategoryGrantCategory

	retval.Typename = v.Typename
	retval.Id = v.GrantCategoryDetails.Id
	retval.CreatedAt = v.GrantCategoryDetails.CreatedAt
	retval.ModifiedAt = v.GrantCategoryDetails.ModifiedAt
	retval.IsSystem = v.GrantCategoryDetails.IsSystem
	retval.Name = v.GrantCategoryDetails.Name
	retval.Description = v.GrantCategoryDetails.Description
	retval.Icon = v.GrantCategoryDetails.Icon
	retval.IsDefault = v.GrantCategoryDetails.IsDefault
	retval.CanCreate = v.GrantCategoryDetails.CanCreate
	retval.AllowDuplicateNames = v.GrantCategoryDetails.AllowDuplicateNames
	retval.MultiDataSource = v.GrantCategoryDetails.MultiDataSource
	retval.DefaultTypePerDataSource = v.GrantCategoryDetails.DefaultTypePerDataSource
	retval.AllowedWhoItems = v.GrantCategoryDetails.AllowedWhoItems
	retval.AllowedWhatItems = v.GrantCategoryDetails.AllowedWhatItems
	return &retval, nil
}

// GetGrantCategoryGrantCategoryGrantCategoryResult includes the requested fields of the GraphQL interface GrantCategoryResult.
//
// GetGrantCategoryGrantCategoryGrantCategoryResult is implemented by the following types:
// GetGrantCategoryGrantCategory
// GetGrantCategoryGrantCategoryInvalidInputError
// GetGrantCategoryGrantCategoryNotFoundError
// GetGrantCategoryGrantCategoryPermissionDeniedError
type GetGrantCategoryGrantCategoryGrantCategoryResult interface {
	implementsGraphQLInterfaceGetGrantCategoryGrantCategoryGrantCategoryResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetGrantCategoryGrantCategory) implementsGraphQLInterfaceGetGrantCategoryGrantCategoryGrantCategoryResult() {
}
func (v *GetGrantCategoryGrantCategoryInvalidInputError) implementsGraphQLInterfaceGetGrantCategoryGrantCategoryGrantCategoryResult() {
}
func (v *GetGrantCategoryGrantCategoryNotFoundError) implementsGraphQLInterfaceGetGrantCategoryGrantCategoryGrantCategoryResult() {
}
func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) implementsGraphQLInterfaceGetGrantCategoryGrantCategoryGrantCategoryResult() {
}

func __unmarshalGetGrantCategoryGrantCategoryGrantCategoryResult(b []byte, v *GetGrantCategoryGrantCategoryGrantCategoryResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GrantCategory":
		*v = new(GetGrantCategoryGrantCategory)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetGrantCategoryGrantCategoryInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetGrantCategoryGrantCategoryNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetGrantCategoryGrantCategoryPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GrantCategoryResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetGrantCategoryGrantCategoryGrantCategoryResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetGrantCategoryGrantCategoryGrantCategoryResult(v *GetGrantCategoryGrantCategoryGrantCategoryResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetGrantCategoryGrantCategory:
		typename = "GrantCategory"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetGrantCategoryGrantCategory
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetGrantCategoryGrantCategoryInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetGrantCategoryGrantCategoryInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetGrantCategoryGrantCategoryNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetGrantCategoryGrantCategoryNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetGrantCategoryGrantCategoryPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetGrantCategoryGrantCategoryPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetGrantCategoryGrantCategoryGrantCategoryResult: "%T"`, v)
	}
}

// GetGrantCategoryGrantCategoryInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetGrantCategoryGrantCategoryInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns GetGrantCategoryGrantCategoryInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryInvalidInputError) GetTypename() *string { return v.Typename }

// GetMessage returns GetGrantCategoryGrantCategoryInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *GetGrantCategoryGrantCategoryInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGrantCategoryGrantCategoryInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGrantCategoryGrantCategoryInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetGrantCategoryGrantCategoryInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetGrantCategoryGrantCategoryInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGrantCategoryGrantCategoryInvalidInputError) __premarshalJSON() (*__premarshalGetGrantCategoryGrantCategoryInvalidInputError, error) {
	var retval __premarshalGetGrantCategoryGrantCategoryInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// GetGrantCategoryGrantCategoryNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetGrantCategoryGrantCategoryNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetGrantCategoryGrantCategoryNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetGrantCategoryGrantCategoryNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetGrantCategoryGrantCategoryNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGrantCategoryGrantCategoryNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGrantCategoryGrantCategoryNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetGrantCategoryGrantCategoryNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetGrantCategoryGrantCategoryNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGrantCategoryGrantCategoryNotFoundError) __premarshalJSON() (*__premarshalGetGrantCategoryGrantCategoryNotFoundError, error) {
	var retval __premarshalGetGrantCategoryGrantCategoryNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetGrantCategoryGrantCategoryPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetGrantCategoryGrantCategoryPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetGrantCategoryGrantCategoryPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetGrantCategoryGrantCategoryPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGrantCategoryGrantCategoryPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGrantCategoryGrantCategoryPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetGrantCategoryGrantCategoryPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGrantCategoryGrantCategoryPermissionDeniedError) __premarshalJSON() (*__premarshalGetGrantCategoryGrantCategoryPermissionDeniedError, error) {
	var retval __premarshalGetGrantCategoryGrantCategoryPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetGrantCategoryResponse is returned by GetGrantCategory on success.
type GetGrantCategoryResponse struct {
	GrantCategory GetGrantCategoryGrantCategoryGrantCategoryResult `json:"-"`
}

// GetGrantCategory returns GetGrantCategoryResponse.GrantCategory, and is useful for accessing the field via an interface.
func (v *GetGrantCategoryResponse) GetGrantCategory() GetGrantCategoryGrantCategoryGrantCategoryResult {
	return v.GrantCategory
}

func (v *GetGrantCategoryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGrantCategoryResponse
		GrantCategory json.RawMessage `json:"grantCategory"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGrantCategoryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GrantCategory
		src := firstPass.GrantCategory
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetGrantCategoryGrantCategoryGrantCategoryResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetGrantCategoryResponse.GrantCategory: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetGrantCategoryResponse struct {
	GrantCategory json.RawMessage `json:"grantCategory"`
}

func (v *GetGrantCategoryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGrantCategoryResponse) __premarshalJSON() (*__premarshalGetGrantCategoryResponse, error) {
	var retval __premarshalGetGrantCategoryResponse

	{

		dst := &retval.GrantCategory
		src := v.GrantCategory
		var err error
		*dst, err = __marshalGetGrantCategoryGrantCategoryGrantCategoryResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetGrantCategoryResponse.GrantCategory: %w", err)
		}
	}
	return &retval, nil
}

// GetGroupGroup includes the requested fields of the GraphQL type Group.
type GetGroupGroup struct {
	Group `json:"-"`
}

// GetId returns GetGroupGroup.Id, and is useful for accessing the field via an interface.
func (v *GetGroupGroup) GetId() string { return v.Group.Id }

// GetName returns GetGroupGroup.Name, and is useful for accessing the field via an interface.
func (v *GetGroupGroup) GetName() string { return v.Group.Name }

// GetDisplayName returns GetGroupGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupGroup) GetDisplayName() string { return v.Group.DisplayName }

// GetDescription returns GetGroupGroup.Description, and is useful for accessing the field via an interface.
func (v *GetGroupGroup) GetDescription() *string { return v.Group.Description }

// GetDeleted returns GetGroupGroup.Deleted, and is useful for accessing the field via an interface.
func (v *GetGroupGroup) GetDeleted() bool { return v.Group.Deleted }

func (v *GetGroupGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetGroupGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.GetGroupGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Group)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetGroupGroup struct {
	Id string `json:"id"`

	Name string `json:"name"`

	DisplayName string `json:"displayName"`

	Description *string `json:"description"`

	Deleted bool `json:"deleted"`
}

func (v *GetGroupGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetGroupGroup) __premarshalJSON() (*__premarshalGetGroupGroup, error) {
	var retval __premarshalGetGroupGroup

	retval.Id = v.Group.Id
	retval.Name = v.Group.Name
	retval.DisplayName = v.Group.DisplayName
	retval.Description = v.Group.Description
	retval.Deleted = v.Group.Deleted
	return &retval, nil
}

// GetGroupResponse is returned by GetGroup on success.
type GetGroupResponse struct {
	Group GetGroupGroup `json:"group"`
}

// GetGroup returns GetGroupResponse.Group, and is useful for accessing the field via an interface.
func (v *GetGroupResponse) GetGroup() GetGroupGroup { return v.Group }

// GetIdentityStoreIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type GetIdentityStoreIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns GetIdentityStoreIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns GetIdentityStoreIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns GetIdentityStoreIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns GetIdentityStoreIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetDescription() string { return v.IdentityStore.Description }

// GetCreatedAt returns GetIdentityStoreIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetCreatedAt() time.Time { return v.IdentityStore.CreatedAt }

// GetModifiedAt returns GetIdentityStoreIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetModifiedAt() time.Time { return v.IdentityStore.ModifiedAt }

// GetMaster returns GetIdentityStoreIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns GetIdentityStoreIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *GetIdentityStoreIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *GetIdentityStoreIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStore) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStore, error) {
	var retval __premarshalGetIdentityStoreIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// GetIdentityStoreIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type GetIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns GetIdentityStoreIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalGetIdentityStoreIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// GetIdentityStoreIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// GetIdentityStoreIdentityStoreIdentityStoreResult is implemented by the following types:
// GetIdentityStoreIdentityStoreAlreadyExistsError
// GetIdentityStoreIdentityStore
// GetIdentityStoreIdentityStoreInvalidInputError
// GetIdentityStoreIdentityStoreNotFoundError
// GetIdentityStoreIdentityStorePermissionDeniedError
type GetIdentityStoreIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStore) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStoreInvalidInputError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStoreNotFoundError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}

func __unmarshalGetIdentityStoreIdentityStoreIdentityStoreResult(b []byte, v *GetIdentityStoreIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(GetIdentityStoreIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(GetIdentityStoreIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetIdentityStoreIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetIdentityStoreIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetIdentityStoreIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetIdentityStoreIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetIdentityStoreIdentityStoreIdentityStoreResult(v *GetIdentityStoreIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetIdentityStoreIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetIdentityStoreIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetIdentityStoreIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// GetIdentityStoreIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetIdentityStoreIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetIdentityStoreIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreInvalidInputError) GetTypename() *string { return v.Typename }

// GetIdentityStoreIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetIdentityStoreIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStoreNotFoundError, error) {
	var retval __premarshalGetIdentityStoreIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetIdentityStoreIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStorePermissionDeniedError, error) {
	var retval __premarshalGetIdentityStoreIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetIdentityStoreResponse is returned by GetIdentityStore on success.
type GetIdentityStoreResponse struct {
	IdentityStore GetIdentityStoreIdentityStoreIdentityStoreResult `json:"-"`
}

// GetIdentityStore returns GetIdentityStoreResponse.IdentityStore, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreResponse) GetIdentityStore() GetIdentityStoreIdentityStoreIdentityStoreResult {
	return v.IdentityStore
}

func (v *GetIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreResponse
		IdentityStore json.RawMessage `json:"identityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.IdentityStore
		src := firstPass.IdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetIdentityStoreIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetIdentityStoreResponse.IdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetIdentityStoreResponse struct {
	IdentityStore json.RawMessage `json:"identityStore"`
}

func (v *GetIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreResponse) __premarshalJSON() (*__premarshalGetIdentityStoreResponse, error) {
	var retval __premarshalGetIdentityStoreResponse

	{

		dst := &retval.IdentityStore
		src := v.IdentityStore
		var err error
		*dst, err = __marshalGetIdentityStoreIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetIdentityStoreResponse.IdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// GetRoleResponse is returned by GetRole on success.
type GetRoleResponse struct {
	Role GetRoleRole `json:"role"`
}

// GetRole returns GetRoleResponse.Role, and is useful for accessing the field via an interface.
func (v *GetRoleResponse) GetRole() GetRoleRole { return v.Role }

// GetRoleRole includes the requested fields of the GraphQL type Role.
type GetRoleRole struct {
	Role `json:"-"`
}

// GetId returns GetRoleRole.Id, and is useful for accessing the field via an interface.
func (v *GetRoleRole) GetId() string { return v.Role.Id }

// GetDescription returns GetRoleRole.Description, and is useful for accessing the field via an interface.
func (v *GetRoleRole) GetDescription() string { return v.Role.Description }

// GetName returns GetRoleRole.Name, and is useful for accessing the field via an interface.
func (v *GetRoleRole) GetName() string { return v.Role.Name }

func (v *GetRoleRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRoleRole
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRoleRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRoleRole struct {
	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *GetRoleRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRoleRole) __premarshalJSON() (*__premarshalGetRoleRole, error) {
	var retval __premarshalGetRoleRole

	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// GetUserByEmailResponse is returned by GetUserByEmail on success.
type GetUserByEmailResponse struct {
	UserByEmail *GetUserByEmailUserByEmailUserResult `json:"-"`
}

// GetUserByEmail returns GetUserByEmailResponse.UserByEmail, and is useful for accessing the field via an interface.
func (v *GetUserByEmailResponse) GetUserByEmail() *GetUserByEmailUserByEmailUserResult {
	return v.UserByEmail
}

func (v *GetUserByEmailResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserByEmailResponse
		UserByEmail json.RawMessage `json:"userByEmail"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserByEmailResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserByEmail
		src := firstPass.UserByEmail
		if len(src) != 0 && string(src) != "null" {
			*dst = new(GetUserByEmailUserByEmailUserResult)
			err = __unmarshalGetUserByEmailUserByEmailUserResult(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetUserByEmailResponse.UserByEmail: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetUserByEmailResponse struct {
	UserByEmail json.RawMessage `json:"userByEmail"`
}

func (v *GetUserByEmailResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserByEmailResponse) __premarshalJSON() (*__premarshalGetUserByEmailResponse, error) {
	var retval __premarshalGetUserByEmailResponse

	{

		dst := &retval.UserByEmail
		src := v.UserByEmail
		if src != nil {
			var err error
			*dst, err = __marshalGetUserByEmailUserByEmailUserResult(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetUserByEmailResponse.UserByEmail: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetUserByEmailUserByEmailInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type GetUserByEmailUserByEmailInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns GetUserByEmailUserByEmailInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns GetUserByEmailUserByEmailInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns GetUserByEmailUserByEmailInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *GetUserByEmailUserByEmailInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserByEmailUserByEmailInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserByEmailUserByEmailInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserByEmailUserByEmailInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *GetUserByEmailUserByEmailInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserByEmailUserByEmailInvalidEmailError) __premarshalJSON() (*__premarshalGetUserByEmailUserByEmailInvalidEmailError, error) {
	var retval __premarshalGetUserByEmailUserByEmailInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// GetUserByEmailUserByEmailInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetUserByEmailUserByEmailInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetUserByEmailUserByEmailInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailInvalidInputError) GetTypename() *string { return v.Typename }

// GetUserByEmailUserByEmailNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetUserByEmailUserByEmailNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetUserByEmailUserByEmailNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetUserByEmailUserByEmailNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *GetUserByEmailUserByEmailNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserByEmailUserByEmailNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserByEmailUserByEmailNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserByEmailUserByEmailNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetUserByEmailUserByEmailNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserByEmailUserByEmailNotFoundError) __premarshalJSON() (*__premarshalGetUserByEmailUserByEmailNotFoundError, error) {
	var retval __premarshalGetUserByEmailUserByEmailNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetUserByEmailUserByEmailPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetUserByEmailUserByEmailPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetUserByEmailUserByEmailPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetUserByEmailUserByEmailPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetUserByEmailUserByEmailPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserByEmailUserByEmailPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserByEmailUserByEmailPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserByEmailUserByEmailPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetUserByEmailUserByEmailPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserByEmailUserByEmailPermissionDeniedError) __premarshalJSON() (*__premarshalGetUserByEmailUserByEmailPermissionDeniedError, error) {
	var retval __premarshalGetUserByEmailUserByEmailPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetUserByEmailUserByEmailUser includes the requested fields of the GraphQL type User.
type GetUserByEmailUserByEmailUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns GetUserByEmailUserByEmailUser.Typename, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetTypename() *string { return v.Typename }

// GetId returns GetUserByEmailUserByEmailUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetId() string { return v.User.Id }

// GetName returns GetUserByEmailUserByEmailUser.Name, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetName() string { return v.User.Name }

// GetEmail returns GetUserByEmailUserByEmailUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns GetUserByEmailUserByEmailUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns GetUserByEmailUserByEmailUser.Type, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetType() UserType { return v.User.Type }

func (v *GetUserByEmailUserByEmailUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserByEmailUserByEmailUser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserByEmailUserByEmailUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserByEmailUserByEmailUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *GetUserByEmailUserByEmailUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserByEmailUserByEmailUser) __premarshalJSON() (*__premarshalGetUserByEmailUserByEmailUser, error) {
	var retval __premarshalGetUserByEmailUserByEmailUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// GetUserByEmailUserByEmailUserResult includes the requested fields of the GraphQL interface UserResult.
//
// GetUserByEmailUserByEmailUserResult is implemented by the following types:
// GetUserByEmailUserByEmailInvalidEmailError
// GetUserByEmailUserByEmailInvalidInputError
// GetUserByEmailUserByEmailNotFoundError
// GetUserByEmailUserByEmailPermissionDeniedError
// GetUserByEmailUserByEmailUser
type GetUserByEmailUserByEmailUserResult interface {
	implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetUserByEmailUserByEmailInvalidEmailError) implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult() {
}
func (v *GetUserByEmailUserByEmailInvalidInputError) implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult() {
}
func (v *GetUserByEmailUserByEmailNotFoundError) implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult() {
}
func (v *GetUserByEmailUserByEmailPermissionDeniedError) implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult() {
}
func (v *GetUserByEmailUserByEmailUser) implementsGraphQLInterfaceGetUserByEmailUserByEmailUserResult() {
}

func __unmarshalGetUserByEmailUserByEmailUserResult(b []byte, v *GetUserByEmailUserByEmailUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(GetUserByEmailUserByEmailInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetUserByEmailUserByEmailInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetUserByEmailUserByEmailNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetUserByEmailUserByEmailPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(GetUserByEmailUserByEmailUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetUserByEmailUserByEmailUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetUserByEmailUserByEmailUserResult(v *GetUserByEmailUserByEmailUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetUserByEmailUserByEmailInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserByEmailUserByEmailInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserByEmailUserByEmailInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetUserByEmailUserByEmailInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *GetUserByEmailUserByEmailNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserByEmailUserByEmailNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserByEmailUserByEmailPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserByEmailUserByEmailPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserByEmailUserByEmailUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserByEmailUserByEmailUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetUserByEmailUserByEmailUserResult: "%T"`, v)
	}
}

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	User GetUserUserUserResult `json:"-"`
}

// GetUser returns GetUserResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetUser() GetUserUserUserResult { return v.User }

func (v *GetUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserResponse
		User json.RawMessage `json:"user"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.User
		src := firstPass.User
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetUserUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetUserResponse.User: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetUserResponse struct {
	User json.RawMessage `json:"user"`
}

func (v *GetUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserResponse) __premarshalJSON() (*__premarshalGetUserResponse, error) {
	var retval __premarshalGetUserResponse

	{

		dst := &retval.User
		src := v.User
		var err error
		*dst, err = __marshalGetUserUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetUserResponse.User: %w", err)
		}
	}
	return &retval, nil
}

// GetUserUser includes the requested fields of the GraphQL type User.
type GetUserUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns GetUserUser.Typename, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetTypename() *string { return v.Typename }

// GetId returns GetUserUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetId() string { return v.User.Id }

// GetName returns GetUserUser.Name, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetName() string { return v.User.Name }

// GetEmail returns GetUserUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns GetUserUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns GetUserUser.Type, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetType() UserType { return v.User.Type }

func (v *GetUserUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserUser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *GetUserUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserUser) __premarshalJSON() (*__premarshalGetUserUser, error) {
	var retval __premarshalGetUserUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// GetUserUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type GetUserUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns GetUserUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserUserInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns GetUserUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *GetUserUserInvalidEmailError) GetErrEmail() string { return v.InvalidEmailError.ErrEmail }

// GetMessage returns GetUserUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *GetUserUserInvalidEmailError) GetMessage() string { return v.InvalidEmailError.Message }

func (v *GetUserUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *GetUserUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserUserInvalidEmailError) __premarshalJSON() (*__premarshalGetUserUserInvalidEmailError, error) {
	var retval __premarshalGetUserUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// GetUserUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type GetUserUserInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns GetUserUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserUserInvalidInputError) GetTypename() *string { return v.Typename }

// GetMessage returns GetUserUserInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *GetUserUserInvalidInputError) GetMessage() string { return v.InvalidInputError.Message }

func (v *GetUserUserInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserUserInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserUserInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserUserInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetUserUserInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserUserInvalidInputError) __premarshalJSON() (*__premarshalGetUserUserInvalidInputError, error) {
	var retval __premarshalGetUserUserInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// GetUserUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetUserUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetUserUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetUserUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetUserUserNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *GetUserUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetUserUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserUserNotFoundError) __premarshalJSON() (*__premarshalGetUserUserNotFoundError, error) {
	var retval __premarshalGetUserUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetUserUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetUserUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetUserUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetUserUserPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetUserUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetUserUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetUserUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetUserUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserUserPermissionDeniedError) __premarshalJSON() (*__premarshalGetUserUserPermissionDeniedError, error) {
	var retval __premarshalGetUserUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetUserUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// GetUserUserUserResult is implemented by the following types:
// GetUserUserInvalidEmailError
// GetUserUserInvalidInputError
// GetUserUserNotFoundError
// GetUserUserPermissionDeniedError
// GetUserUser
type GetUserUserUserResult interface {
	implementsGraphQLInterfaceGetUserUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetUserUserInvalidEmailError) implementsGraphQLInterfaceGetUserUserUserResult()     {}
func (v *GetUserUserInvalidInputError) implementsGraphQLInterfaceGetUserUserUserResult()     {}
func (v *GetUserUserNotFoundError) implementsGraphQLInterfaceGetUserUserUserResult()         {}
func (v *GetUserUserPermissionDeniedError) implementsGraphQLInterfaceGetUserUserUserResult() {}
func (v *GetUserUser) implementsGraphQLInterfaceGetUserUserUserResult()                      {}

func __unmarshalGetUserUserUserResult(b []byte, v *GetUserUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(GetUserUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(GetUserUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetUserUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetUserUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(GetUserUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetUserUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetUserUserUserResult(v *GetUserUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetUserUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserUserInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserUserInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetUserUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetUserUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetUserUserUserResult: "%T"`, v)
	}
}

// GrantCategory includes the GraphQL fields of GrantCategory requested by the fragment GrantCategory.
type GrantCategory struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	IsSystem  bool   `json:"isSystem"`
	IsDefault bool   `json:"isDefault"`
}

// GetId returns GrantCategory.Id, and is useful for accessing the field via an interface.
func (v *GrantCategory) GetId() string { return v.Id }

// GetName returns GrantCategory.Name, and is useful for accessing the field via an interface.
func (v *GrantCategory) GetName() string { return v.Name }

// GetIsSystem returns GrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *GrantCategory) GetIsSystem() bool { return v.IsSystem }

// GetIsDefault returns GrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *GrantCategory) GetIsDefault() bool { return v.IsDefault }

// GrantCategoryAllowedWhatItems includes the GraphQL fields of GrantCategoryAllowedWhatItems requested by the fragment GrantCategoryAllowedWhatItems.
type GrantCategoryAllowedWhatItems struct {
	DataObject bool `json:"dataObject"`
}

// GetDataObject returns GrantCategoryAllowedWhatItems.DataObject, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhatItems) GetDataObject() bool { return v.DataObject }

type GrantCategoryAllowedWhatItemsInput struct {
	DataObject bool `json:"dataObject"`
}

// GetDataObject returns GrantCategoryAllowedWhatItemsInput.DataObject, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhatItemsInput) GetDataObject() bool { return v.DataObject }

// GrantCategoryAllowedWhoItems includes the GraphQL fields of GrantCategoryAllowedWhoItems requested by the fragment GrantCategoryAllowedWhoItems.
type GrantCategoryAllowedWhoItems struct {
	User        bool     `json:"user"`
	Group       bool     `json:"group"`
	Inheritance bool     `json:"inheritance"`
	Self        bool     `json:"self"`
	Categories  []string `json:"categories"`
}

// GetUser returns GrantCategoryAllowedWhoItems.User, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItems) GetUser() bool { return v.User }

// GetGroup returns GrantCategoryAllowedWhoItems.Group, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItems) GetGroup() bool { return v.Group }

// GetInheritance returns GrantCategoryAllowedWhoItems.Inheritance, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItems) GetInheritance() bool { return v.Inheritance }

// GetSelf returns GrantCategoryAllowedWhoItems.Self, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItems) GetSelf() bool { return v.Self }

// GetCategories returns GrantCategoryAllowedWhoItems.Categories, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItems) GetCategories() []string { return v.Categories }

type GrantCategoryAllowedWhoItemsInput struct {
	User        bool     `json:"user"`
	Group       bool     `json:"group"`
	Inheritance bool     `json:"inheritance"`
	Self        bool     `json:"self"`
	Categories  []string `json:"categories"`
}

// GetUser returns GrantCategoryAllowedWhoItemsInput.User, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItemsInput) GetUser() bool { return v.User }

// GetGroup returns GrantCategoryAllowedWhoItemsInput.Group, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItemsInput) GetGroup() bool { return v.Group }

// GetInheritance returns GrantCategoryAllowedWhoItemsInput.Inheritance, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItemsInput) GetInheritance() bool { return v.Inheritance }

// GetSelf returns GrantCategoryAllowedWhoItemsInput.Self, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItemsInput) GetSelf() bool { return v.Self }

// GetCategories returns GrantCategoryAllowedWhoItemsInput.Categories, and is useful for accessing the field via an interface.
func (v *GrantCategoryAllowedWhoItemsInput) GetCategories() []string { return v.Categories }

// GrantCategoryDetails includes the GraphQL fields of GrantCategory requested by the fragment GrantCategoryDetails.
type GrantCategoryDetails struct {
	Id                       string                                                                       `json:"id"`
	CreatedAt                time.Time                                                                    `json:"createdAt"`
	ModifiedAt               time.Time                                                                    `json:"modifiedAt"`
	IsSystem                 bool                                                                         `json:"isSystem"`
	Name                     string                                                                       `json:"name"`
	Description              string                                                                       `json:"description"`
	Icon                     string                                                                       `json:"icon"`
	IsDefault                bool                                                                         `json:"isDefault"`
	CanCreate                bool                                                                         `json:"canCreate"`
	AllowDuplicateNames      bool                                                                         `json:"allowDuplicateNames"`
	MultiDataSource          bool                                                                         `json:"multiDataSource"`
	DefaultTypePerDataSource []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource `json:"defaultTypePerDataSource"`
	AllowedWhoItems          GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems              `json:"allowedWhoItems"`
	AllowedWhatItems         GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems            `json:"allowedWhatItems"`
}

// GetId returns GrantCategoryDetails.Id, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetId() string { return v.Id }

// GetCreatedAt returns GrantCategoryDetails.CreatedAt, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns GrantCategoryDetails.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetIsSystem returns GrantCategoryDetails.IsSystem, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetIsSystem() bool { return v.IsSystem }

// GetName returns GrantCategoryDetails.Name, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetName() string { return v.Name }

// GetDescription returns GrantCategoryDetails.Description, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetDescription() string { return v.Description }

// GetIcon returns GrantCategoryDetails.Icon, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetIcon() string { return v.Icon }

// GetIsDefault returns GrantCategoryDetails.IsDefault, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetIsDefault() bool { return v.IsDefault }

// GetCanCreate returns GrantCategoryDetails.CanCreate, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetCanCreate() bool { return v.CanCreate }

// GetAllowDuplicateNames returns GrantCategoryDetails.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetAllowDuplicateNames() bool { return v.AllowDuplicateNames }

// GetMultiDataSource returns GrantCategoryDetails.MultiDataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetMultiDataSource() bool { return v.MultiDataSource }

// GetDefaultTypePerDataSource returns GrantCategoryDetails.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetDefaultTypePerDataSource() []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource {
	return v.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns GrantCategoryDetails.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetAllowedWhoItems() GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems {
	return v.AllowedWhoItems
}

// GetAllowedWhatItems returns GrantCategoryDetails.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetails) GetAllowedWhatItems() GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems {
	return v.AllowedWhatItems
}

// GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems includes the requested fields of the GraphQL type GrantCategoryAllowedWhatItems.
type GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems struct {
	GrantCategoryAllowedWhatItems `json:"-"`
}

// GetDataObject returns GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems.DataObject, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems) GetDataObject() bool {
	return v.GrantCategoryAllowedWhatItems.DataObject
}

func (v *GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems
		graphql.NoUnmarshalJSON
	}
	firstPass.GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryAllowedWhatItems)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems struct {
	DataObject bool `json:"dataObject"`
}

func (v *GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems) __premarshalJSON() (*__premarshalGrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems, error) {
	var retval __premarshalGrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems

	retval.DataObject = v.GrantCategoryAllowedWhatItems.DataObject
	return &retval, nil
}

// GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems includes the requested fields of the GraphQL type GrantCategoryAllowedWhoItems.
type GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems struct {
	GrantCategoryAllowedWhoItems `json:"-"`
}

// GetUser returns GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems.User, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) GetUser() bool {
	return v.GrantCategoryAllowedWhoItems.User
}

// GetGroup returns GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems.Group, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) GetGroup() bool {
	return v.GrantCategoryAllowedWhoItems.Group
}

// GetInheritance returns GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems.Inheritance, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) GetInheritance() bool {
	return v.GrantCategoryAllowedWhoItems.Inheritance
}

// GetSelf returns GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems.Self, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) GetSelf() bool {
	return v.GrantCategoryAllowedWhoItems.Self
}

// GetCategories returns GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems.Categories, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) GetCategories() []string {
	return v.GrantCategoryAllowedWhoItems.Categories
}

func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems
		graphql.NoUnmarshalJSON
	}
	firstPass.GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryAllowedWhoItems)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems struct {
	User bool `json:"user"`

	Group bool `json:"group"`

	Inheritance bool `json:"inheritance"`

	Self bool `json:"self"`

	Categories []string `json:"categories"`
}

func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems) __premarshalJSON() (*__premarshalGrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems, error) {
	var retval __premarshalGrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems

	retval.User = v.GrantCategoryAllowedWhoItems.User
	retval.Group = v.GrantCategoryAllowedWhoItems.Group
	retval.Inheritance = v.GrantCategoryAllowedWhoItems.Inheritance
	retval.Self = v.GrantCategoryAllowedWhoItems.Self
	retval.Categories = v.GrantCategoryAllowedWhoItems.Categories
	return &retval, nil
}

// GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource includes the requested fields of the GraphQL type GrantCategoryTypeForDataSource.
type GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource struct {
	GrantCategoryTypeForDataSource `json:"-"`
}

// GetDataSource returns GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource.DataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource) GetDataSource() string {
	return v.GrantCategoryTypeForDataSource.DataSource
}

// GetType returns GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource.Type, and is useful for accessing the field via an interface.
func (v *GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource) GetType() string {
	return v.GrantCategoryTypeForDataSource.Type
}

func (v *GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryTypeForDataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource struct {
	DataSource string `json:"DataSource"`

	Type string `json:"Type"`
}

func (v *GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource) __premarshalJSON() (*__premarshalGrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource, error) {
	var retval __premarshalGrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource

	retval.DataSource = v.GrantCategoryTypeForDataSource.DataSource
	retval.Type = v.GrantCategoryTypeForDataSource.Type
	return &retval, nil
}

type GrantCategoryInput struct {
	Name                     *string                               `json:"name,omitempty"`
	Description              *string                               `json:"description,omitempty"`
	Icon                     *string                               `json:"icon,omitempty"`
	CanCreate                *bool                                 `json:"canCreate,omitempty"`
	CanRequestAccess         *bool                                 `json:"canRequestAccess,omitempty"`
	DescriptionMandatory     *bool                                 `json:"descriptionMandatory,omitempty"`
	AllowDuplicateNames      *bool                                 `json:"allowDuplicateNames,omitempty"`
	MultiDataSource          *bool                                 `json:"multiDataSource,omitempty"`
	DefaultTypePerDataSource []GrantCategoryTypeForDataSourceInput `json:"defaultTypePerDataSource"`
	AllowedWhoItems          *GrantCategoryAllowedWhoItemsInput    `json:"allowedWhoItems,omitempty"`
	AllowedWhatItems         *GrantCategoryAllowedWhatItemsInput   `json:"allowedWhatItems,omitempty"`
	NameRegEx                *string                               `json:"nameRegEx,omitempty"`
	NameRegExMsg             *string                               `json:"nameRegExMsg,omitempty"`
	NamingHintRegEx          *string                               `json:"namingHintRegEx,omitempty"`
	NamingHintRegExMsg       *string                               `json:"namingHintRegExMsg,omitempty"`
	LocksOnCreate            []AccessProviderLock                  `json:"locksOnCreate"`
}

// GetName returns GrantCategoryInput.Name, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetName() *string { return v.Name }

// GetDescription returns GrantCategoryInput.Description, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetDescription() *string { return v.Description }

// GetIcon returns GrantCategoryInput.Icon, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetIcon() *string { return v.Icon }

// GetCanCreate returns GrantCategoryInput.CanCreate, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetCanCreate() *bool { return v.CanCreate }

// GetCanRequestAccess returns GrantCategoryInput.CanRequestAccess, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetCanRequestAccess() *bool { return v.CanRequestAccess }

// GetDescriptionMandatory returns GrantCategoryInput.DescriptionMandatory, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetDescriptionMandatory() *bool { return v.DescriptionMandatory }

// GetAllowDuplicateNames returns GrantCategoryInput.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetAllowDuplicateNames() *bool { return v.AllowDuplicateNames }

// GetMultiDataSource returns GrantCategoryInput.MultiDataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetMultiDataSource() *bool { return v.MultiDataSource }

// GetDefaultTypePerDataSource returns GrantCategoryInput.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetDefaultTypePerDataSource() []GrantCategoryTypeForDataSourceInput {
	return v.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns GrantCategoryInput.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetAllowedWhoItems() *GrantCategoryAllowedWhoItemsInput {
	return v.AllowedWhoItems
}

// GetAllowedWhatItems returns GrantCategoryInput.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetAllowedWhatItems() *GrantCategoryAllowedWhatItemsInput {
	return v.AllowedWhatItems
}

// GetNameRegEx returns GrantCategoryInput.NameRegEx, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetNameRegEx() *string { return v.NameRegEx }

// GetNameRegExMsg returns GrantCategoryInput.NameRegExMsg, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetNameRegExMsg() *string { return v.NameRegExMsg }

// GetNamingHintRegEx returns GrantCategoryInput.NamingHintRegEx, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetNamingHintRegEx() *string { return v.NamingHintRegEx }

// GetNamingHintRegExMsg returns GrantCategoryInput.NamingHintRegExMsg, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetNamingHintRegExMsg() *string { return v.NamingHintRegExMsg }

// GetLocksOnCreate returns GrantCategoryInput.LocksOnCreate, and is useful for accessing the field via an interface.
func (v *GrantCategoryInput) GetLocksOnCreate() []AccessProviderLock { return v.LocksOnCreate }

// GrantCategoryTypeForDataSource includes the GraphQL fields of GrantCategoryTypeForDataSource requested by the fragment GrantCategoryTypeForDataSource.
type GrantCategoryTypeForDataSource struct {
	DataSource string `json:"DataSource"`
	Type       string `json:"Type"`
}

// GetDataSource returns GrantCategoryTypeForDataSource.DataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryTypeForDataSource) GetDataSource() string { return v.DataSource }

// GetType returns GrantCategoryTypeForDataSource.Type, and is useful for accessing the field via an interface.
func (v *GrantCategoryTypeForDataSource) GetType() string { return v.Type }

type GrantCategoryTypeForDataSourceInput struct {
	DataSource string `json:"DataSource"`
	Type       string `json:"Type"`
}

// GetDataSource returns GrantCategoryTypeForDataSourceInput.DataSource, and is useful for accessing the field via an interface.
func (v *GrantCategoryTypeForDataSourceInput) GetDataSource() string { return v.DataSource }

// GetType returns GrantCategoryTypeForDataSourceInput.Type, and is useful for accessing the field via an interface.
func (v *GrantCategoryTypeForDataSourceInput) GetType() string { return v.Type }

// Group includes the GraphQL fields of Group requested by the fragment Group.
type Group struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	DisplayName string  `json:"displayName"`
	Description *string `json:"description"`
	Deleted     bool    `json:"deleted"`
}

// GetId returns Group.Id, and is useful for accessing the field via an interface.
func (v *Group) GetId() string { return v.Id }

// GetName returns Group.Name, and is useful for accessing the field via an interface.
func (v *Group) GetName() string { return v.Name }

// GetDisplayName returns Group.DisplayName, and is useful for accessing the field via an interface.
func (v *Group) GetDisplayName() string { return v.DisplayName }

// GetDescription returns Group.Description, and is useful for accessing the field via an interface.
func (v *Group) GetDescription() *string { return v.Description }

// GetDeleted returns Group.Deleted, and is useful for accessing the field via an interface.
func (v *Group) GetDeleted() bool { return v.Deleted }

type GroupFilterInput struct {
	Search                      *string  `json:"search,omitempty"`
	DataSources                 []string `json:"dataSources"`
	IdentityStores              []string `json:"identityStores"`
	AccessProvider              *string  `json:"accessProvider,omitempty"`
	IncludeMasterIdentityStores *bool    `json:"includeMasterIdentityStores,omitempty"`
	Account                     *string  `json:"account,omitempty"`
	User                        *string  `json:"user,omitempty"`
	IncludeAncestors            *bool    `json:"includeAncestors,omitempty"`
	IncludeDeleted              *bool    `json:"includeDeleted,omitempty"`
	ContainsARaitoUser          *bool    `json:"containsARaitoUser,omitempty"`
	Exclude                     []string `json:"exclude"`
}

// GetSearch returns GroupFilterInput.Search, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetSearch() *string { return v.Search }

// GetDataSources returns GroupFilterInput.DataSources, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetDataSources() []string { return v.DataSources }

// GetIdentityStores returns GroupFilterInput.IdentityStores, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetIdentityStores() []string { return v.IdentityStores }

// GetAccessProvider returns GroupFilterInput.AccessProvider, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetAccessProvider() *string { return v.AccessProvider }

// GetIncludeMasterIdentityStores returns GroupFilterInput.IncludeMasterIdentityStores, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetIncludeMasterIdentityStores() *bool {
	return v.IncludeMasterIdentityStores
}

// GetAccount returns GroupFilterInput.Account, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetAccount() *string { return v.Account }

// GetUser returns GroupFilterInput.User, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetUser() *string { return v.User }

// GetIncludeAncestors returns GroupFilterInput.IncludeAncestors, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetIncludeAncestors() *bool { return v.IncludeAncestors }

// GetIncludeDeleted returns GroupFilterInput.IncludeDeleted, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetIncludeDeleted() *bool { return v.IncludeDeleted }

// GetContainsARaitoUser returns GroupFilterInput.ContainsARaitoUser, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetContainsARaitoUser() *bool { return v.ContainsARaitoUser }

// GetExclude returns GroupFilterInput.Exclude, and is useful for accessing the field via an interface.
func (v *GroupFilterInput) GetExclude() []string { return v.Exclude }

type GroupOrderByInput struct {
	Name        *Sort `json:"name,omitempty"`
	DisplayName *Sort `json:"displayName,omitempty"`
}

// GetName returns GroupOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *GroupOrderByInput) GetName() *Sort { return v.Name }

// GetDisplayName returns GroupOrderByInput.DisplayName, and is useful for accessing the field via an interface.
func (v *GroupOrderByInput) GetDisplayName() *Sort { return v.DisplayName }

// GroupPage includes the GraphQL fields of PagedResult requested by the fragment GroupPage.
type GroupPage struct {
	PageInfo *GroupPagePageInfo   `json:"pageInfo"`
	Edges    []GroupPageEdgesEdge `json:"edges"`
}

// GetPageInfo returns GroupPage.PageInfo, and is useful for accessing the field via an interface.
func (v *GroupPage) GetPageInfo() *GroupPagePageInfo { return v.PageInfo }

// GetEdges returns GroupPage.Edges, and is useful for accessing the field via an interface.
func (v *GroupPage) GetEdges() []GroupPageEdgesEdge { return v.Edges }

// GroupPageEdgesEdge includes the requested fields of the GraphQL type Edge.
type GroupPageEdgesEdge struct {
	Cursor *string                     `json:"cursor"`
	Node   *GroupPageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns GroupPageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns GroupPageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdge) GetNode() *GroupPageEdgesEdgeNodeItem { return v.Node }

func (v *GroupPageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GroupPageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GroupPageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(GroupPageEdgesEdgeNodeItem)
			err = __unmarshalGroupPageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GroupPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGroupPageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *GroupPageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GroupPageEdgesEdge) __premarshalJSON() (*__premarshalGroupPageEdgesEdge, error) {
	var retval __premarshalGroupPageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalGroupPageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GroupPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// GroupPageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GroupPageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type GroupPageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type GroupPageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type GroupPageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type GroupPageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type GroupPageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type GroupPageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type GroupPageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type GroupPageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type GroupPageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type GroupPageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type GroupPageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type GroupPageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type GroupPageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type GroupPageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type GroupPageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// GroupPageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type GroupPageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type GroupPageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type GroupPageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type GroupPageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type GroupPageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type GroupPageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeDatasourceNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// GroupPageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type GroupPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
	Group    `json:"-"`
}

// GetTypename returns GroupPageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// GetId returns GroupPageEdgesEdgeNodeGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetId() string { return v.Group.Id }

// GetName returns GroupPageEdgesEdgeNodeGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetName() string { return v.Group.Name }

// GetDisplayName returns GroupPageEdgesEdgeNodeGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetDisplayName() string { return v.Group.DisplayName }

// GetDescription returns GroupPageEdgesEdgeNodeGroup.Description, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetDescription() *string { return v.Group.Description }

// GetDeleted returns GroupPageEdgesEdgeNodeGroup.Deleted, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroup) GetDeleted() bool { return v.Group.Deleted }

func (v *GroupPageEdgesEdgeNodeGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GroupPageEdgesEdgeNodeGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.GroupPageEdgesEdgeNodeGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Group)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGroupPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	DisplayName string `json:"displayName"`

	Description *string `json:"description"`

	Deleted bool `json:"deleted"`
}

func (v *GroupPageEdgesEdgeNodeGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GroupPageEdgesEdgeNodeGroup) __premarshalJSON() (*__premarshalGroupPageEdgesEdgeNodeGroup, error) {
	var retval __premarshalGroupPageEdgesEdgeNodeGroup

	retval.Typename = v.Typename
	retval.Id = v.Group.Id
	retval.Name = v.Group.Name
	retval.DisplayName = v.Group.DisplayName
	retval.Description = v.Group.Description
	retval.Deleted = v.Group.Deleted
	return &retval, nil
}

// GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type GroupPageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type GroupPageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// GroupPageEdgesEdgeNodeItem is implemented by the following types:
// GroupPageEdgesEdgeNodeAccessProvider
// GroupPageEdgesEdgeNodeAccessProviderFilterDetail
// GroupPageEdgesEdgeNodeAccessProviderInsightsResult
// GroupPageEdgesEdgeNodeAccessProviderMaskDetail
// GroupPageEdgesEdgeNodeAccessProviderMatch
// GroupPageEdgesEdgeNodeAccessRequest
// GroupPageEdgesEdgeNodeAccessRequestNotification
// GroupPageEdgesEdgeNodeAccessRequestWhatItem
// GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem
// GroupPageEdgesEdgeNodeAccessWhatItem
// GroupPageEdgesEdgeNodeAccessWhoItem
// GroupPageEdgesEdgeNodeAccount
// GroupPageEdgesEdgeNodeAuditDiffLog
// GroupPageEdgesEdgeNodeComment
// GroupPageEdgesEdgeNodeCommentNotification
// GroupPageEdgesEdgeNodeDataAccessReturnItem
// GroupPageEdgesEdgeNodeDataObject
// GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation
// GroupPageEdgesEdgeNodeDataObjectInsightsResult
// GroupPageEdgesEdgeNodeDataObjectType
// GroupPageEdgesEdgeNodeDataSource
// GroupPageEdgesEdgeNodeDataSourceShare
// GroupPageEdgesEdgeNodeDataUsage
// GroupPageEdgesEdgeNodeDatasourceNotification
// GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification
// GroupPageEdgesEdgeNodeGroup
// GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem
// GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem
// GroupPageEdgesEdgeNodeIdentityStore
// GroupPageEdgesEdgeNodeIssue
// GroupPageEdgesEdgeNodeJob
// GroupPageEdgesEdgeNodeJobLogMsg
// GroupPageEdgesEdgeNodePromiseDetails
// GroupPageEdgesEdgeNodeQueryHistoryDataObject
// GroupPageEdgesEdgeNodeQueryHistoryStatement
// GroupPageEdgesEdgeNodeRole
// GroupPageEdgesEdgeNodeRoleAssignment
// GroupPageEdgesEdgeNodeRoleAssignmentNotification
// GroupPageEdgesEdgeNodeRoleDelegationNotification
// GroupPageEdgesEdgeNodeSearchResultItem
// GroupPageEdgesEdgeNodeStringValue
// GroupPageEdgesEdgeNodeTag
// GroupPageEdgesEdgeNodeTask
// GroupPageEdgesEdgeNodeTaskNotification
// GroupPageEdgesEdgeNodeUser
// GroupPageEdgesEdgeNodeUserAccessReturnItem
// GroupPageEdgesEdgeNodeUserInsightsResult
// GroupPageEdgesEdgeNodeUserSubtask
// GroupPageEdgesEdgeNodeUserTask
type GroupPageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GroupPageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeAccount) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()      {}
func (v *GroupPageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeComment) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()      {}
func (v *GroupPageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeGroup) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeIssue) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()     {}
func (v *GroupPageEdgesEdgeNodeJob) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()       {}
func (v *GroupPageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeRole) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeTag) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()         {}
func (v *GroupPageEdgesEdgeNodeTask) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()        {}
func (v *GroupPageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeUser) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {
}
func (v *GroupPageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem() {}
func (v *GroupPageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceGroupPageEdgesEdgeNodeItem()    {}

func __unmarshalGroupPageEdgesEdgeNodeItem(b []byte, v *GroupPageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GroupPageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(GroupPageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(GroupPageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(GroupPageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(GroupPageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(GroupPageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(GroupPageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(GroupPageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(GroupPageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(GroupPageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(GroupPageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(GroupPageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(GroupPageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(GroupPageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(GroupPageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(GroupPageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(GroupPageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(GroupPageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(GroupPageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(GroupPageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(GroupPageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(GroupPageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(GroupPageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(GroupPageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(GroupPageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(GroupPageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(GroupPageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(GroupPageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(GroupPageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(GroupPageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(GroupPageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(GroupPageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(GroupPageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(GroupPageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(GroupPageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(GroupPageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(GroupPageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(GroupPageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(GroupPageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(GroupPageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(GroupPageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(GroupPageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(GroupPageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(GroupPageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GroupPageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalGroupPageEdgesEdgeNodeItem(v *GroupPageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GroupPageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeGroup:
		typename = "Group"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGroupPageEdgesEdgeNodeGroup
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *GroupPageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*GroupPageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GroupPageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// GroupPageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type GroupPageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type GroupPageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type GroupPageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type GroupPageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type GroupPageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type GroupPageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type GroupPageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type GroupPageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type GroupPageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type GroupPageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type GroupPageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type GroupPageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type GroupPageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type GroupPageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type GroupPageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type GroupPageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type GroupPageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type GroupPageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// GroupPageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type GroupPageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GroupPageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *GroupPageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// GroupPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type GroupPagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns GroupPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GroupPagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns GroupPagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GroupPagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *GroupPagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GroupPagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.GroupPagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGroupPagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *GroupPagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GroupPagePageInfo) __premarshalJSON() (*__premarshalGroupPagePageInfo, error) {
	var retval __premarshalGroupPagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// IdentityStore includes the GraphQL fields of IdentityStore requested by the fragment IdentityStore.
type IdentityStore struct {
	Id          string    `json:"id"`
	Name        string    `json:"name"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	ModifiedAt  time.Time `json:"modifiedAt"`
	Master      bool      `json:"master"`
	Native      bool      `json:"native"`
}

// GetId returns IdentityStore.Id, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetId() string { return v.Id }

// GetName returns IdentityStore.Name, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetName() string { return v.Name }

// GetType returns IdentityStore.Type, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetType() string { return v.Type }

// GetDescription returns IdentityStore.Description, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetDescription() string { return v.Description }

// GetCreatedAt returns IdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns IdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetMaster returns IdentityStore.Master, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetMaster() bool { return v.Master }

// GetNative returns IdentityStore.Native, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetNative() bool { return v.Native }

type IdentityStoreFilterInput struct {
	Search      *string  `json:"search,omitempty"`
	Master      *bool    `json:"master,omitempty"`
	Native      *bool    `json:"native,omitempty"`
	CanBeMaster *bool    `json:"canBeMaster,omitempty"`
	CanBeLinked *bool    `json:"canBeLinked,omitempty"`
	Owners      []string `json:"owners"`
}

// GetSearch returns IdentityStoreFilterInput.Search, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetSearch() *string { return v.Search }

// GetMaster returns IdentityStoreFilterInput.Master, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetMaster() *bool { return v.Master }

// GetNative returns IdentityStoreFilterInput.Native, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetNative() *bool { return v.Native }

// GetCanBeMaster returns IdentityStoreFilterInput.CanBeMaster, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetCanBeMaster() *bool { return v.CanBeMaster }

// GetCanBeLinked returns IdentityStoreFilterInput.CanBeLinked, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetCanBeLinked() *bool { return v.CanBeLinked }

// GetOwners returns IdentityStoreFilterInput.Owners, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetOwners() []string { return v.Owners }

type IdentityStoreInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// GetDescription returns IdentityStoreInput.Description, and is useful for accessing the field via an interface.
func (v *IdentityStoreInput) GetDescription() *string { return v.Description }

// GetName returns IdentityStoreInput.Name, and is useful for accessing the field via an interface.
func (v *IdentityStoreInput) GetName() *string { return v.Name }

type IdentityStoreOrderByInput struct {
	Name        *Sort `json:"name,omitempty"`
	Description *Sort `json:"description,omitempty"`
}

// GetName returns IdentityStoreOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *IdentityStoreOrderByInput) GetName() *Sort { return v.Name }

// GetDescription returns IdentityStoreOrderByInput.Description, and is useful for accessing the field via an interface.
func (v *IdentityStoreOrderByInput) GetDescription() *Sort { return v.Description }

// IdentityStorePage includes the GraphQL fields of PagedResult requested by the fragment IdentityStorePage.
type IdentityStorePage struct {
	PageInfo *IdentityStorePagePageInfo   `json:"pageInfo"`
	Edges    []IdentityStorePageEdgesEdge `json:"edges"`
}

// GetPageInfo returns IdentityStorePage.PageInfo, and is useful for accessing the field via an interface.
func (v *IdentityStorePage) GetPageInfo() *IdentityStorePagePageInfo { return v.PageInfo }

// GetEdges returns IdentityStorePage.Edges, and is useful for accessing the field via an interface.
func (v *IdentityStorePage) GetEdges() []IdentityStorePageEdgesEdge { return v.Edges }

// IdentityStorePageEdgesEdge includes the requested fields of the GraphQL type Edge.
type IdentityStorePageEdgesEdge struct {
	Cursor *string                             `json:"cursor"`
	Node   *IdentityStorePageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns IdentityStorePageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns IdentityStorePageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdge) GetNode() *IdentityStorePageEdgesEdgeNodeItem { return v.Node }

func (v *IdentityStorePageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(IdentityStorePageEdgesEdgeNodeItem)
			err = __unmarshalIdentityStorePageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal IdentityStorePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalIdentityStorePageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *IdentityStorePageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePageEdgesEdge) __premarshalJSON() (*__premarshalIdentityStorePageEdgesEdge, error) {
	var retval __premarshalIdentityStorePageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalIdentityStorePageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal IdentityStorePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// IdentityStorePageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type IdentityStorePageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type IdentityStorePageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type IdentityStorePageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type IdentityStorePageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type IdentityStorePageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type IdentityStorePageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type IdentityStorePageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type IdentityStorePageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type IdentityStorePageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type IdentityStorePageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type IdentityStorePageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type IdentityStorePageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type IdentityStorePageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type IdentityStorePageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type IdentityStorePageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type IdentityStorePageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type IdentityStorePageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type IdentityStorePageEdgesEdgeNodeIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns IdentityStorePageEdgesEdgeNodeIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns IdentityStorePageEdgesEdgeNodeIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns IdentityStorePageEdgesEdgeNodeIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns IdentityStorePageEdgesEdgeNodeIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns IdentityStorePageEdgesEdgeNodeIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns IdentityStorePageEdgesEdgeNodeIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns IdentityStorePageEdgesEdgeNodeIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns IdentityStorePageEdgesEdgeNodeIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePageEdgesEdgeNodeIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePageEdgesEdgeNodeIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIdentityStorePageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) __premarshalJSON() (*__premarshalIdentityStorePageEdgesEdgeNodeIdentityStore, error) {
	var retval __premarshalIdentityStorePageEdgesEdgeNodeIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// IdentityStorePageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type IdentityStorePageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// IdentityStorePageEdgesEdgeNodeItem is implemented by the following types:
// IdentityStorePageEdgesEdgeNodeAccessProvider
// IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail
// IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult
// IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail
// IdentityStorePageEdgesEdgeNodeAccessProviderMatch
// IdentityStorePageEdgesEdgeNodeAccessRequest
// IdentityStorePageEdgesEdgeNodeAccessRequestNotification
// IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem
// IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem
// IdentityStorePageEdgesEdgeNodeAccessWhatItem
// IdentityStorePageEdgesEdgeNodeAccessWhoItem
// IdentityStorePageEdgesEdgeNodeAccount
// IdentityStorePageEdgesEdgeNodeAuditDiffLog
// IdentityStorePageEdgesEdgeNodeComment
// IdentityStorePageEdgesEdgeNodeCommentNotification
// IdentityStorePageEdgesEdgeNodeDataAccessReturnItem
// IdentityStorePageEdgesEdgeNodeDataObject
// IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation
// IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult
// IdentityStorePageEdgesEdgeNodeDataObjectType
// IdentityStorePageEdgesEdgeNodeDataSource
// IdentityStorePageEdgesEdgeNodeDataSourceShare
// IdentityStorePageEdgesEdgeNodeDataUsage
// IdentityStorePageEdgesEdgeNodeDatasourceNotification
// IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification
// IdentityStorePageEdgesEdgeNodeGroup
// IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem
// IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem
// IdentityStorePageEdgesEdgeNodeIdentityStore
// IdentityStorePageEdgesEdgeNodeIssue
// IdentityStorePageEdgesEdgeNodeJob
// IdentityStorePageEdgesEdgeNodeJobLogMsg
// IdentityStorePageEdgesEdgeNodePromiseDetails
// IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject
// IdentityStorePageEdgesEdgeNodeQueryHistoryStatement
// IdentityStorePageEdgesEdgeNodeRole
// IdentityStorePageEdgesEdgeNodeRoleAssignment
// IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification
// IdentityStorePageEdgesEdgeNodeRoleDelegationNotification
// IdentityStorePageEdgesEdgeNodeSearchResultItem
// IdentityStorePageEdgesEdgeNodeStringValue
// IdentityStorePageEdgesEdgeNodeTag
// IdentityStorePageEdgesEdgeNodeTask
// IdentityStorePageEdgesEdgeNodeTaskNotification
// IdentityStorePageEdgesEdgeNodeUser
// IdentityStorePageEdgesEdgeNodeUserAccessReturnItem
// IdentityStorePageEdgesEdgeNodeUserInsightsResult
// IdentityStorePageEdgesEdgeNodeUserSubtask
// IdentityStorePageEdgesEdgeNodeUserTask
type IdentityStorePageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *IdentityStorePageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccount) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeComment) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroup) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeIssue) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeJob) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRole) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTag) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUser) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}

func __unmarshalIdentityStorePageEdgesEdgeNodeItem(b []byte, v *IdentityStorePageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(IdentityStorePageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(IdentityStorePageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(IdentityStorePageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(IdentityStorePageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(IdentityStorePageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(IdentityStorePageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(IdentityStorePageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(IdentityStorePageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(IdentityStorePageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(IdentityStorePageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(IdentityStorePageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(IdentityStorePageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(IdentityStorePageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(IdentityStorePageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(IdentityStorePageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(IdentityStorePageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(IdentityStorePageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(IdentityStorePageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(IdentityStorePageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(IdentityStorePageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(IdentityStorePageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(IdentityStorePageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(IdentityStorePageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for IdentityStorePageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalIdentityStorePageEdgesEdgeNodeItem(v *IdentityStorePageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *IdentityStorePageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIdentityStorePageEdgesEdgeNodeIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for IdentityStorePageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// IdentityStorePageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type IdentityStorePageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type IdentityStorePageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type IdentityStorePageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type IdentityStorePageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type IdentityStorePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type IdentityStorePageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type IdentityStorePageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type IdentityStorePageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type IdentityStorePageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type IdentityStorePageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type IdentityStorePageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type IdentityStorePageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type IdentityStorePageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type IdentityStorePageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type IdentityStorePageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type IdentityStorePageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// IdentityStorePagePageInfo includes the requested fields of the GraphQL type PageInfo.
type IdentityStorePagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns IdentityStorePagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *IdentityStorePagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns IdentityStorePagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *IdentityStorePagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *IdentityStorePagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIdentityStorePagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *IdentityStorePagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePagePageInfo) __premarshalJSON() (*__premarshalIdentityStorePagePageInfo, error) {
	var retval __premarshalIdentityStorePagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// InvalidEmailError includes the GraphQL fields of InvalidEmailError requested by the fragment InvalidEmailError.
type InvalidEmailError struct {
	ErrEmail string `json:"errEmail"`
	Message  string `json:"message"`
}

// GetErrEmail returns InvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *InvalidEmailError) GetErrEmail() string { return v.ErrEmail }

// GetMessage returns InvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *InvalidEmailError) GetMessage() string { return v.Message }

// InvalidInputError includes the GraphQL fields of InvalidInputError requested by the fragment InvalidInputError.
type InvalidInputError struct {
	Message string `json:"message"`
}

// GetMessage returns InvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *InvalidInputError) GetMessage() string { return v.Message }

// InviteAsRaitoUserInviteAsRaitoUser includes the requested fields of the GraphQL type User.
type InviteAsRaitoUserInviteAsRaitoUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns InviteAsRaitoUserInviteAsRaitoUser.Typename, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetTypename() *string { return v.Typename }

// GetId returns InviteAsRaitoUserInviteAsRaitoUser.Id, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetId() string { return v.User.Id }

// GetName returns InviteAsRaitoUserInviteAsRaitoUser.Name, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetName() string { return v.User.Name }

// GetEmail returns InviteAsRaitoUserInviteAsRaitoUser.Email, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns InviteAsRaitoUserInviteAsRaitoUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns InviteAsRaitoUserInviteAsRaitoUser.Type, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUser) GetType() UserType { return v.User.Type }

func (v *InviteAsRaitoUserInviteAsRaitoUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteAsRaitoUserInviteAsRaitoUser
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteAsRaitoUserInviteAsRaitoUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteAsRaitoUserInviteAsRaitoUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *InviteAsRaitoUserInviteAsRaitoUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteAsRaitoUserInviteAsRaitoUser) __premarshalJSON() (*__premarshalInviteAsRaitoUserInviteAsRaitoUser, error) {
	var retval __premarshalInviteAsRaitoUserInviteAsRaitoUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) GetTypename() *string {
	return v.Typename
}

// GetErrEmail returns InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteAsRaitoUserInviteAsRaitoUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) __premarshalJSON() (*__premarshalInviteAsRaitoUserInviteAsRaitoUserInvalidEmailError, error) {
	var retval __premarshalInviteAsRaitoUserInviteAsRaitoUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// InviteAsRaitoUserInviteAsRaitoUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type InviteAsRaitoUserInviteAsRaitoUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns InviteAsRaitoUserInviteAsRaitoUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidInputError) GetTypename() *string {
	return v.Typename
}

// InviteAsRaitoUserInviteAsRaitoUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type InviteAsRaitoUserInviteAsRaitoUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns InviteAsRaitoUserInviteAsRaitoUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns InviteAsRaitoUserInviteAsRaitoUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteAsRaitoUserInviteAsRaitoUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteAsRaitoUserInviteAsRaitoUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteAsRaitoUserInviteAsRaitoUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) __premarshalJSON() (*__premarshalInviteAsRaitoUserInviteAsRaitoUserNotFoundError, error) {
	var retval __premarshalInviteAsRaitoUserInviteAsRaitoUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) __premarshalJSON() (*__premarshalInviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError, error) {
	var retval __premarshalInviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// InviteAsRaitoUserInviteAsRaitoUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// InviteAsRaitoUserInviteAsRaitoUserUserResult is implemented by the following types:
// InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError
// InviteAsRaitoUserInviteAsRaitoUserInvalidInputError
// InviteAsRaitoUserInviteAsRaitoUserNotFoundError
// InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError
// InviteAsRaitoUserInviteAsRaitoUser
type InviteAsRaitoUserInviteAsRaitoUserUserResult interface {
	implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError) implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult() {
}
func (v *InviteAsRaitoUserInviteAsRaitoUserInvalidInputError) implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult() {
}
func (v *InviteAsRaitoUserInviteAsRaitoUserNotFoundError) implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult() {
}
func (v *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError) implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult() {
}
func (v *InviteAsRaitoUserInviteAsRaitoUser) implementsGraphQLInterfaceInviteAsRaitoUserInviteAsRaitoUserUserResult() {
}

func __unmarshalInviteAsRaitoUserInviteAsRaitoUserUserResult(b []byte, v *InviteAsRaitoUserInviteAsRaitoUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(InviteAsRaitoUserInviteAsRaitoUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(InviteAsRaitoUserInviteAsRaitoUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(InviteAsRaitoUserInviteAsRaitoUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for InviteAsRaitoUserInviteAsRaitoUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalInviteAsRaitoUserInviteAsRaitoUserUserResult(v *InviteAsRaitoUserInviteAsRaitoUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *InviteAsRaitoUserInviteAsRaitoUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalInviteAsRaitoUserInviteAsRaitoUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *InviteAsRaitoUserInviteAsRaitoUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*InviteAsRaitoUserInviteAsRaitoUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *InviteAsRaitoUserInviteAsRaitoUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalInviteAsRaitoUserInviteAsRaitoUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *InviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalInviteAsRaitoUserInviteAsRaitoUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *InviteAsRaitoUserInviteAsRaitoUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalInviteAsRaitoUserInviteAsRaitoUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for InviteAsRaitoUserInviteAsRaitoUserUserResult: "%T"`, v)
	}
}

// InviteAsRaitoUserResponse is returned by InviteAsRaitoUser on success.
type InviteAsRaitoUserResponse struct {
	InviteAsRaitoUser InviteAsRaitoUserInviteAsRaitoUserUserResult `json:"-"`
}

// GetInviteAsRaitoUser returns InviteAsRaitoUserResponse.InviteAsRaitoUser, and is useful for accessing the field via an interface.
func (v *InviteAsRaitoUserResponse) GetInviteAsRaitoUser() InviteAsRaitoUserInviteAsRaitoUserUserResult {
	return v.InviteAsRaitoUser
}

func (v *InviteAsRaitoUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteAsRaitoUserResponse
		InviteAsRaitoUser json.RawMessage `json:"inviteAsRaitoUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteAsRaitoUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.InviteAsRaitoUser
		src := firstPass.InviteAsRaitoUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalInviteAsRaitoUserInviteAsRaitoUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal InviteAsRaitoUserResponse.InviteAsRaitoUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalInviteAsRaitoUserResponse struct {
	InviteAsRaitoUser json.RawMessage `json:"inviteAsRaitoUser"`
}

func (v *InviteAsRaitoUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteAsRaitoUserResponse) __premarshalJSON() (*__premarshalInviteAsRaitoUserResponse, error) {
	var retval __premarshalInviteAsRaitoUserResponse

	{

		dst := &retval.InviteAsRaitoUser
		src := v.InviteAsRaitoUser
		var err error
		*dst, err = __marshalInviteAsRaitoUserInviteAsRaitoUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal InviteAsRaitoUserResponse.InviteAsRaitoUser: %w", err)
		}
	}
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type ListAccessProviderAbacWhatScopeAccessProvider struct {
	Typename      *string                                                                `json:"__typename"`
	WhatAbacScope ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults `json:"-"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProvider) GetTypename() *string { return v.Typename }

// GetWhatAbacScope returns ListAccessProviderAbacWhatScopeAccessProvider.WhatAbacScope, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProvider) GetWhatAbacScope() ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults {
	return v.WhatAbacScope
}

func (v *ListAccessProviderAbacWhatScopeAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeAccessProvider
		WhatAbacScope json.RawMessage `json:"whatAbacScope"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhatAbacScope
		src := firstPass.WhatAbacScope
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAccessProviderAbacWhatScopeAccessProvider.WhatAbacScope: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeAccessProvider struct {
	Typename *string `json:"__typename"`

	WhatAbacScope json.RawMessage `json:"whatAbacScope"`
}

func (v *ListAccessProviderAbacWhatScopeAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeAccessProvider) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeAccessProvider, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhatAbacScope
		src := v.WhatAbacScope
		var err error
		*dst, err = __marshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAccessProviderAbacWhatScopeAccessProvider.WhatAbacScope: %w", err)
		}
	}
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult is implemented by the following types:
// ListAccessProviderAbacWhatScopeAccessProvider
// ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError
// ListAccessProviderAbacWhatScopeAccessProviderNotFoundError
// ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError
type ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListAccessProviderAbacWhatScopeAccessProvider) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult() {
}

func __unmarshalListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult(b []byte, v *ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(ListAccessProviderAbacWhatScopeAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult(v *ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAccessProviderAbacWhatScopeAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProviderAbacWhatScopeAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProviderAbacWhatScopeAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListAccessProviderAbacWhatScopeAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListAccessProviderAbacWhatScopeAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListAccessProviderAbacWhatScopeAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderNotFoundError) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeAccessProviderNotFoundError, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError) GetTypename() *string {
	return v.Typename
}

// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult includes the requested fields of the GraphQL type PagedResult.
type ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult struct {
	Typename                        *string `json:"__typename"`
	AccessProviderWhatAbacScopeList `json:"-"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) GetPageInfo() *AccessProviderWhatAbacScopeListPageInfo {
	return v.AccessProviderWhatAbacScopeList.PageInfo
}

// GetEdges returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) GetEdges() []AccessProviderWhatAbacScopeListEdgesEdge {
	return v.AccessProviderWhatAbacScopeList.Edges
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatAbacScopeList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhatAbacScopeListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhatAbacScopeListEdgesEdge `json:"edges"`
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhatAbacScopeList.PageInfo
	retval.Edges = v.AccessProviderWhatAbacScopeList.Edges
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults is implemented by the following types:
// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError
// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError
// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult
// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError
type ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults interface {
	implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults() {
}
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) implementsGraphQLInterfaceListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults() {
}

func __unmarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults(b []byte, v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults(v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopeNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePagedResults: "%T"`, v)
	}
}

// ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeAccessProviderWhatAbacScopePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListAccessProviderAbacWhatScopeResponse is returned by ListAccessProviderAbacWhatScope on success.
type ListAccessProviderAbacWhatScopeResponse struct {
	AccessProvider ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns ListAccessProviderAbacWhatScopeResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *ListAccessProviderAbacWhatScopeResponse) GetAccessProvider() ListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *ListAccessProviderAbacWhatScopeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProviderAbacWhatScopeResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProviderAbacWhatScopeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAccessProviderAbacWhatScopeResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAccessProviderAbacWhatScopeResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *ListAccessProviderAbacWhatScopeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProviderAbacWhatScopeResponse) __premarshalJSON() (*__premarshalListAccessProviderAbacWhatScopeResponse, error) {
	var retval __premarshalListAccessProviderAbacWhatScopeResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalListAccessProviderAbacWhatScopeAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAccessProviderAbacWhatScopeResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// ListAccessProvidersAccessProvidersInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListAccessProvidersAccessProvidersInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListAccessProvidersAccessProvidersInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListAccessProvidersAccessProvidersNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListAccessProvidersAccessProvidersNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListAccessProvidersAccessProvidersNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersNotFoundError) GetTypename() *string { return v.Typename }

// ListAccessProvidersAccessProvidersPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListAccessProvidersAccessProvidersPagedResult struct {
	Typename           *string `json:"__typename"`
	AccessProviderPage `json:"-"`
}

// GetTypename returns ListAccessProvidersAccessProvidersPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListAccessProvidersAccessProvidersPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetPageInfo() *AccessProviderPagePageInfo {
	return v.AccessProviderPage.PageInfo
}

// GetEdges returns ListAccessProvidersAccessProvidersPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetEdges() []AccessProviderPageEdgesEdge {
	return v.AccessProviderPage.Edges
}

func (v *ListAccessProvidersAccessProvidersPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersAccessProvidersPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersAccessProvidersPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProvidersAccessProvidersPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderPagePageInfo `json:"pageInfo"`

	Edges []AccessProviderPageEdgesEdge `json:"edges"`
}

func (v *ListAccessProvidersAccessProvidersPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersAccessProvidersPagedResult) __premarshalJSON() (*__premarshalListAccessProvidersAccessProvidersPagedResult, error) {
	var retval __premarshalListAccessProvidersAccessProvidersPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderPage.PageInfo
	retval.Edges = v.AccessProviderPage.Edges
	return &retval, nil
}

// ListAccessProvidersAccessProvidersPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListAccessProvidersAccessProvidersPagedResults is implemented by the following types:
// ListAccessProvidersAccessProvidersInvalidInputError
// ListAccessProvidersAccessProvidersNotFoundError
// ListAccessProvidersAccessProvidersPagedResult
// ListAccessProvidersAccessProvidersPermissionDeniedError
type ListAccessProvidersAccessProvidersPagedResults interface {
	implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListAccessProvidersAccessProvidersInvalidInputError) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}
func (v *ListAccessProvidersAccessProvidersNotFoundError) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}
func (v *ListAccessProvidersAccessProvidersPagedResult) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}

func __unmarshalListAccessProvidersAccessProvidersPagedResults(b []byte, v *ListAccessProvidersAccessProvidersPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(ListAccessProvidersAccessProvidersInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListAccessProvidersAccessProvidersNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(ListAccessProvidersAccessProvidersPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListAccessProvidersAccessProvidersPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAccessProvidersAccessProvidersPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListAccessProvidersAccessProvidersPagedResults(v *ListAccessProvidersAccessProvidersPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAccessProvidersAccessProvidersInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAccessProvidersAccessProvidersInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListAccessProvidersAccessProvidersNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAccessProvidersAccessProvidersNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *ListAccessProvidersAccessProvidersPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProvidersAccessProvidersPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListAccessProvidersAccessProvidersPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProvidersAccessProvidersPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAccessProvidersAccessProvidersPagedResults: "%T"`, v)
	}
}

// ListAccessProvidersAccessProvidersPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListAccessProvidersAccessProvidersPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListAccessProvidersAccessProvidersPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListAccessProvidersAccessProvidersPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersAccessProvidersPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersAccessProvidersPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProvidersAccessProvidersPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) __premarshalJSON() (*__premarshalListAccessProvidersAccessProvidersPermissionDeniedError, error) {
	var retval __premarshalListAccessProvidersAccessProvidersPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListAccessProvidersResponse is returned by ListAccessProviders on success.
type ListAccessProvidersResponse struct {
	AccessProviders ListAccessProvidersAccessProvidersPagedResults `json:"-"`
}

// GetAccessProviders returns ListAccessProvidersResponse.AccessProviders, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersResponse) GetAccessProviders() ListAccessProvidersAccessProvidersPagedResults {
	return v.AccessProviders
}

func (v *ListAccessProvidersResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersResponse
		AccessProviders json.RawMessage `json:"accessProviders"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProviders
		src := firstPass.AccessProviders
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAccessProvidersAccessProvidersPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAccessProvidersResponse.AccessProviders: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAccessProvidersResponse struct {
	AccessProviders json.RawMessage `json:"accessProviders"`
}

func (v *ListAccessProvidersResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersResponse) __premarshalJSON() (*__premarshalListAccessProvidersResponse, error) {
	var retval __premarshalListAccessProvidersResponse

	{

		dst := &retval.AccessProviders
		src := v.AccessProviders
		var err error
		*dst, err = __marshalListAccessProvidersAccessProvidersPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAccessProvidersResponse.AccessProviders: %w", err)
		}
	}
	return &retval, nil
}

// ListDataObjectsDataObjectsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListDataObjectsDataObjectsPagedResult struct {
	DataObjectPage `json:"-"`
}

// GetPageInfo returns ListDataObjectsDataObjectsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListDataObjectsDataObjectsPagedResult) GetPageInfo() *DataObjectPagePageInfo {
	return v.DataObjectPage.PageInfo
}

// GetEdges returns ListDataObjectsDataObjectsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListDataObjectsDataObjectsPagedResult) GetEdges() []DataObjectPageEdgesEdge {
	return v.DataObjectPage.Edges
}

func (v *ListDataObjectsDataObjectsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataObjectsDataObjectsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataObjectsDataObjectsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObjectPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListDataObjectsDataObjectsPagedResult struct {
	PageInfo *DataObjectPagePageInfo `json:"pageInfo"`

	Edges []DataObjectPageEdgesEdge `json:"edges"`
}

func (v *ListDataObjectsDataObjectsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataObjectsDataObjectsPagedResult) __premarshalJSON() (*__premarshalListDataObjectsDataObjectsPagedResult, error) {
	var retval __premarshalListDataObjectsDataObjectsPagedResult

	retval.PageInfo = v.DataObjectPage.PageInfo
	retval.Edges = v.DataObjectPage.Edges
	return &retval, nil
}

// ListDataObjectsResponse is returned by ListDataObjects on success.
type ListDataObjectsResponse struct {
	DataObjects ListDataObjectsDataObjectsPagedResult `json:"dataObjects"`
}

// GetDataObjects returns ListDataObjectsResponse.DataObjects, and is useful for accessing the field via an interface.
func (v *ListDataObjectsResponse) GetDataObjects() ListDataObjectsDataObjectsPagedResult {
	return v.DataObjects
}

// ListDataSourcesDataSourcesInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListDataSourcesDataSourcesInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListDataSourcesDataSourcesInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesInvalidInputError) GetTypename() *string { return v.Typename }

// ListDataSourcesDataSourcesNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListDataSourcesDataSourcesNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListDataSourcesDataSourcesNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesNotFoundError) GetTypename() *string { return v.Typename }

// ListDataSourcesDataSourcesPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListDataSourcesDataSourcesPagedResult struct {
	Typename       *string `json:"__typename"`
	DataSourcePage `json:"-"`
}

// GetTypename returns ListDataSourcesDataSourcesPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListDataSourcesDataSourcesPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetPageInfo() *DataSourcePagePageInfo {
	return v.DataSourcePage.PageInfo
}

// GetEdges returns ListDataSourcesDataSourcesPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetEdges() []DataSourcePageEdgesEdge {
	return v.DataSourcePage.Edges
}

func (v *ListDataSourcesDataSourcesPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesDataSourcesPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesDataSourcesPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourcePage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListDataSourcesDataSourcesPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *DataSourcePagePageInfo `json:"pageInfo"`

	Edges []DataSourcePageEdgesEdge `json:"edges"`
}

func (v *ListDataSourcesDataSourcesPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesDataSourcesPagedResult) __premarshalJSON() (*__premarshalListDataSourcesDataSourcesPagedResult, error) {
	var retval __premarshalListDataSourcesDataSourcesPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.DataSourcePage.PageInfo
	retval.Edges = v.DataSourcePage.Edges
	return &retval, nil
}

// ListDataSourcesDataSourcesPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListDataSourcesDataSourcesPagedResults is implemented by the following types:
// ListDataSourcesDataSourcesInvalidInputError
// ListDataSourcesDataSourcesNotFoundError
// ListDataSourcesDataSourcesPagedResult
// ListDataSourcesDataSourcesPermissionDeniedError
type ListDataSourcesDataSourcesPagedResults interface {
	implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListDataSourcesDataSourcesInvalidInputError) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}
func (v *ListDataSourcesDataSourcesNotFoundError) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}
func (v *ListDataSourcesDataSourcesPagedResult) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}
func (v *ListDataSourcesDataSourcesPermissionDeniedError) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}

func __unmarshalListDataSourcesDataSourcesPagedResults(b []byte, v *ListDataSourcesDataSourcesPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(ListDataSourcesDataSourcesInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListDataSourcesDataSourcesNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(ListDataSourcesDataSourcesPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListDataSourcesDataSourcesPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListDataSourcesDataSourcesPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListDataSourcesDataSourcesPagedResults(v *ListDataSourcesDataSourcesPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListDataSourcesDataSourcesInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListDataSourcesDataSourcesInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListDataSourcesDataSourcesNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListDataSourcesDataSourcesNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *ListDataSourcesDataSourcesPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListDataSourcesDataSourcesPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListDataSourcesDataSourcesPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListDataSourcesDataSourcesPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListDataSourcesDataSourcesPagedResults: "%T"`, v)
	}
}

// ListDataSourcesDataSourcesPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListDataSourcesDataSourcesPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListDataSourcesDataSourcesPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns ListDataSourcesDataSourcesPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesDataSourcesPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesDataSourcesPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListDataSourcesDataSourcesPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) __premarshalJSON() (*__premarshalListDataSourcesDataSourcesPermissionDeniedError, error) {
	var retval __premarshalListDataSourcesDataSourcesPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListDataSourcesResponse is returned by ListDataSources on success.
type ListDataSourcesResponse struct {
	DataSources ListDataSourcesDataSourcesPagedResults `json:"-"`
}

// GetDataSources returns ListDataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *ListDataSourcesResponse) GetDataSources() ListDataSourcesDataSourcesPagedResults {
	return v.DataSources
}

func (v *ListDataSourcesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesResponse
		DataSources json.RawMessage `json:"dataSources"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSources
		src := firstPass.DataSources
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListDataSourcesDataSourcesPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListDataSourcesResponse.DataSources: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListDataSourcesResponse struct {
	DataSources json.RawMessage `json:"dataSources"`
}

func (v *ListDataSourcesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesResponse) __premarshalJSON() (*__premarshalListDataSourcesResponse, error) {
	var retval __premarshalListDataSourcesResponse

	{

		dst := &retval.DataSources
		src := v.DataSources
		var err error
		*dst, err = __marshalListDataSourcesDataSourcesPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListDataSourcesResponse.DataSources: %w", err)
		}
	}
	return &retval, nil
}

// ListGrantCategoriesGrantCategoriesGrantCategory includes the requested fields of the GraphQL type GrantCategory.
type ListGrantCategoriesGrantCategoriesGrantCategory struct {
	GrantCategoryDetails `json:"-"`
}

// GetId returns ListGrantCategoriesGrantCategoriesGrantCategory.Id, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetId() string {
	return v.GrantCategoryDetails.Id
}

// GetCreatedAt returns ListGrantCategoriesGrantCategoriesGrantCategory.CreatedAt, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetCreatedAt() time.Time {
	return v.GrantCategoryDetails.CreatedAt
}

// GetModifiedAt returns ListGrantCategoriesGrantCategoriesGrantCategory.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetModifiedAt() time.Time {
	return v.GrantCategoryDetails.ModifiedAt
}

// GetIsSystem returns ListGrantCategoriesGrantCategoriesGrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetIsSystem() bool {
	return v.GrantCategoryDetails.IsSystem
}

// GetName returns ListGrantCategoriesGrantCategoriesGrantCategory.Name, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetName() string {
	return v.GrantCategoryDetails.Name
}

// GetDescription returns ListGrantCategoriesGrantCategoriesGrantCategory.Description, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetDescription() string {
	return v.GrantCategoryDetails.Description
}

// GetIcon returns ListGrantCategoriesGrantCategoriesGrantCategory.Icon, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetIcon() string {
	return v.GrantCategoryDetails.Icon
}

// GetIsDefault returns ListGrantCategoriesGrantCategoriesGrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetIsDefault() bool {
	return v.GrantCategoryDetails.IsDefault
}

// GetCanCreate returns ListGrantCategoriesGrantCategoriesGrantCategory.CanCreate, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetCanCreate() bool {
	return v.GrantCategoryDetails.CanCreate
}

// GetAllowDuplicateNames returns ListGrantCategoriesGrantCategoriesGrantCategory.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetAllowDuplicateNames() bool {
	return v.GrantCategoryDetails.AllowDuplicateNames
}

// GetMultiDataSource returns ListGrantCategoriesGrantCategoriesGrantCategory.MultiDataSource, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetMultiDataSource() bool {
	return v.GrantCategoryDetails.MultiDataSource
}

// GetDefaultTypePerDataSource returns ListGrantCategoriesGrantCategoriesGrantCategory.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetDefaultTypePerDataSource() []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource {
	return v.GrantCategoryDetails.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns ListGrantCategoriesGrantCategoriesGrantCategory.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetAllowedWhoItems() GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems {
	return v.GrantCategoryDetails.AllowedWhoItems
}

// GetAllowedWhatItems returns ListGrantCategoriesGrantCategoriesGrantCategory.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesGrantCategoriesGrantCategory) GetAllowedWhatItems() GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems {
	return v.GrantCategoryDetails.AllowedWhatItems
}

func (v *ListGrantCategoriesGrantCategoriesGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListGrantCategoriesGrantCategoriesGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.ListGrantCategoriesGrantCategoriesGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListGrantCategoriesGrantCategoriesGrantCategory struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	IsSystem bool `json:"isSystem"`

	Name string `json:"name"`

	Description string `json:"description"`

	Icon string `json:"icon"`

	IsDefault bool `json:"isDefault"`

	CanCreate bool `json:"canCreate"`

	AllowDuplicateNames bool `json:"allowDuplicateNames"`

	MultiDataSource bool `json:"multiDataSource"`

	DefaultTypePerDataSource []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource `json:"defaultTypePerDataSource"`

	AllowedWhoItems GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems `json:"allowedWhoItems"`

	AllowedWhatItems GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems `json:"allowedWhatItems"`
}

func (v *ListGrantCategoriesGrantCategoriesGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListGrantCategoriesGrantCategoriesGrantCategory) __premarshalJSON() (*__premarshalListGrantCategoriesGrantCategoriesGrantCategory, error) {
	var retval __premarshalListGrantCategoriesGrantCategoriesGrantCategory

	retval.Id = v.GrantCategoryDetails.Id
	retval.CreatedAt = v.GrantCategoryDetails.CreatedAt
	retval.ModifiedAt = v.GrantCategoryDetails.ModifiedAt
	retval.IsSystem = v.GrantCategoryDetails.IsSystem
	retval.Name = v.GrantCategoryDetails.Name
	retval.Description = v.GrantCategoryDetails.Description
	retval.Icon = v.GrantCategoryDetails.Icon
	retval.IsDefault = v.GrantCategoryDetails.IsDefault
	retval.CanCreate = v.GrantCategoryDetails.CanCreate
	retval.AllowDuplicateNames = v.GrantCategoryDetails.AllowDuplicateNames
	retval.MultiDataSource = v.GrantCategoryDetails.MultiDataSource
	retval.DefaultTypePerDataSource = v.GrantCategoryDetails.DefaultTypePerDataSource
	retval.AllowedWhoItems = v.GrantCategoryDetails.AllowedWhoItems
	retval.AllowedWhatItems = v.GrantCategoryDetails.AllowedWhatItems
	return &retval, nil
}

// ListGrantCategoriesResponse is returned by ListGrantCategories on success.
type ListGrantCategoriesResponse struct {
	GrantCategories []ListGrantCategoriesGrantCategoriesGrantCategory `json:"grantCategories"`
}

// GetGrantCategories returns ListGrantCategoriesResponse.GrantCategories, and is useful for accessing the field via an interface.
func (v *ListGrantCategoriesResponse) GetGrantCategories() []ListGrantCategoriesGrantCategoriesGrantCategory {
	return v.GrantCategories
}

// ListGroupsGroupsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListGroupsGroupsPagedResult struct {
	GroupPage `json:"-"`
}

// GetPageInfo returns ListGroupsGroupsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListGroupsGroupsPagedResult) GetPageInfo() *GroupPagePageInfo { return v.GroupPage.PageInfo }

// GetEdges returns ListGroupsGroupsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListGroupsGroupsPagedResult) GetEdges() []GroupPageEdgesEdge { return v.GroupPage.Edges }

func (v *ListGroupsGroupsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListGroupsGroupsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListGroupsGroupsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GroupPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListGroupsGroupsPagedResult struct {
	PageInfo *GroupPagePageInfo `json:"pageInfo"`

	Edges []GroupPageEdgesEdge `json:"edges"`
}

func (v *ListGroupsGroupsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListGroupsGroupsPagedResult) __premarshalJSON() (*__premarshalListGroupsGroupsPagedResult, error) {
	var retval __premarshalListGroupsGroupsPagedResult

	retval.PageInfo = v.GroupPage.PageInfo
	retval.Edges = v.GroupPage.Edges
	return &retval, nil
}

// ListGroupsResponse is returned by ListGroups on success.
type ListGroupsResponse struct {
	Groups ListGroupsGroupsPagedResult `json:"groups"`
}

// GetGroups returns ListGroupsResponse.Groups, and is useful for accessing the field via an interface.
func (v *ListGroupsResponse) GetGroups() ListGroupsGroupsPagedResult { return v.Groups }

// ListIdentityStoresIdentityStoresInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListIdentityStoresIdentityStoresInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListIdentityStoresIdentityStoresInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresInvalidInputError) GetTypename() *string { return v.Typename }

// ListIdentityStoresIdentityStoresNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListIdentityStoresIdentityStoresNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListIdentityStoresIdentityStoresNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresNotFoundError) GetTypename() *string { return v.Typename }

// ListIdentityStoresIdentityStoresPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListIdentityStoresIdentityStoresPagedResult struct {
	Typename          *string `json:"__typename"`
	IdentityStorePage `json:"-"`
}

// GetTypename returns ListIdentityStoresIdentityStoresPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListIdentityStoresIdentityStoresPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetPageInfo() *IdentityStorePagePageInfo {
	return v.IdentityStorePage.PageInfo
}

// GetEdges returns ListIdentityStoresIdentityStoresPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetEdges() []IdentityStorePageEdgesEdge {
	return v.IdentityStorePage.Edges
}

func (v *ListIdentityStoresIdentityStoresPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresIdentityStoresPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresIdentityStoresPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStorePage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListIdentityStoresIdentityStoresPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *IdentityStorePagePageInfo `json:"pageInfo"`

	Edges []IdentityStorePageEdgesEdge `json:"edges"`
}

func (v *ListIdentityStoresIdentityStoresPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresIdentityStoresPagedResult) __premarshalJSON() (*__premarshalListIdentityStoresIdentityStoresPagedResult, error) {
	var retval __premarshalListIdentityStoresIdentityStoresPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.IdentityStorePage.PageInfo
	retval.Edges = v.IdentityStorePage.Edges
	return &retval, nil
}

// ListIdentityStoresIdentityStoresPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListIdentityStoresIdentityStoresPagedResults is implemented by the following types:
// ListIdentityStoresIdentityStoresInvalidInputError
// ListIdentityStoresIdentityStoresNotFoundError
// ListIdentityStoresIdentityStoresPagedResult
// ListIdentityStoresIdentityStoresPermissionDeniedError
type ListIdentityStoresIdentityStoresPagedResults interface {
	implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListIdentityStoresIdentityStoresInvalidInputError) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}
func (v *ListIdentityStoresIdentityStoresNotFoundError) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}
func (v *ListIdentityStoresIdentityStoresPagedResult) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}

func __unmarshalListIdentityStoresIdentityStoresPagedResults(b []byte, v *ListIdentityStoresIdentityStoresPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(ListIdentityStoresIdentityStoresInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListIdentityStoresIdentityStoresNotFoundError)
		return json.Unmarshal(b, *v)
	case "PagedResult":
		*v = new(ListIdentityStoresIdentityStoresPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListIdentityStoresIdentityStoresPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListIdentityStoresIdentityStoresPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListIdentityStoresIdentityStoresPagedResults(v *ListIdentityStoresIdentityStoresPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListIdentityStoresIdentityStoresInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListIdentityStoresIdentityStoresInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListIdentityStoresIdentityStoresNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListIdentityStoresIdentityStoresNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *ListIdentityStoresIdentityStoresPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListIdentityStoresIdentityStoresPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListIdentityStoresIdentityStoresPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListIdentityStoresIdentityStoresPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListIdentityStoresIdentityStoresPagedResults: "%T"`, v)
	}
}

// ListIdentityStoresIdentityStoresPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListIdentityStoresIdentityStoresPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListIdentityStoresIdentityStoresPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListIdentityStoresIdentityStoresPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresIdentityStoresPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresIdentityStoresPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListIdentityStoresIdentityStoresPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) __premarshalJSON() (*__premarshalListIdentityStoresIdentityStoresPermissionDeniedError, error) {
	var retval __premarshalListIdentityStoresIdentityStoresPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListIdentityStoresResponse is returned by ListIdentityStores on success.
type ListIdentityStoresResponse struct {
	IdentityStores ListIdentityStoresIdentityStoresPagedResults `json:"-"`
}

// GetIdentityStores returns ListIdentityStoresResponse.IdentityStores, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresResponse) GetIdentityStores() ListIdentityStoresIdentityStoresPagedResults {
	return v.IdentityStores
}

func (v *ListIdentityStoresResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresResponse
		IdentityStores json.RawMessage `json:"identityStores"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.IdentityStores
		src := firstPass.IdentityStores
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListIdentityStoresIdentityStoresPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListIdentityStoresResponse.IdentityStores: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListIdentityStoresResponse struct {
	IdentityStores json.RawMessage `json:"identityStores"`
}

func (v *ListIdentityStoresResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresResponse) __premarshalJSON() (*__premarshalListIdentityStoresResponse, error) {
	var retval __premarshalListIdentityStoresResponse

	{

		dst := &retval.IdentityStores
		src := v.IdentityStores
		var err error
		*dst, err = __marshalListIdentityStoresIdentityStoresPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListIdentityStoresResponse.IdentityStores: %w", err)
		}
	}
	return &retval, nil
}

// ListRoleAssignmentsOnAccessProviderAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type ListRoleAssignmentsOnAccessProviderAccessProvider struct {
	Typename        *string                                                                     `json:"__typename"`
	RoleAssignments ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetTypename returns ListRoleAssignmentsOnAccessProviderAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProvider) GetTypename() *string { return v.Typename }

// GetRoleAssignments returns ListRoleAssignmentsOnAccessProviderAccessProvider.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProvider) GetRoleAssignments() ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult is implemented by the following types:
// ListRoleAssignmentsOnAccessProviderAccessProvider
// ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError
// ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError
// ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError
type ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProvider) implementsGraphQLInterfaceListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult() {
}
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError) implementsGraphQLInterfaceListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult() {
}
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) implementsGraphQLInterfaceListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult() {
}
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) implementsGraphQLInterfaceListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult() {
}

func __unmarshalListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult(b []byte, v *ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(ListRoleAssignmentsOnAccessProviderAccessProvider)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult(v *ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListRoleAssignmentsOnAccessProviderAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnAccessProviderAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError, error) {
	var retval __premarshalListRoleAssignmentsOnAccessProviderAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError, error) {
	var retval __premarshalListRoleAssignmentsOnAccessProviderAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsOnAccessProviderAccessProviderRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRoleAssignmentsOnAccessProviderResponse is returned by ListRoleAssignmentsOnAccessProvider on success.
type ListRoleAssignmentsOnAccessProviderResponse struct {
	AccessProvider ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns ListRoleAssignmentsOnAccessProviderResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnAccessProviderResponse) GetAccessProvider() ListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *ListRoleAssignmentsOnAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnAccessProviderResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListRoleAssignmentsOnAccessProviderResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListRoleAssignmentsOnAccessProviderResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *ListRoleAssignmentsOnAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnAccessProviderResponse) __premarshalJSON() (*__premarshalListRoleAssignmentsOnAccessProviderResponse, error) {
	var retval __premarshalListRoleAssignmentsOnAccessProviderResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalListRoleAssignmentsOnAccessProviderAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListRoleAssignmentsOnAccessProviderResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// ListRoleAssignmentsOnDataObjectDataObject includes the requested fields of the GraphQL type DataObject.
type ListRoleAssignmentsOnDataObjectDataObject struct {
	RoleAssignments ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetRoleAssignments returns ListRoleAssignmentsOnDataObjectDataObject.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataObjectDataObject) GetRoleAssignments() ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsOnDataObjectDataObjectRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRoleAssignmentsOnDataObjectResponse is returned by ListRoleAssignmentsOnDataObject on success.
type ListRoleAssignmentsOnDataObjectResponse struct {
	DataObject ListRoleAssignmentsOnDataObjectDataObject `json:"dataObject"`
}

// GetDataObject returns ListRoleAssignmentsOnDataObjectResponse.DataObject, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataObjectResponse) GetDataObject() ListRoleAssignmentsOnDataObjectDataObject {
	return v.DataObject
}

// ListRoleAssignmentsOnDataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type ListRoleAssignmentsOnDataSourceDataSource struct {
	Typename        *string                                                             `json:"__typename"`
	RoleAssignments ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetTypename returns ListRoleAssignmentsOnDataSourceDataSource.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSource) GetTypename() *string { return v.Typename }

// GetRoleAssignments returns ListRoleAssignmentsOnDataSourceDataSource.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSource) GetRoleAssignments() ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult is implemented by the following types:
// ListRoleAssignmentsOnDataSourceDataSource
// ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError
// ListRoleAssignmentsOnDataSourceDataSourceNotFoundError
// ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError
type ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceListRoleAssignmentsOnDataSourceDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListRoleAssignmentsOnDataSourceDataSource) implementsGraphQLInterfaceListRoleAssignmentsOnDataSourceDataSourceDataSourceResult() {
}
func (v *ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError) implementsGraphQLInterfaceListRoleAssignmentsOnDataSourceDataSourceDataSourceResult() {
}
func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) implementsGraphQLInterfaceListRoleAssignmentsOnDataSourceDataSourceDataSourceResult() {
}
func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) implementsGraphQLInterfaceListRoleAssignmentsOnDataSourceDataSourceDataSourceResult() {
}

func __unmarshalListRoleAssignmentsOnDataSourceDataSourceDataSourceResult(b []byte, v *ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(ListRoleAssignmentsOnDataSourceDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListRoleAssignmentsOnDataSourceDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalListRoleAssignmentsOnDataSourceDataSourceDataSourceResult(v *ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListRoleAssignmentsOnDataSourceDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnDataSourceDataSource
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnDataSourceDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult: "%T"`, v)
	}
}

// ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListRoleAssignmentsOnDataSourceDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListRoleAssignmentsOnDataSourceDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnDataSourceDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnDataSourceDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnDataSourceDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnDataSourceDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnDataSourceDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceNotFoundError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnDataSourceDataSourceNotFoundError, error) {
	var retval __premarshalListRoleAssignmentsOnDataSourceDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError, error) {
	var retval __premarshalListRoleAssignmentsOnDataSourceDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsOnDataSourceDataSourceRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRoleAssignmentsOnDataSourceResponse is returned by ListRoleAssignmentsOnDataSource on success.
type ListRoleAssignmentsOnDataSourceResponse struct {
	DataSource ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns ListRoleAssignmentsOnDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnDataSourceResponse) GetDataSource() ListRoleAssignmentsOnDataSourceDataSourceDataSourceResult {
	return v.DataSource
}

func (v *ListRoleAssignmentsOnDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnDataSourceResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListRoleAssignmentsOnDataSourceDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListRoleAssignmentsOnDataSourceResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListRoleAssignmentsOnDataSourceResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *ListRoleAssignmentsOnDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnDataSourceResponse) __premarshalJSON() (*__premarshalListRoleAssignmentsOnDataSourceResponse, error) {
	var retval __premarshalListRoleAssignmentsOnDataSourceResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalListRoleAssignmentsOnDataSourceDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListRoleAssignmentsOnDataSourceResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

// ListRoleAssignmentsOnIdentityStoreIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type ListRoleAssignmentsOnIdentityStoreIdentityStore struct {
	Typename        *string                                                                   `json:"__typename"`
	RoleAssignments ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetTypename returns ListRoleAssignmentsOnIdentityStoreIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStore) GetTypename() *string { return v.Typename }

// GetRoleAssignments returns ListRoleAssignmentsOnIdentityStoreIdentityStore.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStore) GetRoleAssignments() ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult is implemented by the following types:
// ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError
// ListRoleAssignmentsOnIdentityStoreIdentityStore
// ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError
// ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError
// ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError
type ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStore) implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError) implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) implementsGraphQLInterfaceListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult() {
}

func __unmarshalListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult(b []byte, v *ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(ListRoleAssignmentsOnIdentityStoreIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult(v *ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnIdentityStoreIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnIdentityStoreIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError, error) {
	var retval __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError, error) {
	var retval __premarshalListRoleAssignmentsOnIdentityStoreIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsOnIdentityStoreIdentityStoreRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRoleAssignmentsOnIdentityStoreResponse is returned by ListRoleAssignmentsOnIdentityStore on success.
type ListRoleAssignmentsOnIdentityStoreResponse struct {
	IdentityStore ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult `json:"-"`
}

// GetIdentityStore returns ListRoleAssignmentsOnIdentityStoreResponse.IdentityStore, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnIdentityStoreResponse) GetIdentityStore() ListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult {
	return v.IdentityStore
}

func (v *ListRoleAssignmentsOnIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnIdentityStoreResponse
		IdentityStore json.RawMessage `json:"identityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.IdentityStore
		src := firstPass.IdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListRoleAssignmentsOnIdentityStoreResponse.IdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListRoleAssignmentsOnIdentityStoreResponse struct {
	IdentityStore json.RawMessage `json:"identityStore"`
}

func (v *ListRoleAssignmentsOnIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnIdentityStoreResponse) __premarshalJSON() (*__premarshalListRoleAssignmentsOnIdentityStoreResponse, error) {
	var retval __premarshalListRoleAssignmentsOnIdentityStoreResponse

	{

		dst := &retval.IdentityStore
		src := v.IdentityStore
		var err error
		*dst, err = __marshalListRoleAssignmentsOnIdentityStoreIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListRoleAssignmentsOnIdentityStoreResponse.IdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// ListRoleAssignmentsOnUserResponse is returned by ListRoleAssignmentsOnUser on success.
type ListRoleAssignmentsOnUserResponse struct {
	User ListRoleAssignmentsOnUserUserUserResult `json:"-"`
}

// GetUser returns ListRoleAssignmentsOnUserResponse.User, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserResponse) GetUser() ListRoleAssignmentsOnUserUserUserResult {
	return v.User
}

func (v *ListRoleAssignmentsOnUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserResponse
		User json.RawMessage `json:"user"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.User
		src := firstPass.User
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListRoleAssignmentsOnUserUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListRoleAssignmentsOnUserResponse.User: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserResponse struct {
	User json.RawMessage `json:"user"`
}

func (v *ListRoleAssignmentsOnUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserResponse) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserResponse, error) {
	var retval __premarshalListRoleAssignmentsOnUserResponse

	{

		dst := &retval.User
		src := v.User
		var err error
		*dst, err = __marshalListRoleAssignmentsOnUserUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListRoleAssignmentsOnUserResponse.User: %w", err)
		}
	}
	return &retval, nil
}

// ListRoleAssignmentsOnUserUser includes the requested fields of the GraphQL type User.
type ListRoleAssignmentsOnUserUser struct {
	Typename        *string                                                 `json:"__typename"`
	RoleAssignments ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetTypename returns ListRoleAssignmentsOnUserUser.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUser) GetTypename() *string { return v.Typename }

// GetRoleAssignments returns ListRoleAssignmentsOnUserUser.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUser) GetRoleAssignments() ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsOnUserUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type ListRoleAssignmentsOnUserUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnUserUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns ListRoleAssignmentsOnUserUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns ListRoleAssignmentsOnUserUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserUserInvalidEmailError, error) {
	var retval __premarshalListRoleAssignmentsOnUserUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnUserUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type ListRoleAssignmentsOnUserUserInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnUserUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserInvalidInputError) GetTypename() *string { return v.Typename }

// GetMessage returns ListRoleAssignmentsOnUserUserInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *ListRoleAssignmentsOnUserUserInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserUserInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserUserInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserUserInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnUserUserInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserUserInvalidInputError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserUserInvalidInputError, error) {
	var retval __premarshalListRoleAssignmentsOnUserUserInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnUserUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type ListRoleAssignmentsOnUserUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnUserUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns ListRoleAssignmentsOnUserUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *ListRoleAssignmentsOnUserUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnUserUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserUserNotFoundError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserUserNotFoundError, error) {
	var retval __premarshalListRoleAssignmentsOnUserUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnUserUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListRoleAssignmentsOnUserUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListRoleAssignmentsOnUserUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns ListRoleAssignmentsOnUserUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserUserPermissionDeniedError, error) {
	var retval __premarshalListRoleAssignmentsOnUserUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsOnUserUserRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRoleAssignmentsOnUserUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// ListRoleAssignmentsOnUserUserUserResult is implemented by the following types:
// ListRoleAssignmentsOnUserUserInvalidEmailError
// ListRoleAssignmentsOnUserUserInvalidInputError
// ListRoleAssignmentsOnUserUserNotFoundError
// ListRoleAssignmentsOnUserUserPermissionDeniedError
// ListRoleAssignmentsOnUserUser
type ListRoleAssignmentsOnUserUserUserResult interface {
	implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListRoleAssignmentsOnUserUserInvalidEmailError) implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult() {
}
func (v *ListRoleAssignmentsOnUserUserInvalidInputError) implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult() {
}
func (v *ListRoleAssignmentsOnUserUserNotFoundError) implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult() {
}
func (v *ListRoleAssignmentsOnUserUserPermissionDeniedError) implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult() {
}
func (v *ListRoleAssignmentsOnUserUser) implementsGraphQLInterfaceListRoleAssignmentsOnUserUserUserResult() {
}

func __unmarshalListRoleAssignmentsOnUserUserUserResult(b []byte, v *ListRoleAssignmentsOnUserUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(ListRoleAssignmentsOnUserUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(ListRoleAssignmentsOnUserUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(ListRoleAssignmentsOnUserUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListRoleAssignmentsOnUserUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(ListRoleAssignmentsOnUserUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnUserUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalListRoleAssignmentsOnUserUserUserResult(v *ListRoleAssignmentsOnUserUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListRoleAssignmentsOnUserUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnUserUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnUserUserInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnUserUserInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnUserUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnUserUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnUserUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListRoleAssignmentsOnUserUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListRoleAssignmentsOnUserUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*ListRoleAssignmentsOnUserUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListRoleAssignmentsOnUserUserUserResult: "%T"`, v)
	}
}

// ListRoleAssignmentsResponse is returned by ListRoleAssignments on success.
type ListRoleAssignmentsResponse struct {
	RoleAssignments ListRoleAssignmentsRoleAssignmentsPagedResult `json:"roleAssignments"`
}

// GetRoleAssignments returns ListRoleAssignmentsResponse.RoleAssignments, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsResponse) GetRoleAssignments() ListRoleAssignmentsRoleAssignmentsPagedResult {
	return v.RoleAssignments
}

// ListRoleAssignmentsRoleAssignmentsPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRoleAssignmentsRoleAssignmentsPagedResult struct {
	RoleAssignmentPage `json:"-"`
}

// GetPageInfo returns ListRoleAssignmentsRoleAssignmentsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsRoleAssignmentsPagedResult) GetPageInfo() *RoleAssignmentPagePageInfo {
	return v.RoleAssignmentPage.PageInfo
}

// GetEdges returns ListRoleAssignmentsRoleAssignmentsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRoleAssignmentsRoleAssignmentsPagedResult) GetEdges() []RoleAssignmentPageEdgesEdge {
	return v.RoleAssignmentPage.Edges
}

func (v *ListRoleAssignmentsRoleAssignmentsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRoleAssignmentsRoleAssignmentsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRoleAssignmentsRoleAssignmentsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignmentPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRoleAssignmentsRoleAssignmentsPagedResult struct {
	PageInfo *RoleAssignmentPagePageInfo `json:"pageInfo"`

	Edges []RoleAssignmentPageEdgesEdge `json:"edges"`
}

func (v *ListRoleAssignmentsRoleAssignmentsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRoleAssignmentsRoleAssignmentsPagedResult) __premarshalJSON() (*__premarshalListRoleAssignmentsRoleAssignmentsPagedResult, error) {
	var retval __premarshalListRoleAssignmentsRoleAssignmentsPagedResult

	retval.PageInfo = v.RoleAssignmentPage.PageInfo
	retval.Edges = v.RoleAssignmentPage.Edges
	return &retval, nil
}

// ListRolesResponse is returned by ListRoles on success.
type ListRolesResponse struct {
	Roles ListRolesRolesPagedResult `json:"roles"`
}

// GetRoles returns ListRolesResponse.Roles, and is useful for accessing the field via an interface.
func (v *ListRolesResponse) GetRoles() ListRolesRolesPagedResult { return v.Roles }

// ListRolesRolesPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListRolesRolesPagedResult struct {
	RolePage `json:"-"`
}

// GetPageInfo returns ListRolesRolesPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListRolesRolesPagedResult) GetPageInfo() *RolePagePageInfo { return v.RolePage.PageInfo }

// GetEdges returns ListRolesRolesPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListRolesRolesPagedResult) GetEdges() []RolePageEdgesEdge { return v.RolePage.Edges }

func (v *ListRolesRolesPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRolesRolesPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRolesRolesPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RolePage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRolesRolesPagedResult struct {
	PageInfo *RolePagePageInfo `json:"pageInfo"`

	Edges []RolePageEdgesEdge `json:"edges"`
}

func (v *ListRolesRolesPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRolesRolesPagedResult) __premarshalJSON() (*__premarshalListRolesRolesPagedResult, error) {
	var retval __premarshalListRolesRolesPagedResult

	retval.PageInfo = v.RolePage.PageInfo
	retval.Edges = v.RolePage.Edges
	return &retval, nil
}

// MaskType includes the GraphQL fields of MaskType requested by the fragment MaskType.
type MaskType struct {
	ExternalId  string   `json:"externalId"`
	DisplayName string   `json:"displayName"`
	Description string   `json:"description"`
	DataTypes   []string `json:"dataTypes"`
}

// GetExternalId returns MaskType.ExternalId, and is useful for accessing the field via an interface.
func (v *MaskType) GetExternalId() string { return v.ExternalId }

// GetDisplayName returns MaskType.DisplayName, and is useful for accessing the field via an interface.
func (v *MaskType) GetDisplayName() string { return v.DisplayName }

// GetDescription returns MaskType.Description, and is useful for accessing the field via an interface.
func (v *MaskType) GetDescription() string { return v.Description }

// GetDataTypes returns MaskType.DataTypes, and is useful for accessing the field via an interface.
func (v *MaskType) GetDataTypes() []string { return v.DataTypes }

// MaskingMetadata includes the GraphQL fields of MaskingMetadata requested by the fragment MaskingMetadata.
type MaskingMetadata struct {
	DefaultMaskExternalName *string                            `json:"defaultMaskExternalName"`
	MaskTypes               []MaskingMetadataMaskTypesMaskType `json:"maskTypes"`
}

// GetDefaultMaskExternalName returns MaskingMetadata.DefaultMaskExternalName, and is useful for accessing the field via an interface.
func (v *MaskingMetadata) GetDefaultMaskExternalName() *string { return v.DefaultMaskExternalName }

// GetMaskTypes returns MaskingMetadata.MaskTypes, and is useful for accessing the field via an interface.
func (v *MaskingMetadata) GetMaskTypes() []MaskingMetadataMaskTypesMaskType { return v.MaskTypes }

// MaskingMetadataMaskTypesMaskType includes the requested fields of the GraphQL type MaskType.
type MaskingMetadataMaskTypesMaskType struct {
	MaskType `json:"-"`
}

// GetExternalId returns MaskingMetadataMaskTypesMaskType.ExternalId, and is useful for accessing the field via an interface.
func (v *MaskingMetadataMaskTypesMaskType) GetExternalId() string { return v.MaskType.ExternalId }

// GetDisplayName returns MaskingMetadataMaskTypesMaskType.DisplayName, and is useful for accessing the field via an interface.
func (v *MaskingMetadataMaskTypesMaskType) GetDisplayName() string { return v.MaskType.DisplayName }

// GetDescription returns MaskingMetadataMaskTypesMaskType.Description, and is useful for accessing the field via an interface.
func (v *MaskingMetadataMaskTypesMaskType) GetDescription() string { return v.MaskType.Description }

// GetDataTypes returns MaskingMetadataMaskTypesMaskType.DataTypes, and is useful for accessing the field via an interface.
func (v *MaskingMetadataMaskTypesMaskType) GetDataTypes() []string { return v.MaskType.DataTypes }

func (v *MaskingMetadataMaskTypesMaskType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MaskingMetadataMaskTypesMaskType
		graphql.NoUnmarshalJSON
	}
	firstPass.MaskingMetadataMaskTypesMaskType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaskType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMaskingMetadataMaskTypesMaskType struct {
	ExternalId string `json:"externalId"`

	DisplayName string `json:"displayName"`

	Description string `json:"description"`

	DataTypes []string `json:"dataTypes"`
}

func (v *MaskingMetadataMaskTypesMaskType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MaskingMetadataMaskTypesMaskType) __premarshalJSON() (*__premarshalMaskingMetadataMaskTypesMaskType, error) {
	var retval __premarshalMaskingMetadataMaskTypesMaskType

	retval.ExternalId = v.MaskType.ExternalId
	retval.DisplayName = v.MaskType.DisplayName
	retval.Description = v.MaskType.Description
	retval.DataTypes = v.MaskType.DataTypes
	return &retval, nil
}

// NotFoundError includes the GraphQL fields of NotFoundError requested by the fragment NotFoundError.
type NotFoundError struct {
	Message string `json:"message"`
}

// GetMessage returns NotFoundError.Message, and is useful for accessing the field via an interface.
func (v *NotFoundError) GetMessage() string { return v.Message }

// PageInfo includes the GraphQL fields of PageInfo requested by the fragment PageInfo.
type PageInfo struct {
	HasNextPage *bool   `json:"hasNextPage"`
	StartCursor *string `json:"startCursor"`
}

// GetHasNextPage returns PageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetStartCursor returns PageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PageInfo) GetStartCursor() *string { return v.StartCursor }

// PermissionDeniedError includes the GraphQL fields of PermissionDeniedError requested by the fragment PermissionDeniedError.
type PermissionDeniedError struct {
	Message string `json:"message"`
}

// GetMessage returns PermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *PermissionDeniedError) GetMessage() string { return v.Message }

// RemoveAsRaitoUserRemoveAsRaitoUser includes the requested fields of the GraphQL type User.
type RemoveAsRaitoUserRemoveAsRaitoUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns RemoveAsRaitoUserRemoveAsRaitoUser.Typename, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetTypename() *string { return v.Typename }

// GetId returns RemoveAsRaitoUserRemoveAsRaitoUser.Id, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetId() string { return v.User.Id }

// GetName returns RemoveAsRaitoUserRemoveAsRaitoUser.Name, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetName() string { return v.User.Name }

// GetEmail returns RemoveAsRaitoUserRemoveAsRaitoUser.Email, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns RemoveAsRaitoUserRemoveAsRaitoUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns RemoveAsRaitoUserRemoveAsRaitoUser.Type, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) GetType() UserType { return v.User.Type }

func (v *RemoveAsRaitoUserRemoveAsRaitoUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveAsRaitoUserRemoveAsRaitoUser
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveAsRaitoUserRemoveAsRaitoUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveAsRaitoUserRemoveAsRaitoUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUser) __premarshalJSON() (*__premarshalRemoveAsRaitoUserRemoveAsRaitoUser, error) {
	var retval __premarshalRemoveAsRaitoUserRemoveAsRaitoUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) GetTypename() *string {
	return v.Typename
}

// GetErrEmail returns RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) __premarshalJSON() (*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError, error) {
	var retval __premarshalRemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError) GetTypename() *string {
	return v.Typename
}

// RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveAsRaitoUserRemoveAsRaitoUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) __premarshalJSON() (*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserNotFoundError, error) {
	var retval __premarshalRemoveAsRaitoUserRemoveAsRaitoUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) __premarshalJSON() (*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError, error) {
	var retval __premarshalRemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// RemoveAsRaitoUserRemoveAsRaitoUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// RemoveAsRaitoUserRemoveAsRaitoUserUserResult is implemented by the following types:
// RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError
// RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError
// RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError
// RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError
// RemoveAsRaitoUserRemoveAsRaitoUser
type RemoveAsRaitoUserRemoveAsRaitoUserUserResult interface {
	implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError) implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult() {
}
func (v *RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError) implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult() {
}
func (v *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError) implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult() {
}
func (v *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError) implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult() {
}
func (v *RemoveAsRaitoUserRemoveAsRaitoUser) implementsGraphQLInterfaceRemoveAsRaitoUserRemoveAsRaitoUserUserResult() {
}

func __unmarshalRemoveAsRaitoUserRemoveAsRaitoUserUserResult(b []byte, v *RemoveAsRaitoUserRemoveAsRaitoUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(RemoveAsRaitoUserRemoveAsRaitoUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RemoveAsRaitoUserRemoveAsRaitoUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalRemoveAsRaitoUserRemoveAsRaitoUserUserResult(v *RemoveAsRaitoUserRemoveAsRaitoUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*RemoveAsRaitoUserRemoveAsRaitoUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *RemoveAsRaitoUserRemoveAsRaitoUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveAsRaitoUserRemoveAsRaitoUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveAsRaitoUserRemoveAsRaitoUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveAsRaitoUserRemoveAsRaitoUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RemoveAsRaitoUserRemoveAsRaitoUserUserResult: "%T"`, v)
	}
}

// RemoveAsRaitoUserResponse is returned by RemoveAsRaitoUser on success.
type RemoveAsRaitoUserResponse struct {
	RemoveAsRaitoUser RemoveAsRaitoUserRemoveAsRaitoUserUserResult `json:"-"`
}

// GetRemoveAsRaitoUser returns RemoveAsRaitoUserResponse.RemoveAsRaitoUser, and is useful for accessing the field via an interface.
func (v *RemoveAsRaitoUserResponse) GetRemoveAsRaitoUser() RemoveAsRaitoUserRemoveAsRaitoUserUserResult {
	return v.RemoveAsRaitoUser
}

func (v *RemoveAsRaitoUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveAsRaitoUserResponse
		RemoveAsRaitoUser json.RawMessage `json:"removeAsRaitoUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveAsRaitoUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveAsRaitoUser
		src := firstPass.RemoveAsRaitoUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRemoveAsRaitoUserRemoveAsRaitoUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RemoveAsRaitoUserResponse.RemoveAsRaitoUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRemoveAsRaitoUserResponse struct {
	RemoveAsRaitoUser json.RawMessage `json:"removeAsRaitoUser"`
}

func (v *RemoveAsRaitoUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveAsRaitoUserResponse) __premarshalJSON() (*__premarshalRemoveAsRaitoUserResponse, error) {
	var retval __premarshalRemoveAsRaitoUserResponse

	{

		dst := &retval.RemoveAsRaitoUser
		src := v.RemoveAsRaitoUser
		var err error
		*dst, err = __marshalRemoveAsRaitoUserRemoveAsRaitoUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RemoveAsRaitoUserResponse.RemoveAsRaitoUser: %w", err)
		}
	}
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource includes the requested fields of the GraphQL type DataSource.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetTypename() *string {
	return v.Typename
}

// GetId returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Id, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetId() string {
	return v.DataSource.Id
}

// GetName returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Name, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetName() string {
	return v.DataSource.Name
}

// GetType returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Type, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetType() string {
	return v.DataSource.Type
}

// GetDescription returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Description, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Parent, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult is implemented by the following types:
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}

func __unmarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(b []byte, v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult: "%T"`, v)
	}
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceResponse is returned by RemoveIdentityStoreFromDataSource on success.
type RemoveIdentityStoreFromDataSourceResponse struct {
	RemoveIdentityStoreFromDataSource RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult `json:"-"`
}

// GetRemoveIdentityStoreFromDataSource returns RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceResponse) GetRemoveIdentityStoreFromDataSource() RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult {
	return v.RemoveIdentityStoreFromDataSource
}

func (v *RemoveIdentityStoreFromDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceResponse
		RemoveIdentityStoreFromDataSource json.RawMessage `json:"removeIdentityStoreFromDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveIdentityStoreFromDataSource
		src := firstPass.RemoveIdentityStoreFromDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceResponse struct {
	RemoveIdentityStoreFromDataSource json.RawMessage `json:"removeIdentityStoreFromDataSource"`
}

func (v *RemoveIdentityStoreFromDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceResponse) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceResponse, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceResponse

	{

		dst := &retval.RemoveIdentityStoreFromDataSource
		src := v.RemoveIdentityStoreFromDataSource
		var err error
		*dst, err = __marshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource: %w", err)
		}
	}
	return &retval, nil
}

// Role includes the GraphQL fields of Role requested by the fragment Role.
type Role struct {
	Id          string `json:"id"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// GetId returns Role.Id, and is useful for accessing the field via an interface.
func (v *Role) GetId() string { return v.Id }

// GetDescription returns Role.Description, and is useful for accessing the field via an interface.
func (v *Role) GetDescription() string { return v.Description }

// GetName returns Role.Name, and is useful for accessing the field via an interface.
func (v *Role) GetName() string { return v.Name }

// RoleAssignment includes the GraphQL fields of RoleAssignment requested by the fragment RoleAssignment.
type RoleAssignment struct {
	Id   string             `json:"id"`
	Role RoleAssignmentRole `json:"role"`
	On   *RoleAssignmentOn  `json:"-"`
	To   RoleAssignmentTo   `json:"-"`
}

// GetId returns RoleAssignment.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignment) GetId() string { return v.Id }

// GetRole returns RoleAssignment.Role, and is useful for accessing the field via an interface.
func (v *RoleAssignment) GetRole() RoleAssignmentRole { return v.Role }

// GetOn returns RoleAssignment.On, and is useful for accessing the field via an interface.
func (v *RoleAssignment) GetOn() *RoleAssignmentOn { return v.On }

// GetTo returns RoleAssignment.To, and is useful for accessing the field via an interface.
func (v *RoleAssignment) GetTo() RoleAssignmentTo { return v.To }

func (v *RoleAssignment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignment
		On json.RawMessage `json:"on"`
		To json.RawMessage `json:"to"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.On
		src := firstPass.On
		if len(src) != 0 && string(src) != "null" {
			*dst = new(RoleAssignmentOn)
			err = __unmarshalRoleAssignmentOn(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RoleAssignment.On: %w", err)
			}
		}
	}

	{
		dst := &v.To
		src := firstPass.To
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRoleAssignmentTo(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RoleAssignment.To: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRoleAssignment struct {
	Id string `json:"id"`

	Role RoleAssignmentRole `json:"role"`

	On json.RawMessage `json:"on"`

	To json.RawMessage `json:"to"`
}

func (v *RoleAssignment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignment) __premarshalJSON() (*__premarshalRoleAssignment, error) {
	var retval __premarshalRoleAssignment

	retval.Id = v.Id
	retval.Role = v.Role
	{

		dst := &retval.On
		src := v.On
		if src != nil {
			var err error
			*dst, err = __marshalRoleAssignmentOn(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal RoleAssignment.On: %w", err)
			}
		}
	}
	{

		dst := &retval.To
		src := v.To
		var err error
		*dst, err = __marshalRoleAssignmentTo(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RoleAssignment.To: %w", err)
		}
	}
	return &retval, nil
}

type RoleAssignmentFilterInput struct {
	Resource           *string `json:"resource,omitempty"`
	Role               *string `json:"role,omitempty"`
	User               *string `json:"user,omitempty"`
	Inherited          *bool   `json:"inherited,omitempty"`
	InheritedOnly      *bool   `json:"inheritedOnly,omitempty"`
	OnlyGlobal         *bool   `json:"onlyGlobal,omitempty"`
	ExcludeDelegations *bool   `json:"excludeDelegations,omitempty"`
	ExcludeDelegated   *bool   `json:"excludeDelegated,omitempty"`
}

// GetResource returns RoleAssignmentFilterInput.Resource, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetResource() *string { return v.Resource }

// GetRole returns RoleAssignmentFilterInput.Role, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetRole() *string { return v.Role }

// GetUser returns RoleAssignmentFilterInput.User, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetUser() *string { return v.User }

// GetInherited returns RoleAssignmentFilterInput.Inherited, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetInherited() *bool { return v.Inherited }

// GetInheritedOnly returns RoleAssignmentFilterInput.InheritedOnly, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetInheritedOnly() *bool { return v.InheritedOnly }

// GetOnlyGlobal returns RoleAssignmentFilterInput.OnlyGlobal, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetOnlyGlobal() *bool { return v.OnlyGlobal }

// GetExcludeDelegations returns RoleAssignmentFilterInput.ExcludeDelegations, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetExcludeDelegations() *bool { return v.ExcludeDelegations }

// GetExcludeDelegated returns RoleAssignmentFilterInput.ExcludeDelegated, and is useful for accessing the field via an interface.
func (v *RoleAssignmentFilterInput) GetExcludeDelegated() *bool { return v.ExcludeDelegated }

// RoleAssignmentOn includes the requested fields of the GraphQL interface RoleAssignmentOn.
//
// RoleAssignmentOn is implemented by the following types:
// RoleAssignmentOnAccessProvider
// RoleAssignmentOnDataObject
// RoleAssignmentOnDataSource
// RoleAssignmentOnIdentityStore
// RoleAssignmentOnInvalidInputError
// RoleAssignmentOnNotFoundError
// RoleAssignmentOnPermissionDeniedError
type RoleAssignmentOn interface {
	implementsGraphQLInterfaceRoleAssignmentOn()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RoleAssignmentOnAccessProvider) implementsGraphQLInterfaceRoleAssignmentOn()        {}
func (v *RoleAssignmentOnDataObject) implementsGraphQLInterfaceRoleAssignmentOn()            {}
func (v *RoleAssignmentOnDataSource) implementsGraphQLInterfaceRoleAssignmentOn()            {}
func (v *RoleAssignmentOnIdentityStore) implementsGraphQLInterfaceRoleAssignmentOn()         {}
func (v *RoleAssignmentOnInvalidInputError) implementsGraphQLInterfaceRoleAssignmentOn()     {}
func (v *RoleAssignmentOnNotFoundError) implementsGraphQLInterfaceRoleAssignmentOn()         {}
func (v *RoleAssignmentOnPermissionDeniedError) implementsGraphQLInterfaceRoleAssignmentOn() {}

func __unmarshalRoleAssignmentOn(b []byte, v *RoleAssignmentOn) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(RoleAssignmentOnAccessProvider)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(RoleAssignmentOnDataObject)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(RoleAssignmentOnDataSource)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(RoleAssignmentOnIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(RoleAssignmentOnInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(RoleAssignmentOnNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(RoleAssignmentOnPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleAssignmentOn.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RoleAssignmentOn: "%v"`, tn.TypeName)
	}
}

func __marshalRoleAssignmentOn(v *RoleAssignmentOn) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RoleAssignmentOnAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentOnDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnDataObject
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentOnDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnDataSource
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentOnIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentOnInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentOnNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRoleAssignmentOnNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RoleAssignmentOnPermissionDeniedError:
		typename = "PermissionDeniedError"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentOnPermissionDeniedError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RoleAssignmentOn: "%T"`, v)
	}
}

// RoleAssignmentOnAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type RoleAssignmentOnAccessProvider struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns RoleAssignmentOnAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentOnAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnAccessProvider) GetId() string { return v.Id }

// RoleAssignmentOnDataObject includes the requested fields of the GraphQL type DataObject.
type RoleAssignmentOnDataObject struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns RoleAssignmentOnDataObject.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnDataObject) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentOnDataObject.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnDataObject) GetId() string { return v.Id }

// RoleAssignmentOnDataSource includes the requested fields of the GraphQL type DataSource.
type RoleAssignmentOnDataSource struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns RoleAssignmentOnDataSource.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnDataSource) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentOnDataSource.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnDataSource) GetId() string { return v.Id }

// RoleAssignmentOnIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type RoleAssignmentOnIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentOnIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnIdentityStore) GetTypename() *string { return v.Typename }

// RoleAssignmentOnInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type RoleAssignmentOnInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentOnInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnInvalidInputError) GetTypename() *string { return v.Typename }

// RoleAssignmentOnNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type RoleAssignmentOnNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns RoleAssignmentOnNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns RoleAssignmentOnNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *RoleAssignmentOnNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignmentOnNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignmentOnNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRoleAssignmentOnNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RoleAssignmentOnNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignmentOnNotFoundError) __premarshalJSON() (*__premarshalRoleAssignmentOnNotFoundError, error) {
	var retval __premarshalRoleAssignmentOnNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// RoleAssignmentOnPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type RoleAssignmentOnPermissionDeniedError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentOnPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOnPermissionDeniedError) GetTypename() *string { return v.Typename }

type RoleAssignmentOrderInput struct {
	ResourceName *Sort `json:"resourceName,omitempty"`
	UserName     *Sort `json:"userName,omitempty"`
	RoleName     *Sort `json:"roleName,omitempty"`
}

// GetResourceName returns RoleAssignmentOrderInput.ResourceName, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOrderInput) GetResourceName() *Sort { return v.ResourceName }

// GetUserName returns RoleAssignmentOrderInput.UserName, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOrderInput) GetUserName() *Sort { return v.UserName }

// GetRoleName returns RoleAssignmentOrderInput.RoleName, and is useful for accessing the field via an interface.
func (v *RoleAssignmentOrderInput) GetRoleName() *Sort { return v.RoleName }

// RoleAssignmentPage includes the GraphQL fields of PagedResult requested by the fragment RoleAssignmentPage.
type RoleAssignmentPage struct {
	PageInfo *RoleAssignmentPagePageInfo   `json:"pageInfo"`
	Edges    []RoleAssignmentPageEdgesEdge `json:"edges"`
}

// GetPageInfo returns RoleAssignmentPage.PageInfo, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPage) GetPageInfo() *RoleAssignmentPagePageInfo { return v.PageInfo }

// GetEdges returns RoleAssignmentPage.Edges, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPage) GetEdges() []RoleAssignmentPageEdgesEdge { return v.Edges }

// RoleAssignmentPageEdgesEdge includes the requested fields of the GraphQL type Edge.
type RoleAssignmentPageEdgesEdge struct {
	Cursor *string                              `json:"cursor"`
	Node   *RoleAssignmentPageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns RoleAssignmentPageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns RoleAssignmentPageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdge) GetNode() *RoleAssignmentPageEdgesEdgeNodeItem { return v.Node }

func (v *RoleAssignmentPageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignmentPageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignmentPageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(RoleAssignmentPageEdgesEdgeNodeItem)
			err = __unmarshalRoleAssignmentPageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RoleAssignmentPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRoleAssignmentPageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *RoleAssignmentPageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignmentPageEdgesEdge) __premarshalJSON() (*__premarshalRoleAssignmentPageEdgesEdge, error) {
	var retval __premarshalRoleAssignmentPageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalRoleAssignmentPageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal RoleAssignmentPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// RoleAssignmentPageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type RoleAssignmentPageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type RoleAssignmentPageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type RoleAssignmentPageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type RoleAssignmentPageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type RoleAssignmentPageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type RoleAssignmentPageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type RoleAssignmentPageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type RoleAssignmentPageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type RoleAssignmentPageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type RoleAssignmentPageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type RoleAssignmentPageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type RoleAssignmentPageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type RoleAssignmentPageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type RoleAssignmentPageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type RoleAssignmentPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type RoleAssignmentPageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type RoleAssignmentPageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// RoleAssignmentPageEdgesEdgeNodeItem is implemented by the following types:
// RoleAssignmentPageEdgesEdgeNodeAccessProvider
// RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail
// RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult
// RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail
// RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch
// RoleAssignmentPageEdgesEdgeNodeAccessRequest
// RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification
// RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem
// RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem
// RoleAssignmentPageEdgesEdgeNodeAccessWhatItem
// RoleAssignmentPageEdgesEdgeNodeAccessWhoItem
// RoleAssignmentPageEdgesEdgeNodeAccount
// RoleAssignmentPageEdgesEdgeNodeAuditDiffLog
// RoleAssignmentPageEdgesEdgeNodeComment
// RoleAssignmentPageEdgesEdgeNodeCommentNotification
// RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem
// RoleAssignmentPageEdgesEdgeNodeDataObject
// RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation
// RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult
// RoleAssignmentPageEdgesEdgeNodeDataObjectType
// RoleAssignmentPageEdgesEdgeNodeDataSource
// RoleAssignmentPageEdgesEdgeNodeDataSourceShare
// RoleAssignmentPageEdgesEdgeNodeDataUsage
// RoleAssignmentPageEdgesEdgeNodeDatasourceNotification
// RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification
// RoleAssignmentPageEdgesEdgeNodeGroup
// RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem
// RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem
// RoleAssignmentPageEdgesEdgeNodeIdentityStore
// RoleAssignmentPageEdgesEdgeNodeIssue
// RoleAssignmentPageEdgesEdgeNodeJob
// RoleAssignmentPageEdgesEdgeNodeJobLogMsg
// RoleAssignmentPageEdgesEdgeNodePromiseDetails
// RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject
// RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement
// RoleAssignmentPageEdgesEdgeNodeRole
// RoleAssignmentPageEdgesEdgeNodeRoleAssignment
// RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification
// RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification
// RoleAssignmentPageEdgesEdgeNodeSearchResultItem
// RoleAssignmentPageEdgesEdgeNodeStringValue
// RoleAssignmentPageEdgesEdgeNodeTag
// RoleAssignmentPageEdgesEdgeNodeTask
// RoleAssignmentPageEdgesEdgeNodeTaskNotification
// RoleAssignmentPageEdgesEdgeNodeUser
// RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem
// RoleAssignmentPageEdgesEdgeNodeUserInsightsResult
// RoleAssignmentPageEdgesEdgeNodeUserSubtask
// RoleAssignmentPageEdgesEdgeNodeUserTask
type RoleAssignmentPageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RoleAssignmentPageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAccount) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeComment) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeGroup) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeIssue) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeJob) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeRole) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeTag) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeTask) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeUser) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}
func (v *RoleAssignmentPageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceRoleAssignmentPageEdgesEdgeNodeItem() {
}

func __unmarshalRoleAssignmentPageEdgesEdgeNodeItem(b []byte, v *RoleAssignmentPageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(RoleAssignmentPageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(RoleAssignmentPageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(RoleAssignmentPageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(RoleAssignmentPageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(RoleAssignmentPageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(RoleAssignmentPageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(RoleAssignmentPageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(RoleAssignmentPageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(RoleAssignmentPageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(RoleAssignmentPageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(RoleAssignmentPageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(RoleAssignmentPageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(RoleAssignmentPageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(RoleAssignmentPageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(RoleAssignmentPageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(RoleAssignmentPageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(RoleAssignmentPageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(RoleAssignmentPageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RoleAssignmentPageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalRoleAssignmentPageEdgesEdgeNodeItem(v *RoleAssignmentPageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RoleAssignmentPageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRoleAssignmentPageEdgesEdgeNodeRoleAssignment
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentPageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentPageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RoleAssignmentPageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// RoleAssignmentPageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type RoleAssignmentPageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type RoleAssignmentPageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type RoleAssignmentPageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type RoleAssignmentPageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type RoleAssignmentPageEdgesEdgeNodeRoleAssignment struct {
	Typename       *string `json:"__typename"`
	RoleAssignment `json:"-"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentPageEdgesEdgeNodeRoleAssignment.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) GetId() string { return v.RoleAssignment.Id }

// GetRole returns RoleAssignmentPageEdgesEdgeNodeRoleAssignment.Role, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) GetRole() RoleAssignmentRole {
	return v.RoleAssignment.Role
}

// GetOn returns RoleAssignmentPageEdgesEdgeNodeRoleAssignment.On, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) GetOn() *RoleAssignmentOn {
	return v.RoleAssignment.On
}

// GetTo returns RoleAssignmentPageEdgesEdgeNodeRoleAssignment.To, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) GetTo() RoleAssignmentTo {
	return v.RoleAssignment.To
}

func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignmentPageEdgesEdgeNodeRoleAssignment
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignmentPageEdgesEdgeNodeRoleAssignment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RoleAssignment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRoleAssignmentPageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Role RoleAssignmentRole `json:"role"`

	On json.RawMessage `json:"on"`

	To json.RawMessage `json:"to"`
}

func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignment) __premarshalJSON() (*__premarshalRoleAssignmentPageEdgesEdgeNodeRoleAssignment, error) {
	var retval __premarshalRoleAssignmentPageEdgesEdgeNodeRoleAssignment

	retval.Typename = v.Typename
	retval.Id = v.RoleAssignment.Id
	retval.Role = v.RoleAssignment.Role
	{

		dst := &retval.On
		src := v.RoleAssignment.On
		if src != nil {
			var err error
			*dst, err = __marshalRoleAssignmentOn(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal RoleAssignmentPageEdgesEdgeNodeRoleAssignment.RoleAssignment.On: %w", err)
			}
		}
	}
	{

		dst := &retval.To
		src := v.RoleAssignment.To
		var err error
		*dst, err = __marshalRoleAssignmentTo(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RoleAssignmentPageEdgesEdgeNodeRoleAssignment.RoleAssignment.To: %w", err)
		}
	}
	return &retval, nil
}

// RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type RoleAssignmentPageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type RoleAssignmentPageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type RoleAssignmentPageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type RoleAssignmentPageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type RoleAssignmentPageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type RoleAssignmentPageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// RoleAssignmentPageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type RoleAssignmentPageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type RoleAssignmentPageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// RoleAssignmentPageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type RoleAssignmentPageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RoleAssignmentPageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// RoleAssignmentPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type RoleAssignmentPagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns RoleAssignmentPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns RoleAssignmentPagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *RoleAssignmentPagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *RoleAssignmentPagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignmentPagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignmentPagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRoleAssignmentPagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *RoleAssignmentPagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignmentPagePageInfo) __premarshalJSON() (*__premarshalRoleAssignmentPagePageInfo, error) {
	var retval __premarshalRoleAssignmentPagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// RoleAssignmentRole includes the requested fields of the GraphQL type Role.
type RoleAssignmentRole struct {
	Role `json:"-"`
}

// GetId returns RoleAssignmentRole.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentRole) GetId() string { return v.Role.Id }

// GetDescription returns RoleAssignmentRole.Description, and is useful for accessing the field via an interface.
func (v *RoleAssignmentRole) GetDescription() string { return v.Role.Description }

// GetName returns RoleAssignmentRole.Name, and is useful for accessing the field via an interface.
func (v *RoleAssignmentRole) GetName() string { return v.Role.Name }

func (v *RoleAssignmentRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RoleAssignmentRole
		graphql.NoUnmarshalJSON
	}
	firstPass.RoleAssignmentRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRoleAssignmentRole struct {
	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *RoleAssignmentRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RoleAssignmentRole) __premarshalJSON() (*__premarshalRoleAssignmentRole, error) {
	var retval __premarshalRoleAssignmentRole

	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// RoleAssignmentTo includes the requested fields of the GraphQL interface RoleAssignmentTo.
//
// RoleAssignmentTo is implemented by the following types:
// RoleAssignmentToGroup
// RoleAssignmentToUser
type RoleAssignmentTo interface {
	implementsGraphQLInterfaceRoleAssignmentTo()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RoleAssignmentToGroup) implementsGraphQLInterfaceRoleAssignmentTo() {}
func (v *RoleAssignmentToUser) implementsGraphQLInterfaceRoleAssignmentTo()  {}

func __unmarshalRoleAssignmentTo(b []byte, v *RoleAssignmentTo) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Group":
		*v = new(RoleAssignmentToGroup)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(RoleAssignmentToUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleAssignmentTo.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RoleAssignmentTo: "%v"`, tn.TypeName)
	}
}

func __marshalRoleAssignmentTo(v *RoleAssignmentTo) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RoleAssignmentToGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentToGroup
		}{typename, v}
		return json.Marshal(result)
	case *RoleAssignmentToUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*RoleAssignmentToUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RoleAssignmentTo: "%T"`, v)
	}
}

// RoleAssignmentToGroup includes the requested fields of the GraphQL type Group.
type RoleAssignmentToGroup struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns RoleAssignmentToGroup.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentToGroup) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentToGroup.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentToGroup) GetId() string { return v.Id }

// RoleAssignmentToUser includes the requested fields of the GraphQL type User.
type RoleAssignmentToUser struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns RoleAssignmentToUser.Typename, and is useful for accessing the field via an interface.
func (v *RoleAssignmentToUser) GetTypename() *string { return v.Typename }

// GetId returns RoleAssignmentToUser.Id, and is useful for accessing the field via an interface.
func (v *RoleAssignmentToUser) GetId() string { return v.Id }

type RoleFilterInput struct {
	Search   *string `json:"search,omitempty"`
	IsGlobal *bool   `json:"isGlobal,omitempty"`
}

// GetSearch returns RoleFilterInput.Search, and is useful for accessing the field via an interface.
func (v *RoleFilterInput) GetSearch() *string { return v.Search }

// GetIsGlobal returns RoleFilterInput.IsGlobal, and is useful for accessing the field via an interface.
func (v *RoleFilterInput) GetIsGlobal() *bool { return v.IsGlobal }

type RoleOrderByInput struct {
	Name *Sort `json:"name,omitempty"`
}

// GetName returns RoleOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *RoleOrderByInput) GetName() *Sort { return v.Name }

// RolePage includes the GraphQL fields of PagedResult requested by the fragment RolePage.
type RolePage struct {
	PageInfo *RolePagePageInfo   `json:"pageInfo"`
	Edges    []RolePageEdgesEdge `json:"edges"`
}

// GetPageInfo returns RolePage.PageInfo, and is useful for accessing the field via an interface.
func (v *RolePage) GetPageInfo() *RolePagePageInfo { return v.PageInfo }

// GetEdges returns RolePage.Edges, and is useful for accessing the field via an interface.
func (v *RolePage) GetEdges() []RolePageEdgesEdge { return v.Edges }

// RolePageEdgesEdge includes the requested fields of the GraphQL type Edge.
type RolePageEdgesEdge struct {
	Cursor *string                    `json:"cursor"`
	Node   *RolePageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns RolePageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns RolePageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdge) GetNode() *RolePageEdgesEdgeNodeItem { return v.Node }

func (v *RolePageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RolePageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RolePageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(RolePageEdgesEdgeNodeItem)
			err = __unmarshalRolePageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RolePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRolePageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *RolePageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RolePageEdgesEdge) __premarshalJSON() (*__premarshalRolePageEdgesEdge, error) {
	var retval __premarshalRolePageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalRolePageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal RolePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// RolePageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type RolePageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessProviderFilterDetail includes the requested fields of the GraphQL type AccessProviderFilterDetail.
type RolePageEdgesEdgeNodeAccessProviderFilterDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessProviderFilterDetail.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessProviderFilterDetail) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessProviderInsightsResult includes the requested fields of the GraphQL type AccessProviderInsightsResult.
type RolePageEdgesEdgeNodeAccessProviderInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessProviderInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessProviderInsightsResult) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type RolePageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type RolePageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type RolePageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type RolePageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type RolePageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type RolePageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type RolePageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type RolePageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type RolePageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type RolePageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type RolePageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeCommentNotification includes the requested fields of the GraphQL type CommentNotification.
type RolePageEdgesEdgeNodeCommentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeCommentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeCommentNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type RolePageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type RolePageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataObjectAccessibilityInformation includes the requested fields of the GraphQL type DataObjectAccessibilityInformation.
type RolePageEdgesEdgeNodeDataObjectAccessibilityInformation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataObjectAccessibilityInformation.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataObjectAccessibilityInformation) GetTypename() *string {
	return v.Typename
}

// RolePageEdgesEdgeNodeDataObjectInsightsResult includes the requested fields of the GraphQL type DataObjectInsightsResult.
type RolePageEdgesEdgeNodeDataObjectInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataObjectInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataObjectInsightsResult) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type RolePageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type RolePageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataSourceShare includes the requested fields of the GraphQL type DataSourceShare.
type RolePageEdgesEdgeNodeDataSourceShare struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataSourceShare.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataSourceShare) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type RolePageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type RolePageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeDatasourceNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// RolePageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type RolePageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type RolePageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type RolePageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type RolePageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type RolePageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// RolePageEdgesEdgeNodeItem is implemented by the following types:
// RolePageEdgesEdgeNodeAccessProvider
// RolePageEdgesEdgeNodeAccessProviderFilterDetail
// RolePageEdgesEdgeNodeAccessProviderInsightsResult
// RolePageEdgesEdgeNodeAccessProviderMaskDetail
// RolePageEdgesEdgeNodeAccessProviderMatch
// RolePageEdgesEdgeNodeAccessRequest
// RolePageEdgesEdgeNodeAccessRequestNotification
// RolePageEdgesEdgeNodeAccessRequestWhatItem
// RolePageEdgesEdgeNodeAccessWhatAccessProviderItem
// RolePageEdgesEdgeNodeAccessWhatItem
// RolePageEdgesEdgeNodeAccessWhoItem
// RolePageEdgesEdgeNodeAccount
// RolePageEdgesEdgeNodeAuditDiffLog
// RolePageEdgesEdgeNodeComment
// RolePageEdgesEdgeNodeCommentNotification
// RolePageEdgesEdgeNodeDataAccessReturnItem
// RolePageEdgesEdgeNodeDataObject
// RolePageEdgesEdgeNodeDataObjectAccessibilityInformation
// RolePageEdgesEdgeNodeDataObjectInsightsResult
// RolePageEdgesEdgeNodeDataObjectType
// RolePageEdgesEdgeNodeDataSource
// RolePageEdgesEdgeNodeDataSourceShare
// RolePageEdgesEdgeNodeDataUsage
// RolePageEdgesEdgeNodeDatasourceNotification
// RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification
// RolePageEdgesEdgeNodeGroup
// RolePageEdgesEdgeNodeGroupedDataAccessReturnItem
// RolePageEdgesEdgeNodeGroupedUserAccessReturnItem
// RolePageEdgesEdgeNodeIdentityStore
// RolePageEdgesEdgeNodeIssue
// RolePageEdgesEdgeNodeJob
// RolePageEdgesEdgeNodeJobLogMsg
// RolePageEdgesEdgeNodePromiseDetails
// RolePageEdgesEdgeNodeQueryHistoryDataObject
// RolePageEdgesEdgeNodeQueryHistoryStatement
// RolePageEdgesEdgeNodeRole
// RolePageEdgesEdgeNodeRoleAssignment
// RolePageEdgesEdgeNodeRoleAssignmentNotification
// RolePageEdgesEdgeNodeRoleDelegationNotification
// RolePageEdgesEdgeNodeSearchResultItem
// RolePageEdgesEdgeNodeStringValue
// RolePageEdgesEdgeNodeTag
// RolePageEdgesEdgeNodeTask
// RolePageEdgesEdgeNodeTaskNotification
// RolePageEdgesEdgeNodeUser
// RolePageEdgesEdgeNodeUserAccessReturnItem
// RolePageEdgesEdgeNodeUserInsightsResult
// RolePageEdgesEdgeNodeUserSubtask
// RolePageEdgesEdgeNodeUserTask
type RolePageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RolePageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeAccessProviderFilterDetail) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessProviderInsightsResult) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()  {}
func (v *RolePageEdgesEdgeNodeAccount) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()        {}
func (v *RolePageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()   {}
func (v *RolePageEdgesEdgeNodeComment) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()        {}
func (v *RolePageEdgesEdgeNodeCommentNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeDataObjectAccessibilityInformation) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeDataObjectInsightsResult) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()     {}
func (v *RolePageEdgesEdgeNodeDataSourceShare) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeGroup) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()  {}
func (v *RolePageEdgesEdgeNodeIssue) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()          {}
func (v *RolePageEdgesEdgeNodeJob) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()            {}
func (v *RolePageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()      {}
func (v *RolePageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeQueryHistoryDataObject) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeQueryHistoryStatement) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeRole) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()           {}
func (v *RolePageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeRoleDelegationNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeStringValue) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeTag) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()         {}
func (v *RolePageEdgesEdgeNodeTask) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()        {}
func (v *RolePageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeUser) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeUserInsightsResult) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {
}
func (v *RolePageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem() {}
func (v *RolePageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceRolePageEdgesEdgeNodeItem()    {}

func __unmarshalRolePageEdgesEdgeNodeItem(b []byte, v *RolePageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(RolePageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderFilterDetail":
		*v = new(RolePageEdgesEdgeNodeAccessProviderFilterDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderInsightsResult":
		*v = new(RolePageEdgesEdgeNodeAccessProviderInsightsResult)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(RolePageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(RolePageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(RolePageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(RolePageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(RolePageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(RolePageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(RolePageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(RolePageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(RolePageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(RolePageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(RolePageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "CommentNotification":
		*v = new(RolePageEdgesEdgeNodeCommentNotification)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(RolePageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(RolePageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectAccessibilityInformation":
		*v = new(RolePageEdgesEdgeNodeDataObjectAccessibilityInformation)
		return json.Unmarshal(b, *v)
	case "DataObjectInsightsResult":
		*v = new(RolePageEdgesEdgeNodeDataObjectInsightsResult)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(RolePageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(RolePageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataSourceShare":
		*v = new(RolePageEdgesEdgeNodeDataSourceShare)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(RolePageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(RolePageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(RolePageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(RolePageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(RolePageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(RolePageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(RolePageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(RolePageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(RolePageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(RolePageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "QueryHistoryDataObject":
		*v = new(RolePageEdgesEdgeNodeQueryHistoryDataObject)
		return json.Unmarshal(b, *v)
	case "QueryHistoryStatement":
		*v = new(RolePageEdgesEdgeNodeQueryHistoryStatement)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(RolePageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(RolePageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(RolePageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "RoleDelegationNotification":
		*v = new(RolePageEdgesEdgeNodeRoleDelegationNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(RolePageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "StringValue":
		*v = new(RolePageEdgesEdgeNodeStringValue)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(RolePageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(RolePageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(RolePageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(RolePageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(RolePageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserInsightsResult":
		*v = new(RolePageEdgesEdgeNodeUserInsightsResult)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(RolePageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(RolePageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RolePageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalRolePageEdgesEdgeNodeItem(v *RolePageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RolePageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessProviderFilterDetail:
		typename = "AccessProviderFilterDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessProviderFilterDetail
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessProviderInsightsResult:
		typename = "AccessProviderInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessProviderInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeCommentNotification:
		typename = "CommentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeCommentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataObjectAccessibilityInformation:
		typename = "DataObjectAccessibilityInformation"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataObjectAccessibilityInformation
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataObjectInsightsResult:
		typename = "DataObjectInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataObjectInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataSourceShare:
		typename = "DataSourceShare"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataSourceShare
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeQueryHistoryDataObject:
		typename = "QueryHistoryDataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeQueryHistoryDataObject
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeQueryHistoryStatement:
		typename = "QueryHistoryStatement"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeQueryHistoryStatement
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRolePageEdgesEdgeNodeRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeRoleDelegationNotification:
		typename = "RoleDelegationNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeRoleDelegationNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeStringValue:
		typename = "StringValue"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeStringValue
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeUserInsightsResult:
		typename = "UserInsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeUserInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *RolePageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*RolePageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RolePageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// RolePageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type RolePageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type RolePageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type RolePageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeQueryHistoryDataObject includes the requested fields of the GraphQL type QueryHistoryDataObject.
type RolePageEdgesEdgeNodeQueryHistoryDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeQueryHistoryDataObject.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeQueryHistoryDataObject) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeQueryHistoryStatement includes the requested fields of the GraphQL type QueryHistoryStatement.
type RolePageEdgesEdgeNodeQueryHistoryStatement struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeQueryHistoryStatement.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeQueryHistoryStatement) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type RolePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns RolePageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// GetId returns RolePageEdgesEdgeNodeRole.Id, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRole) GetId() string { return v.Role.Id }

// GetDescription returns RolePageEdgesEdgeNodeRole.Description, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRole) GetDescription() string { return v.Role.Description }

// GetName returns RolePageEdgesEdgeNodeRole.Name, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRole) GetName() string { return v.Role.Name }

func (v *RolePageEdgesEdgeNodeRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RolePageEdgesEdgeNodeRole
		graphql.NoUnmarshalJSON
	}
	firstPass.RolePageEdgesEdgeNodeRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRolePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *RolePageEdgesEdgeNodeRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RolePageEdgesEdgeNodeRole) __premarshalJSON() (*__premarshalRolePageEdgesEdgeNodeRole, error) {
	var retval __premarshalRolePageEdgesEdgeNodeRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// RolePageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type RolePageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type RolePageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeRoleDelegationNotification includes the requested fields of the GraphQL type RoleDelegationNotification.
type RolePageEdgesEdgeNodeRoleDelegationNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeRoleDelegationNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeRoleDelegationNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type RolePageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeStringValue includes the requested fields of the GraphQL type StringValue.
type RolePageEdgesEdgeNodeStringValue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeStringValue.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeStringValue) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type RolePageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type RolePageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type RolePageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type RolePageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type RolePageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeUserInsightsResult includes the requested fields of the GraphQL type UserInsightsResult.
type RolePageEdgesEdgeNodeUserInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeUserInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeUserInsightsResult) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type RolePageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// RolePageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type RolePageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RolePageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *RolePageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// RolePagePageInfo includes the requested fields of the GraphQL type PageInfo.
type RolePagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns RolePagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RolePagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns RolePagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *RolePagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *RolePagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RolePagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.RolePagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRolePagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *RolePagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RolePagePageInfo) __premarshalJSON() (*__premarshalRolePagePageInfo, error) {
	var retval __premarshalRolePagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// SetGlobalRolesForUserResponse is returned by SetGlobalRolesForUser on success.
type SetGlobalRolesForUserResponse struct {
	SetGlobalRolesForUser SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult `json:"-"`
}

// GetSetGlobalRolesForUser returns SetGlobalRolesForUserResponse.SetGlobalRolesForUser, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserResponse) GetSetGlobalRolesForUser() SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult {
	return v.SetGlobalRolesForUser
}

func (v *SetGlobalRolesForUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetGlobalRolesForUserResponse
		SetGlobalRolesForUser json.RawMessage `json:"setGlobalRolesForUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SetGlobalRolesForUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SetGlobalRolesForUser
		src := firstPass.SetGlobalRolesForUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SetGlobalRolesForUserResponse.SetGlobalRolesForUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSetGlobalRolesForUserResponse struct {
	SetGlobalRolesForUser json.RawMessage `json:"setGlobalRolesForUser"`
}

func (v *SetGlobalRolesForUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetGlobalRolesForUserResponse) __premarshalJSON() (*__premarshalSetGlobalRolesForUserResponse, error) {
	var retval __premarshalSetGlobalRolesForUserResponse

	{

		dst := &retval.SetGlobalRolesForUser
		src := v.SetGlobalRolesForUser
		var err error
		*dst, err = __marshalSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SetGlobalRolesForUserResponse.SetGlobalRolesForUser: %w", err)
		}
	}
	return &retval, nil
}

// SetGlobalRolesForUserSetGlobalRolesForUser includes the requested fields of the GraphQL type SetGlobalRolesForUser.
type SetGlobalRolesForUserSetGlobalRolesForUser struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns SetGlobalRolesForUserSetGlobalRolesForUser.Typename, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUser) GetTypename() *string { return v.Typename }

// GetSuccess returns SetGlobalRolesForUserSetGlobalRolesForUser.Success, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUser) GetSuccess() bool { return v.Success }

// SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError) GetTypename() *string {
	return v.Typename
}

// SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError) GetTypename() *string {
	return v.Typename
}

// SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) __premarshalJSON() (*__premarshalSetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError, error) {
	var retval __premarshalSetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult includes the requested fields of the GraphQL interface SetGlobalRolesForUserResult.
//
// SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult is implemented by the following types:
// SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError
// SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError
// SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError
// SetGlobalRolesForUserSetGlobalRolesForUser
type SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult interface {
	implementsGraphQLInterfaceSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError) implementsGraphQLInterfaceSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult() {
}
func (v *SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError) implementsGraphQLInterfaceSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult() {
}
func (v *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError) implementsGraphQLInterfaceSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult() {
}
func (v *SetGlobalRolesForUserSetGlobalRolesForUser) implementsGraphQLInterfaceSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult() {
}

func __unmarshalSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult(b []byte, v *SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "SetGlobalRolesForUser":
		*v = new(SetGlobalRolesForUserSetGlobalRolesForUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SetGlobalRolesForUserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalSetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult(v *SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*SetGlobalRolesForUserSetGlobalRolesForUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*SetGlobalRolesForUserSetGlobalRolesForUserNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *SetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSetGlobalRolesForUserSetGlobalRolesForUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SetGlobalRolesForUserSetGlobalRolesForUser:
		typename = "SetGlobalRolesForUser"

		result := struct {
			TypeName string `json:"__typename"`
			*SetGlobalRolesForUserSetGlobalRolesForUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SetGlobalRolesForUserSetGlobalRolesForUserSetGlobalRolesForUserResult: "%T"`, v)
	}
}

// SetUserPasswordResponse is returned by SetUserPassword on success.
type SetUserPasswordResponse struct {
	SetPassword SetUserPasswordSetPasswordUserResult `json:"-"`
}

// GetSetPassword returns SetUserPasswordResponse.SetPassword, and is useful for accessing the field via an interface.
func (v *SetUserPasswordResponse) GetSetPassword() SetUserPasswordSetPasswordUserResult {
	return v.SetPassword
}

func (v *SetUserPasswordResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetUserPasswordResponse
		SetPassword json.RawMessage `json:"setPassword"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SetUserPasswordResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SetPassword
		src := firstPass.SetPassword
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSetUserPasswordSetPasswordUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SetUserPasswordResponse.SetPassword: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSetUserPasswordResponse struct {
	SetPassword json.RawMessage `json:"setPassword"`
}

func (v *SetUserPasswordResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetUserPasswordResponse) __premarshalJSON() (*__premarshalSetUserPasswordResponse, error) {
	var retval __premarshalSetUserPasswordResponse

	{

		dst := &retval.SetPassword
		src := v.SetPassword
		var err error
		*dst, err = __marshalSetUserPasswordSetPasswordUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SetUserPasswordResponse.SetPassword: %w", err)
		}
	}
	return &retval, nil
}

// SetUserPasswordSetPasswordInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type SetUserPasswordSetPasswordInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns SetUserPasswordSetPasswordInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns SetUserPasswordSetPasswordInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns SetUserPasswordSetPasswordInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *SetUserPasswordSetPasswordInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetUserPasswordSetPasswordInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.SetUserPasswordSetPasswordInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSetUserPasswordSetPasswordInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *SetUserPasswordSetPasswordInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetUserPasswordSetPasswordInvalidEmailError) __premarshalJSON() (*__premarshalSetUserPasswordSetPasswordInvalidEmailError, error) {
	var retval __premarshalSetUserPasswordSetPasswordInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// SetUserPasswordSetPasswordInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type SetUserPasswordSetPasswordInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns SetUserPasswordSetPasswordInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordInvalidInputError) GetTypename() *string { return v.Typename }

// SetUserPasswordSetPasswordNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type SetUserPasswordSetPasswordNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns SetUserPasswordSetPasswordNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns SetUserPasswordSetPasswordNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *SetUserPasswordSetPasswordNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetUserPasswordSetPasswordNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.SetUserPasswordSetPasswordNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSetUserPasswordSetPasswordNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *SetUserPasswordSetPasswordNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetUserPasswordSetPasswordNotFoundError) __premarshalJSON() (*__premarshalSetUserPasswordSetPasswordNotFoundError, error) {
	var retval __premarshalSetUserPasswordSetPasswordNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// SetUserPasswordSetPasswordPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type SetUserPasswordSetPasswordPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns SetUserPasswordSetPasswordPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns SetUserPasswordSetPasswordPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *SetUserPasswordSetPasswordPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetUserPasswordSetPasswordPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.SetUserPasswordSetPasswordPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSetUserPasswordSetPasswordPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *SetUserPasswordSetPasswordPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetUserPasswordSetPasswordPermissionDeniedError) __premarshalJSON() (*__premarshalSetUserPasswordSetPasswordPermissionDeniedError, error) {
	var retval __premarshalSetUserPasswordSetPasswordPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// SetUserPasswordSetPasswordUser includes the requested fields of the GraphQL type User.
type SetUserPasswordSetPasswordUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns SetUserPasswordSetPasswordUser.Typename, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetTypename() *string { return v.Typename }

// GetId returns SetUserPasswordSetPasswordUser.Id, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetId() string { return v.User.Id }

// GetName returns SetUserPasswordSetPasswordUser.Name, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetName() string { return v.User.Name }

// GetEmail returns SetUserPasswordSetPasswordUser.Email, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns SetUserPasswordSetPasswordUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns SetUserPasswordSetPasswordUser.Type, and is useful for accessing the field via an interface.
func (v *SetUserPasswordSetPasswordUser) GetType() UserType { return v.User.Type }

func (v *SetUserPasswordSetPasswordUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SetUserPasswordSetPasswordUser
		graphql.NoUnmarshalJSON
	}
	firstPass.SetUserPasswordSetPasswordUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSetUserPasswordSetPasswordUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *SetUserPasswordSetPasswordUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SetUserPasswordSetPasswordUser) __premarshalJSON() (*__premarshalSetUserPasswordSetPasswordUser, error) {
	var retval __premarshalSetUserPasswordSetPasswordUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// SetUserPasswordSetPasswordUserResult includes the requested fields of the GraphQL interface UserResult.
//
// SetUserPasswordSetPasswordUserResult is implemented by the following types:
// SetUserPasswordSetPasswordInvalidEmailError
// SetUserPasswordSetPasswordInvalidInputError
// SetUserPasswordSetPasswordNotFoundError
// SetUserPasswordSetPasswordPermissionDeniedError
// SetUserPasswordSetPasswordUser
type SetUserPasswordSetPasswordUserResult interface {
	implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *SetUserPasswordSetPasswordInvalidEmailError) implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult() {
}
func (v *SetUserPasswordSetPasswordInvalidInputError) implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult() {
}
func (v *SetUserPasswordSetPasswordNotFoundError) implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult() {
}
func (v *SetUserPasswordSetPasswordPermissionDeniedError) implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult() {
}
func (v *SetUserPasswordSetPasswordUser) implementsGraphQLInterfaceSetUserPasswordSetPasswordUserResult() {
}

func __unmarshalSetUserPasswordSetPasswordUserResult(b []byte, v *SetUserPasswordSetPasswordUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(SetUserPasswordSetPasswordInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(SetUserPasswordSetPasswordInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(SetUserPasswordSetPasswordNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(SetUserPasswordSetPasswordPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(SetUserPasswordSetPasswordUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SetUserPasswordSetPasswordUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalSetUserPasswordSetPasswordUserResult(v *SetUserPasswordSetPasswordUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SetUserPasswordSetPasswordInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSetUserPasswordSetPasswordInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SetUserPasswordSetPasswordInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*SetUserPasswordSetPasswordInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *SetUserPasswordSetPasswordNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSetUserPasswordSetPasswordNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SetUserPasswordSetPasswordPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSetUserPasswordSetPasswordPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SetUserPasswordSetPasswordUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSetUserPasswordSetPasswordUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SetUserPasswordSetPasswordUserResult: "%T"`, v)
	}
}

type Sort string

const (
	SortAsc  Sort = "asc"
	SortDesc Sort = "desc"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

// SyncData includes the GraphQL fields of SyncData requested by the fragment SyncData.
type SyncData struct {
	DataSource         SyncDataDataSource          `json:"dataSource"`
	AccessProviderType *SyncDataAccessProviderType `json:"accessProviderType"`
	ActualName         *string                     `json:"actualName"`
	MaskType           *SyncDataMaskType           `json:"maskType"`
	SyncStatus         SyncStatus                  `json:"syncStatus"`
}

// GetDataSource returns SyncData.DataSource, and is useful for accessing the field via an interface.
func (v *SyncData) GetDataSource() SyncDataDataSource { return v.DataSource }

// GetAccessProviderType returns SyncData.AccessProviderType, and is useful for accessing the field via an interface.
func (v *SyncData) GetAccessProviderType() *SyncDataAccessProviderType { return v.AccessProviderType }

// GetActualName returns SyncData.ActualName, and is useful for accessing the field via an interface.
func (v *SyncData) GetActualName() *string { return v.ActualName }

// GetMaskType returns SyncData.MaskType, and is useful for accessing the field via an interface.
func (v *SyncData) GetMaskType() *SyncDataMaskType { return v.MaskType }

// GetSyncStatus returns SyncData.SyncStatus, and is useful for accessing the field via an interface.
func (v *SyncData) GetSyncStatus() SyncStatus { return v.SyncStatus }

// SyncDataAccessProviderType includes the requested fields of the GraphQL type AccessProviderType.
type SyncDataAccessProviderType struct {
	Type *string `json:"type"`
}

// GetType returns SyncDataAccessProviderType.Type, and is useful for accessing the field via an interface.
func (v *SyncDataAccessProviderType) GetType() *string { return v.Type }

// SyncDataDataSource includes the requested fields of the GraphQL type DataSource.
type SyncDataDataSource struct {
	DataSource `json:"-"`
}

// GetId returns SyncDataDataSource.Id, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetId() string { return v.DataSource.Id }

// GetName returns SyncDataDataSource.Name, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetName() string { return v.DataSource.Name }

// GetType returns SyncDataDataSource.Type, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns SyncDataDataSource.Description, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns SyncDataDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns SyncDataDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns SyncDataDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetSyncMethod() DataSourceSyncMethod { return v.DataSource.SyncMethod }

// GetParent returns SyncDataDataSource.Parent, and is useful for accessing the field via an interface.
func (v *SyncDataDataSource) GetParent() *DataSourceParentDataSource { return v.DataSource.Parent }

func (v *SyncDataDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SyncDataDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.SyncDataDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSyncDataDataSource struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *SyncDataDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SyncDataDataSource) __premarshalJSON() (*__premarshalSyncDataDataSource, error) {
	var retval __premarshalSyncDataDataSource

	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// SyncDataMaskType includes the requested fields of the GraphQL type MaskType.
type SyncDataMaskType struct {
	MaskType `json:"-"`
}

// GetExternalId returns SyncDataMaskType.ExternalId, and is useful for accessing the field via an interface.
func (v *SyncDataMaskType) GetExternalId() string { return v.MaskType.ExternalId }

// GetDisplayName returns SyncDataMaskType.DisplayName, and is useful for accessing the field via an interface.
func (v *SyncDataMaskType) GetDisplayName() string { return v.MaskType.DisplayName }

// GetDescription returns SyncDataMaskType.Description, and is useful for accessing the field via an interface.
func (v *SyncDataMaskType) GetDescription() string { return v.MaskType.Description }

// GetDataTypes returns SyncDataMaskType.DataTypes, and is useful for accessing the field via an interface.
func (v *SyncDataMaskType) GetDataTypes() []string { return v.MaskType.DataTypes }

func (v *SyncDataMaskType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SyncDataMaskType
		graphql.NoUnmarshalJSON
	}
	firstPass.SyncDataMaskType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaskType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSyncDataMaskType struct {
	ExternalId string `json:"externalId"`

	DisplayName string `json:"displayName"`

	Description string `json:"description"`

	DataTypes []string `json:"dataTypes"`
}

func (v *SyncDataMaskType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SyncDataMaskType) __premarshalJSON() (*__premarshalSyncDataMaskType, error) {
	var retval __premarshalSyncDataMaskType

	retval.ExternalId = v.MaskType.ExternalId
	retval.DisplayName = v.MaskType.DisplayName
	retval.Description = v.MaskType.Description
	retval.DataTypes = v.MaskType.DataTypes
	return &retval, nil
}

type SyncStatus string

const (
	SyncStatusNotConnected SyncStatus = "NOT_CONNECTED"
	SyncStatusFailed       SyncStatus = "FAILED"
	SyncStatusOutOfDate    SyncStatus = "OUT_OF_DATE"
	SyncStatusOutOfSync    SyncStatus = "OUT_OF_SYNC"
	SyncStatusInProgress   SyncStatus = "IN_PROGRESS"
	SyncStatusSynced       SyncStatus = "SYNCED"
)

var AllSyncStatus = []SyncStatus{
	SyncStatusNotConnected,
	SyncStatusFailed,
	SyncStatusOutOfDate,
	SyncStatusOutOfSync,
	SyncStatusInProgress,
	SyncStatusSynced,
}

type TagFilter struct {
	Key         *string `json:"key,omitempty"`
	StringValue *string `json:"stringValue,omitempty"`
}

// GetKey returns TagFilter.Key, and is useful for accessing the field via an interface.
func (v *TagFilter) GetKey() *string { return v.Key }

// GetStringValue returns TagFilter.StringValue, and is useful for accessing the field via an interface.
func (v *TagFilter) GetStringValue() *string { return v.StringValue }

// UnassignGlobalRoleResponse is returned by UnassignGlobalRole on success.
type UnassignGlobalRoleResponse struct {
	UnassignGlobalRole UnassignGlobalRoleUnassignGlobalRoleRoleResult `json:"-"`
}

// GetUnassignGlobalRole returns UnassignGlobalRoleResponse.UnassignGlobalRole, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleResponse) GetUnassignGlobalRole() UnassignGlobalRoleUnassignGlobalRoleRoleResult {
	return v.UnassignGlobalRole
}

func (v *UnassignGlobalRoleResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignGlobalRoleResponse
		UnassignGlobalRole json.RawMessage `json:"unassignGlobalRole"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignGlobalRoleResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UnassignGlobalRole
		src := firstPass.UnassignGlobalRole
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUnassignGlobalRoleUnassignGlobalRoleRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UnassignGlobalRoleResponse.UnassignGlobalRole: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUnassignGlobalRoleResponse struct {
	UnassignGlobalRole json.RawMessage `json:"unassignGlobalRole"`
}

func (v *UnassignGlobalRoleResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignGlobalRoleResponse) __premarshalJSON() (*__premarshalUnassignGlobalRoleResponse, error) {
	var retval __premarshalUnassignGlobalRoleResponse

	{

		dst := &retval.UnassignGlobalRole
		src := v.UnassignGlobalRole
		var err error
		*dst, err = __marshalUnassignGlobalRoleUnassignGlobalRoleRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UnassignGlobalRoleResponse.UnassignGlobalRole: %w", err)
		}
	}
	return &retval, nil
}

// UnassignGlobalRoleUnassignGlobalRole includes the requested fields of the GraphQL type Role.
type UnassignGlobalRoleUnassignGlobalRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UnassignGlobalRoleUnassignGlobalRole.Typename, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRole) GetTypename() *string { return v.Typename }

// GetId returns UnassignGlobalRoleUnassignGlobalRole.Id, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRole) GetId() string { return v.Role.Id }

// GetDescription returns UnassignGlobalRoleUnassignGlobalRole.Description, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRole) GetDescription() string { return v.Role.Description }

// GetName returns UnassignGlobalRoleUnassignGlobalRole.Name, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRole) GetName() string { return v.Role.Name }

func (v *UnassignGlobalRoleUnassignGlobalRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignGlobalRoleUnassignGlobalRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignGlobalRoleUnassignGlobalRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignGlobalRoleUnassignGlobalRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UnassignGlobalRoleUnassignGlobalRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignGlobalRoleUnassignGlobalRole) __premarshalJSON() (*__premarshalUnassignGlobalRoleUnassignGlobalRole, error) {
	var retval __premarshalUnassignGlobalRoleUnassignGlobalRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UnassignGlobalRoleUnassignGlobalRoleInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UnassignGlobalRoleUnassignGlobalRoleInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignGlobalRoleUnassignGlobalRoleInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRoleInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UnassignGlobalRoleUnassignGlobalRoleNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UnassignGlobalRoleUnassignGlobalRoleNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UnassignGlobalRoleUnassignGlobalRoleNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns UnassignGlobalRoleUnassignGlobalRoleNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignGlobalRoleUnassignGlobalRoleNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignGlobalRoleUnassignGlobalRoleNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignGlobalRoleUnassignGlobalRoleNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) __premarshalJSON() (*__premarshalUnassignGlobalRoleUnassignGlobalRoleNotFoundError, error) {
	var retval __premarshalUnassignGlobalRoleUnassignGlobalRoleNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignGlobalRoleUnassignGlobalRolePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) __premarshalJSON() (*__premarshalUnassignGlobalRoleUnassignGlobalRolePermissionDeniedError, error) {
	var retval __premarshalUnassignGlobalRoleUnassignGlobalRolePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UnassignGlobalRoleUnassignGlobalRoleRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UnassignGlobalRoleUnassignGlobalRoleRoleResult is implemented by the following types:
// UnassignGlobalRoleUnassignGlobalRoleInvalidInputError
// UnassignGlobalRoleUnassignGlobalRoleNotFoundError
// UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError
// UnassignGlobalRoleUnassignGlobalRole
type UnassignGlobalRoleUnassignGlobalRoleRoleResult interface {
	implementsGraphQLInterfaceUnassignGlobalRoleUnassignGlobalRoleRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UnassignGlobalRoleUnassignGlobalRoleInvalidInputError) implementsGraphQLInterfaceUnassignGlobalRoleUnassignGlobalRoleRoleResult() {
}
func (v *UnassignGlobalRoleUnassignGlobalRoleNotFoundError) implementsGraphQLInterfaceUnassignGlobalRoleUnassignGlobalRoleRoleResult() {
}
func (v *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError) implementsGraphQLInterfaceUnassignGlobalRoleUnassignGlobalRoleRoleResult() {
}
func (v *UnassignGlobalRoleUnassignGlobalRole) implementsGraphQLInterfaceUnassignGlobalRoleUnassignGlobalRoleRoleResult() {
}

func __unmarshalUnassignGlobalRoleUnassignGlobalRoleRoleResult(b []byte, v *UnassignGlobalRoleUnassignGlobalRoleRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UnassignGlobalRoleUnassignGlobalRoleInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UnassignGlobalRoleUnassignGlobalRoleNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UnassignGlobalRoleUnassignGlobalRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UnassignGlobalRoleUnassignGlobalRoleRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUnassignGlobalRoleUnassignGlobalRoleRoleResult(v *UnassignGlobalRoleUnassignGlobalRoleRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UnassignGlobalRoleUnassignGlobalRoleInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UnassignGlobalRoleUnassignGlobalRoleInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UnassignGlobalRoleUnassignGlobalRoleNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignGlobalRoleUnassignGlobalRoleNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignGlobalRoleUnassignGlobalRolePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignGlobalRoleUnassignGlobalRolePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignGlobalRoleUnassignGlobalRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignGlobalRoleUnassignGlobalRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UnassignGlobalRoleUnassignGlobalRoleRoleResult: "%T"`, v)
	}
}

// UnassignRoleFromAccessProviderResponse is returned by UnassignRoleFromAccessProvider on success.
type UnassignRoleFromAccessProviderResponse struct {
	UnassignRoleFromAccessProvider *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult `json:"-"`
}

// GetUnassignRoleFromAccessProvider returns UnassignRoleFromAccessProviderResponse.UnassignRoleFromAccessProvider, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderResponse) GetUnassignRoleFromAccessProvider() *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult {
	return v.UnassignRoleFromAccessProvider
}

func (v *UnassignRoleFromAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromAccessProviderResponse
		UnassignRoleFromAccessProvider json.RawMessage `json:"unassignRoleFromAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UnassignRoleFromAccessProvider
		src := firstPass.UnassignRoleFromAccessProvider
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult)
			err = __unmarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UnassignRoleFromAccessProviderResponse.UnassignRoleFromAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUnassignRoleFromAccessProviderResponse struct {
	UnassignRoleFromAccessProvider json.RawMessage `json:"unassignRoleFromAccessProvider"`
}

func (v *UnassignRoleFromAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromAccessProviderResponse) __premarshalJSON() (*__premarshalUnassignRoleFromAccessProviderResponse, error) {
	var retval __premarshalUnassignRoleFromAccessProviderResponse

	{

		dst := &retval.UnassignRoleFromAccessProvider
		src := v.UnassignRoleFromAccessProvider
		if src != nil {
			var err error
			*dst, err = __marshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UnassignRoleFromAccessProviderResponse.UnassignRoleFromAccessProvider: %w", err)
			}
		}
	}
	return &retval, nil
}

// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) __premarshalJSON() (*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError, error) {
	var retval __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError, error) {
	var retval __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole includes the requested fields of the GraphQL type Role.
type UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole.Id, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole.Description, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole.Name, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) GetName() string {
	return v.Role.Name
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) __premarshalJSON() (*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole, error) {
	var retval __premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult is implemented by the following types:
// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError
// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError
// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError
// UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole
type UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult interface {
	implementsGraphQLInterfaceUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError) implementsGraphQLInterfaceUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult() {
}
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError) implementsGraphQLInterfaceUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult() {
}
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError) implementsGraphQLInterfaceUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult() {
}
func (v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole) implementsGraphQLInterfaceUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult() {
}

func __unmarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult(b []byte, v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult(v *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromAccessProviderUnassignRoleFromAccessProviderRoleResult: "%T"`, v)
	}
}

// UnassignRoleFromDataObjectResponse is returned by UnassignRoleFromDataObject on success.
type UnassignRoleFromDataObjectResponse struct {
	UnassignRoleFromDataObject UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult `json:"-"`
}

// GetUnassignRoleFromDataObject returns UnassignRoleFromDataObjectResponse.UnassignRoleFromDataObject, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectResponse) GetUnassignRoleFromDataObject() UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult {
	return v.UnassignRoleFromDataObject
}

func (v *UnassignRoleFromDataObjectResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataObjectResponse
		UnassignRoleFromDataObject json.RawMessage `json:"unassignRoleFromDataObject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataObjectResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UnassignRoleFromDataObject
		src := firstPass.UnassignRoleFromDataObject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UnassignRoleFromDataObjectResponse.UnassignRoleFromDataObject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUnassignRoleFromDataObjectResponse struct {
	UnassignRoleFromDataObject json.RawMessage `json:"unassignRoleFromDataObject"`
}

func (v *UnassignRoleFromDataObjectResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataObjectResponse) __premarshalJSON() (*__premarshalUnassignRoleFromDataObjectResponse, error) {
	var retval __premarshalUnassignRoleFromDataObjectResponse

	{

		dst := &retval.UnassignRoleFromDataObject
		src := v.UnassignRoleFromDataObject
		var err error
		*dst, err = __marshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UnassignRoleFromDataObjectResponse.UnassignRoleFromDataObject: %w", err)
		}
	}
	return &retval, nil
}

// UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) __premarshalJSON() (*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError, error) {
	var retval __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) __premarshalJSON() (*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError, error) {
	var retval __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole includes the requested fields of the GraphQL type Role.
type UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole.Id, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) GetId() string { return v.Role.Id }

// GetDescription returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole.Description, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole.Name, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) GetName() string {
	return v.Role.Name
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) __premarshalJSON() (*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRole, error) {
	var retval __premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult is implemented by the following types:
// UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError
// UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError
// UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError
// UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole
type UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult interface {
	implementsGraphQLInterfaceUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError) implementsGraphQLInterfaceUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult() {
}
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError) implementsGraphQLInterfaceUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult() {
}
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError) implementsGraphQLInterfaceUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult() {
}
func (v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole) implementsGraphQLInterfaceUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult() {
}

func __unmarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult(b []byte, v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult(v *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UnassignRoleFromDataObjectUnassignRoleFromDataObjectInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromDataObjectUnassignRoleFromDataObjectRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataObjectUnassignRoleFromDataObjectRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromDataObjectUnassignRoleFromDataObjectRoleResult: "%T"`, v)
	}
}

// UnassignRoleFromDataSourceResponse is returned by UnassignRoleFromDataSource on success.
type UnassignRoleFromDataSourceResponse struct {
	UnassignRoleFromDataSource UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult `json:"-"`
}

// GetUnassignRoleFromDataSource returns UnassignRoleFromDataSourceResponse.UnassignRoleFromDataSource, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceResponse) GetUnassignRoleFromDataSource() UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult {
	return v.UnassignRoleFromDataSource
}

func (v *UnassignRoleFromDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataSourceResponse
		UnassignRoleFromDataSource json.RawMessage `json:"unassignRoleFromDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UnassignRoleFromDataSource
		src := firstPass.UnassignRoleFromDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UnassignRoleFromDataSourceResponse.UnassignRoleFromDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUnassignRoleFromDataSourceResponse struct {
	UnassignRoleFromDataSource json.RawMessage `json:"unassignRoleFromDataSource"`
}

func (v *UnassignRoleFromDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataSourceResponse) __premarshalJSON() (*__premarshalUnassignRoleFromDataSourceResponse, error) {
	var retval __premarshalUnassignRoleFromDataSourceResponse

	{

		dst := &retval.UnassignRoleFromDataSource
		src := v.UnassignRoleFromDataSource
		var err error
		*dst, err = __marshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UnassignRoleFromDataSourceResponse.UnassignRoleFromDataSource: %w", err)
		}
	}
	return &retval, nil
}

// UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) __premarshalJSON() (*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError, error) {
	var retval __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError, error) {
	var retval __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole includes the requested fields of the GraphQL type Role.
type UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole.Id, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) GetId() string { return v.Role.Id }

// GetDescription returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole.Description, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole.Name, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) GetName() string {
	return v.Role.Name
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) __premarshalJSON() (*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRole, error) {
	var retval __premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult is implemented by the following types:
// UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError
// UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError
// UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError
// UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole
type UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult interface {
	implementsGraphQLInterfaceUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError) implementsGraphQLInterfaceUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult() {
}
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError) implementsGraphQLInterfaceUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult() {
}
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError) implementsGraphQLInterfaceUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult() {
}
func (v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole) implementsGraphQLInterfaceUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult() {
}

func __unmarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult(b []byte, v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult(v *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UnassignRoleFromDataSourceUnassignRoleFromDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromDataSourceUnassignRoleFromDataSourceRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromDataSourceUnassignRoleFromDataSourceRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromDataSourceUnassignRoleFromDataSourceRoleResult: "%T"`, v)
	}
}

// UnassignRoleFromIdentityStoreResponse is returned by UnassignRoleFromIdentityStore on success.
type UnassignRoleFromIdentityStoreResponse struct {
	UnassignRoleFromIdentityStore UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult `json:"-"`
}

// GetUnassignRoleFromIdentityStore returns UnassignRoleFromIdentityStoreResponse.UnassignRoleFromIdentityStore, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreResponse) GetUnassignRoleFromIdentityStore() UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult {
	return v.UnassignRoleFromIdentityStore
}

func (v *UnassignRoleFromIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromIdentityStoreResponse
		UnassignRoleFromIdentityStore json.RawMessage `json:"unassignRoleFromIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UnassignRoleFromIdentityStore
		src := firstPass.UnassignRoleFromIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UnassignRoleFromIdentityStoreResponse.UnassignRoleFromIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUnassignRoleFromIdentityStoreResponse struct {
	UnassignRoleFromIdentityStore json.RawMessage `json:"unassignRoleFromIdentityStore"`
}

func (v *UnassignRoleFromIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromIdentityStoreResponse) __premarshalJSON() (*__premarshalUnassignRoleFromIdentityStoreResponse, error) {
	var retval __premarshalUnassignRoleFromIdentityStoreResponse

	{

		dst := &retval.UnassignRoleFromIdentityStore
		src := v.UnassignRoleFromIdentityStore
		var err error
		*dst, err = __marshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UnassignRoleFromIdentityStoreResponse.UnassignRoleFromIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError, error) {
	var retval __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError, error) {
	var retval __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole includes the requested fields of the GraphQL type Role.
type UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole.Typename, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole.Id, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole.Description, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole.Name, and is useful for accessing the field via an interface.
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) GetName() string {
	return v.Role.Name
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) __premarshalJSON() (*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole, error) {
	var retval __premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult is implemented by the following types:
// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError
// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError
// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError
// UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole
type UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult interface {
	implementsGraphQLInterfaceUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError) implementsGraphQLInterfaceUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult() {
}
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError) implementsGraphQLInterfaceUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult() {
}
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError) implementsGraphQLInterfaceUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult() {
}
func (v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole) implementsGraphQLInterfaceUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult() {
}

func __unmarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult(b []byte, v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult(v *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UnassignRoleFromIdentityStoreUnassignRoleFromIdentityStoreRoleResult: "%T"`, v)
	}
}

// UpdateAccessProviderResponse is returned by UpdateAccessProvider on success.
type UpdateAccessProviderResponse struct {
	UpdateAccessProvider UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult `json:"-"`
}

// GetUpdateAccessProvider returns UpdateAccessProviderResponse.UpdateAccessProvider, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderResponse) GetUpdateAccessProvider() UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult {
	return v.UpdateAccessProvider
}

func (v *UpdateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderResponse
		UpdateAccessProvider json.RawMessage `json:"updateAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateAccessProvider
		src := firstPass.UpdateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateAccessProviderResponse.UpdateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateAccessProviderResponse struct {
	UpdateAccessProvider json.RawMessage `json:"updateAccessProvider"`
}

func (v *UpdateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderResponse) __premarshalJSON() (*__premarshalUpdateAccessProviderResponse, error) {
	var retval __premarshalUpdateAccessProviderResponse

	{

		dst := &retval.UpdateAccessProvider
		src := v.UpdateAccessProvider
		var err error
		*dst, err = __marshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateAccessProviderResponse.UpdateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type UpdateAccessProviderUpdateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns UpdateAccessProviderUpdateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns UpdateAccessProviderUpdateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns UpdateAccessProviderUpdateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns UpdateAccessProviderUpdateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns UpdateAccessProviderUpdateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns UpdateAccessProviderUpdateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns UpdateAccessProviderUpdateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns UpdateAccessProviderUpdateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns UpdateAccessProviderUpdateAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns UpdateAccessProviderUpdateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns UpdateAccessProviderUpdateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns UpdateAccessProviderUpdateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns UpdateAccessProviderUpdateAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns UpdateAccessProviderUpdateAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns UpdateAccessProviderUpdateAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns UpdateAccessProviderUpdateAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns UpdateAccessProviderUpdateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns UpdateAccessProviderUpdateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns UpdateAccessProviderUpdateAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns UpdateAccessProviderUpdateAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns UpdateAccessProviderUpdateAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *UpdateAccessProviderUpdateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *UpdateAccessProviderUpdateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProvider) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProvider, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests includes the requested fields of the GraphQL type AccessProviderWithOptionalAccessRequests.
type UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests struct {
	Typename       *string                                                                                        `json:"__typename"`
	AccessProvider UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider `json:"accessProvider"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests) GetTypename() *string {
	return v.Typename
}

// GetAccessProvider returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests.AccessProvider, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests) GetAccessProvider() UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider {
	return v.AccessProvider
}

// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider struct {
	AccessProvider `json:"-"`
}

// GetId returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetId() string {
	return v.AccessProvider.Id
}

// GetIsSample returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetName() string {
	return v.AccessProvider.Name
}

// GetNamingHint returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.State, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetCategory returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Category, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCategory() *AccessProviderCategoryGrantCategory {
	return v.AccessProvider.Category
}

// GetDescription returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetExternal returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.External, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetWhatType returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhatType, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhatType() WhoAndWhatType {
	return v.AccessProvider.WhatType
}

// GetWhatAbacRule returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhatAbacRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhatAbacRule() *AccessProviderWhatAbacRule {
	return v.AccessProvider.WhatAbacRule
}

// GetWhoType returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhoType, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhoType() WhoAndWhatType {
	return v.AccessProvider.WhoType
}

// GetWhoAbacRule returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.WhoAbacRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetWhoAbacRule() *AccessProviderWhoAbacRule {
	return v.AccessProvider.WhoAbacRule
}

// GetNotInternalizable returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetComplete returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetLocks returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Locks, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetLocks() []AccessProviderLocksAccessProviderLockData {
	return v.AccessProvider.Locks
}

// GetSyncData returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.SyncData, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetSyncData() []AccessProviderSyncData {
	return v.AccessProvider.SyncData
}

// GetCurrentUserPartOfWho returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.CurrentUserPartOfWho, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetCurrentUserPartOfWho() *bool {
	return v.AccessProvider.CurrentUserPartOfWho
}

func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider struct {
	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Category *AccessProviderCategoryGrantCategory `json:"category"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	External bool `json:"external"`

	WhatType WhoAndWhatType `json:"whatType"`

	WhatAbacRule *AccessProviderWhatAbacRule `json:"whatAbacRule"`

	WhoType WhoAndWhatType `json:"whoType"`

	WhoAbacRule *AccessProviderWhoAbacRule `json:"whoAbacRule"`

	NotInternalizable bool `json:"notInternalizable"`

	Complete *bool `json:"complete"`

	Locks []AccessProviderLocksAccessProviderLockData `json:"locks"`

	SyncData []AccessProviderSyncData `json:"syncData"`

	CurrentUserPartOfWho *bool `json:"currentUserPartOfWho"`
}

func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider

	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Category = v.AccessProvider.Category
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.External = v.AccessProvider.External
	retval.WhatType = v.AccessProvider.WhatType
	retval.WhatAbacRule = v.AccessProvider.WhatAbacRule
	retval.WhoType = v.AccessProvider.WhoType
	retval.WhoAbacRule = v.AccessProvider.WhoAbacRule
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.Complete = v.AccessProvider.Complete
	retval.Locks = v.AccessProvider.Locks
	retval.SyncData = v.AccessProvider.SyncData
	retval.CurrentUserPartOfWho = v.AccessProvider.CurrentUserPartOfWho
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult includes the requested fields of the GraphQL interface AccessProviderWithOptionalAccessRequestsResult.
//
// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult is implemented by the following types:
// UpdateAccessProviderUpdateAccessProvider
// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests
// UpdateAccessProviderUpdateAccessProviderInvalidInputError
// UpdateAccessProviderUpdateAccessProviderNotFoundError
// UpdateAccessProviderUpdateAccessProviderPermissionDeniedError
type UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult interface {
	implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateAccessProviderUpdateAccessProvider) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}

func __unmarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(b []byte, v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(UpdateAccessProviderUpdateAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderWithOptionalAccessRequests":
		*v = new(UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateAccessProviderUpdateAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateAccessProviderUpdateAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateAccessProviderUpdateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderWithOptionalAccessRequestsResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateAccessProviderUpdateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests:
		typename = "AccessProviderWithOptionalAccessRequests"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests
		}{typename, v}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProviderInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%T"`, v)
	}
}

// UpdateAccessProviderUpdateAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateAccessProviderUpdateAccessProviderInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateAccessProviderUpdateAccessProviderInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProviderInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProviderInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProviderInvalidInputError) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProviderInvalidInputError, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProviderInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateAccessProviderUpdateAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateAccessProviderUpdateAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProviderNotFoundError) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProviderNotFoundError, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateAccessProviderUpdateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateAccessProviderUpdateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateDataSourceResponse is returned by UpdateDataSource on success.
type UpdateDataSourceResponse struct {
	UpdateDataSource UpdateDataSourceUpdateDataSourceDataSourceResult `json:"-"`
}

// GetUpdateDataSource returns UpdateDataSourceResponse.UpdateDataSource, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceResponse) GetUpdateDataSource() UpdateDataSourceUpdateDataSourceDataSourceResult {
	return v.UpdateDataSource
}

func (v *UpdateDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceResponse
		UpdateDataSource json.RawMessage `json:"updateDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateDataSource
		src := firstPass.UpdateDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateDataSourceUpdateDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateDataSourceResponse.UpdateDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateDataSourceResponse struct {
	UpdateDataSource json.RawMessage `json:"updateDataSource"`
}

func (v *UpdateDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceResponse) __premarshalJSON() (*__premarshalUpdateDataSourceResponse, error) {
	var retval __premarshalUpdateDataSourceResponse

	{

		dst := &retval.UpdateDataSource
		src := v.UpdateDataSource
		var err error
		*dst, err = __marshalUpdateDataSourceUpdateDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateDataSourceResponse.UpdateDataSource: %w", err)
		}
	}
	return &retval, nil
}

// UpdateDataSourceUpdateDataSource includes the requested fields of the GraphQL type DataSource.
type UpdateDataSourceUpdateDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSource.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetTypename() *string { return v.Typename }

// GetId returns UpdateDataSourceUpdateDataSource.Id, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetId() string { return v.DataSource.Id }

// GetName returns UpdateDataSourceUpdateDataSource.Name, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetName() string { return v.DataSource.Name }

// GetType returns UpdateDataSourceUpdateDataSource.Type, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns UpdateDataSourceUpdateDataSource.Description, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns UpdateDataSourceUpdateDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns UpdateDataSourceUpdateDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns UpdateDataSourceUpdateDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns UpdateDataSourceUpdateDataSource.Parent, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *UpdateDataSourceUpdateDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *UpdateDataSourceUpdateDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSource) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSource, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// UpdateDataSourceUpdateDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// UpdateDataSourceUpdateDataSourceDataSourceResult is implemented by the following types:
// UpdateDataSourceUpdateDataSource
// UpdateDataSourceUpdateDataSourceInvalidInputError
// UpdateDataSourceUpdateDataSourceNotFoundError
// UpdateDataSourceUpdateDataSourcePermissionDeniedError
type UpdateDataSourceUpdateDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateDataSourceUpdateDataSource) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}
func (v *UpdateDataSourceUpdateDataSourceInvalidInputError) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}

func __unmarshalUpdateDataSourceUpdateDataSourceDataSourceResult(b []byte, v *UpdateDataSourceUpdateDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(UpdateDataSourceUpdateDataSource)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateDataSourceUpdateDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateDataSourceUpdateDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateDataSourceUpdateDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateDataSourceUpdateDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateDataSourceUpdateDataSourceDataSourceResult(v *UpdateDataSourceUpdateDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateDataSourceUpdateDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateDataSourceUpdateDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateDataSourceUpdateDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateDataSourceUpdateDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateDataSourceUpdateDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateDataSourceUpdateDataSourceDataSourceResult: "%T"`, v)
	}
}

// UpdateDataSourceUpdateDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateDataSourceUpdateDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateDataSourceUpdateDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourceInvalidInputError) GetTypename() *string { return v.Typename }

// UpdateDataSourceUpdateDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateDataSourceUpdateDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns UpdateDataSourceUpdateDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSourceNotFoundError, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateDataSourceUpdateDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateDataSourceUpdateDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateDataSourceUpdateDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateGrantCategoryResponse is returned by UpdateGrantCategory on success.
type UpdateGrantCategoryResponse struct {
	UpdateGrantCategory UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult `json:"-"`
}

// GetUpdateGrantCategory returns UpdateGrantCategoryResponse.UpdateGrantCategory, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryResponse) GetUpdateGrantCategory() UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult {
	return v.UpdateGrantCategory
}

func (v *UpdateGrantCategoryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGrantCategoryResponse
		UpdateGrantCategory json.RawMessage `json:"updateGrantCategory"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGrantCategoryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateGrantCategory
		src := firstPass.UpdateGrantCategory
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateGrantCategoryResponse.UpdateGrantCategory: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateGrantCategoryResponse struct {
	UpdateGrantCategory json.RawMessage `json:"updateGrantCategory"`
}

func (v *UpdateGrantCategoryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGrantCategoryResponse) __premarshalJSON() (*__premarshalUpdateGrantCategoryResponse, error) {
	var retval __premarshalUpdateGrantCategoryResponse

	{

		dst := &retval.UpdateGrantCategory
		src := v.UpdateGrantCategory
		var err error
		*dst, err = __marshalUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateGrantCategoryResponse.UpdateGrantCategory: %w", err)
		}
	}
	return &retval, nil
}

// UpdateGrantCategoryUpdateGrantCategory includes the requested fields of the GraphQL type GrantCategory.
type UpdateGrantCategoryUpdateGrantCategory struct {
	Typename             *string `json:"__typename"`
	GrantCategoryDetails `json:"-"`
}

// GetTypename returns UpdateGrantCategoryUpdateGrantCategory.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetTypename() *string { return v.Typename }

// GetId returns UpdateGrantCategoryUpdateGrantCategory.Id, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetId() string { return v.GrantCategoryDetails.Id }

// GetCreatedAt returns UpdateGrantCategoryUpdateGrantCategory.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetCreatedAt() time.Time {
	return v.GrantCategoryDetails.CreatedAt
}

// GetModifiedAt returns UpdateGrantCategoryUpdateGrantCategory.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetModifiedAt() time.Time {
	return v.GrantCategoryDetails.ModifiedAt
}

// GetIsSystem returns UpdateGrantCategoryUpdateGrantCategory.IsSystem, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetIsSystem() bool {
	return v.GrantCategoryDetails.IsSystem
}

// GetName returns UpdateGrantCategoryUpdateGrantCategory.Name, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetName() string { return v.GrantCategoryDetails.Name }

// GetDescription returns UpdateGrantCategoryUpdateGrantCategory.Description, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetDescription() string {
	return v.GrantCategoryDetails.Description
}

// GetIcon returns UpdateGrantCategoryUpdateGrantCategory.Icon, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetIcon() string { return v.GrantCategoryDetails.Icon }

// GetIsDefault returns UpdateGrantCategoryUpdateGrantCategory.IsDefault, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetIsDefault() bool {
	return v.GrantCategoryDetails.IsDefault
}

// GetCanCreate returns UpdateGrantCategoryUpdateGrantCategory.CanCreate, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetCanCreate() bool {
	return v.GrantCategoryDetails.CanCreate
}

// GetAllowDuplicateNames returns UpdateGrantCategoryUpdateGrantCategory.AllowDuplicateNames, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetAllowDuplicateNames() bool {
	return v.GrantCategoryDetails.AllowDuplicateNames
}

// GetMultiDataSource returns UpdateGrantCategoryUpdateGrantCategory.MultiDataSource, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetMultiDataSource() bool {
	return v.GrantCategoryDetails.MultiDataSource
}

// GetDefaultTypePerDataSource returns UpdateGrantCategoryUpdateGrantCategory.DefaultTypePerDataSource, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetDefaultTypePerDataSource() []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource {
	return v.GrantCategoryDetails.DefaultTypePerDataSource
}

// GetAllowedWhoItems returns UpdateGrantCategoryUpdateGrantCategory.AllowedWhoItems, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetAllowedWhoItems() GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems {
	return v.GrantCategoryDetails.AllowedWhoItems
}

// GetAllowedWhatItems returns UpdateGrantCategoryUpdateGrantCategory.AllowedWhatItems, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategory) GetAllowedWhatItems() GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems {
	return v.GrantCategoryDetails.AllowedWhatItems
}

func (v *UpdateGrantCategoryUpdateGrantCategory) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGrantCategoryUpdateGrantCategory
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGrantCategoryUpdateGrantCategory = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GrantCategoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateGrantCategoryUpdateGrantCategory struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	IsSystem bool `json:"isSystem"`

	Name string `json:"name"`

	Description string `json:"description"`

	Icon string `json:"icon"`

	IsDefault bool `json:"isDefault"`

	CanCreate bool `json:"canCreate"`

	AllowDuplicateNames bool `json:"allowDuplicateNames"`

	MultiDataSource bool `json:"multiDataSource"`

	DefaultTypePerDataSource []GrantCategoryDetailsDefaultTypePerDataSourceGrantCategoryTypeForDataSource `json:"defaultTypePerDataSource"`

	AllowedWhoItems GrantCategoryDetailsAllowedWhoItemsGrantCategoryAllowedWhoItems `json:"allowedWhoItems"`

	AllowedWhatItems GrantCategoryDetailsAllowedWhatItemsGrantCategoryAllowedWhatItems `json:"allowedWhatItems"`
}

func (v *UpdateGrantCategoryUpdateGrantCategory) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGrantCategoryUpdateGrantCategory) __premarshalJSON() (*__premarshalUpdateGrantCategoryUpdateGrantCategory, error) {
	var retval __premarshalUpdateGrantCategoryUpdateGrantCategory

	retval.Typename = v.Typename
	retval.Id = v.GrantCategoryDetails.Id
	retval.CreatedAt = v.GrantCategoryDetails.CreatedAt
	retval.ModifiedAt = v.GrantCategoryDetails.ModifiedAt
	retval.IsSystem = v.GrantCategoryDetails.IsSystem
	retval.Name = v.GrantCategoryDetails.Name
	retval.Description = v.GrantCategoryDetails.Description
	retval.Icon = v.GrantCategoryDetails.Icon
	retval.IsDefault = v.GrantCategoryDetails.IsDefault
	retval.CanCreate = v.GrantCategoryDetails.CanCreate
	retval.AllowDuplicateNames = v.GrantCategoryDetails.AllowDuplicateNames
	retval.MultiDataSource = v.GrantCategoryDetails.MultiDataSource
	retval.DefaultTypePerDataSource = v.GrantCategoryDetails.DefaultTypePerDataSource
	retval.AllowedWhoItems = v.GrantCategoryDetails.AllowedWhoItems
	retval.AllowedWhatItems = v.GrantCategoryDetails.AllowedWhatItems
	return &retval, nil
}

// UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult includes the requested fields of the GraphQL interface GrantCategoryResult.
//
// UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult is implemented by the following types:
// UpdateGrantCategoryUpdateGrantCategory
// UpdateGrantCategoryUpdateGrantCategoryInvalidInputError
// UpdateGrantCategoryUpdateGrantCategoryNotFoundError
// UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError
type UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult interface {
	implementsGraphQLInterfaceUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateGrantCategoryUpdateGrantCategory) implementsGraphQLInterfaceUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult() {
}
func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) implementsGraphQLInterfaceUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult() {
}
func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) implementsGraphQLInterfaceUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult() {
}
func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) implementsGraphQLInterfaceUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult() {
}

func __unmarshalUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult(b []byte, v *UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GrantCategory":
		*v = new(UpdateGrantCategoryUpdateGrantCategory)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateGrantCategoryUpdateGrantCategoryInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateGrantCategoryUpdateGrantCategoryNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GrantCategoryResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult(v *UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateGrantCategoryUpdateGrantCategory:
		typename = "GrantCategory"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateGrantCategoryUpdateGrantCategory
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError:
		typename = "InvalidInputError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateGrantCategoryUpdateGrantCategoryInvalidInputError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateGrantCategoryUpdateGrantCategoryNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateGrantCategoryUpdateGrantCategoryNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateGrantCategoryUpdateGrantCategoryGrantCategoryResult: "%T"`, v)
	}
}

// UpdateGrantCategoryUpdateGrantCategoryInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateGrantCategoryUpdateGrantCategoryInvalidInputError struct {
	Typename          *string `json:"__typename"`
	InvalidInputError `json:"-"`
}

// GetTypename returns UpdateGrantCategoryUpdateGrantCategoryInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateGrantCategoryUpdateGrantCategoryInvalidInputError.Message, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) GetMessage() string {
	return v.InvalidInputError.Message
}

func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGrantCategoryUpdateGrantCategoryInvalidInputError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGrantCategoryUpdateGrantCategoryInvalidInputError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidInputError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateGrantCategoryUpdateGrantCategoryInvalidInputError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGrantCategoryUpdateGrantCategoryInvalidInputError) __premarshalJSON() (*__premarshalUpdateGrantCategoryUpdateGrantCategoryInvalidInputError, error) {
	var retval __premarshalUpdateGrantCategoryUpdateGrantCategoryInvalidInputError

	retval.Typename = v.Typename
	retval.Message = v.InvalidInputError.Message
	return &retval, nil
}

// UpdateGrantCategoryUpdateGrantCategoryNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateGrantCategoryUpdateGrantCategoryNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateGrantCategoryUpdateGrantCategoryNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateGrantCategoryUpdateGrantCategoryNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGrantCategoryUpdateGrantCategoryNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGrantCategoryUpdateGrantCategoryNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateGrantCategoryUpdateGrantCategoryNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGrantCategoryUpdateGrantCategoryNotFoundError) __premarshalJSON() (*__premarshalUpdateGrantCategoryUpdateGrantCategoryNotFoundError, error) {
	var retval __premarshalUpdateGrantCategoryUpdateGrantCategoryNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError, error) {
	var retval __premarshalUpdateGrantCategoryUpdateGrantCategoryPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateIdentityStoreMasterFlagResponse is returned by UpdateIdentityStoreMasterFlag on success.
type UpdateIdentityStoreMasterFlagResponse struct {
	UpdateIdentityStoreMasterFlag UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult `json:"-"`
}

// GetUpdateIdentityStoreMasterFlag returns UpdateIdentityStoreMasterFlagResponse.UpdateIdentityStoreMasterFlag, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagResponse) GetUpdateIdentityStoreMasterFlag() UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult {
	return v.UpdateIdentityStoreMasterFlag
}

func (v *UpdateIdentityStoreMasterFlagResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreMasterFlagResponse
		UpdateIdentityStoreMasterFlag json.RawMessage `json:"updateIdentityStoreMasterFlag"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreMasterFlagResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateIdentityStoreMasterFlag
		src := firstPass.UpdateIdentityStoreMasterFlag
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateIdentityStoreMasterFlagResponse.UpdateIdentityStoreMasterFlag: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateIdentityStoreMasterFlagResponse struct {
	UpdateIdentityStoreMasterFlag json.RawMessage `json:"updateIdentityStoreMasterFlag"`
}

func (v *UpdateIdentityStoreMasterFlagResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreMasterFlagResponse) __premarshalJSON() (*__premarshalUpdateIdentityStoreMasterFlagResponse, error) {
	var retval __premarshalUpdateIdentityStoreMasterFlagResponse

	{

		dst := &retval.UpdateIdentityStoreMasterFlag
		src := v.UpdateIdentityStoreMasterFlag
		var err error
		*dst, err = __marshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateIdentityStoreMasterFlagResponse.UpdateIdentityStoreMasterFlag: %w", err)
		}
	}
	return &retval, nil
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) __premarshalJSON() (*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError, error) {
	var retval __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetTypename() *string {
	return v.Typename
}

// GetId returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetId() string {
	return v.IdentityStore.Id
}

// GetName returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetName() string {
	return v.IdentityStore.Name
}

// GetType returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetType() string {
	return v.IdentityStore.Type
}

// GetDescription returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetMaster() bool {
	return v.IdentityStore.Master
}

// GetNative returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) GetNative() bool {
	return v.IdentityStore.Native
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) __premarshalJSON() (*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore, error) {
	var retval __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult is implemented by the following types:
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError
// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult interface {
	implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError) implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult() {
}
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore) implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult() {
}
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError) implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult() {
}
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult() {
}
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) implementsGraphQLInterfaceUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult() {
}

func __unmarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult(b []byte, v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult(v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagIdentityStoreResult: "%T"`, v)
	}
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError) __premarshalJSON() (*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError, error) {
	var retval __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError, error) {
	var retval __premarshalUpdateIdentityStoreMasterFlagUpdateIdentityStoreMasterFlagPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateIdentityStoreResponse is returned by UpdateIdentityStore on success.
type UpdateIdentityStoreResponse struct {
	UpdateIdentityStore UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult `json:"-"`
}

// GetUpdateIdentityStore returns UpdateIdentityStoreResponse.UpdateIdentityStore, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreResponse) GetUpdateIdentityStore() UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult {
	return v.UpdateIdentityStore
}

func (v *UpdateIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreResponse
		UpdateIdentityStore json.RawMessage `json:"updateIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateIdentityStore
		src := firstPass.UpdateIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateIdentityStoreResponse.UpdateIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateIdentityStoreResponse struct {
	UpdateIdentityStore json.RawMessage `json:"updateIdentityStore"`
}

func (v *UpdateIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreResponse) __premarshalJSON() (*__premarshalUpdateIdentityStoreResponse, error) {
	var retval __premarshalUpdateIdentityStoreResponse

	{

		dst := &retval.UpdateIdentityStore
		src := v.UpdateIdentityStore
		var err error
		*dst, err = __marshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateIdentityStoreResponse.UpdateIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type UpdateIdentityStoreUpdateIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns UpdateIdentityStoreUpdateIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns UpdateIdentityStoreUpdateIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns UpdateIdentityStoreUpdateIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns UpdateIdentityStoreUpdateIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns UpdateIdentityStoreUpdateIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns UpdateIdentityStoreUpdateIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns UpdateIdentityStoreUpdateIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns UpdateIdentityStoreUpdateIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *UpdateIdentityStoreUpdateIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *UpdateIdentityStoreUpdateIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStore) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStore, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult is implemented by the following types:
// UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
// UpdateIdentityStoreUpdateIdentityStore
// UpdateIdentityStoreUpdateIdentityStoreInvalidInputError
// UpdateIdentityStoreUpdateIdentityStoreNotFoundError
// UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
type UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStore) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStoreInvalidInputError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}

func __unmarshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(b []byte, v *UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(UpdateIdentityStoreUpdateIdentityStore)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateIdentityStoreUpdateIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateIdentityStoreUpdateIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(v *UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateIdentityStoreUpdateIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// UpdateIdentityStoreUpdateIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateIdentityStoreUpdateIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateIdentityStoreUpdateIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateIdentityStoreUpdateIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnAccessProviderResponse is returned by UpdateRoleAssigneesOnAccessProvider on success.
type UpdateRoleAssigneesOnAccessProviderResponse struct {
	UpdateRoleAssigneesOnAccessProvider UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult `json:"-"`
}

// GetUpdateRoleAssigneesOnAccessProvider returns UpdateRoleAssigneesOnAccessProviderResponse.UpdateRoleAssigneesOnAccessProvider, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderResponse) GetUpdateRoleAssigneesOnAccessProvider() UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult {
	return v.UpdateRoleAssigneesOnAccessProvider
}

func (v *UpdateRoleAssigneesOnAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnAccessProviderResponse
		UpdateRoleAssigneesOnAccessProvider json.RawMessage `json:"updateRoleAssigneesOnAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateRoleAssigneesOnAccessProvider
		src := firstPass.UpdateRoleAssigneesOnAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateRoleAssigneesOnAccessProviderResponse.UpdateRoleAssigneesOnAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnAccessProviderResponse struct {
	UpdateRoleAssigneesOnAccessProvider json.RawMessage `json:"updateRoleAssigneesOnAccessProvider"`
}

func (v *UpdateRoleAssigneesOnAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnAccessProviderResponse) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnAccessProviderResponse, error) {
	var retval __premarshalUpdateRoleAssigneesOnAccessProviderResponse

	{

		dst := &retval.UpdateRoleAssigneesOnAccessProvider
		src := v.UpdateRoleAssigneesOnAccessProvider
		var err error
		*dst, err = __marshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateRoleAssigneesOnAccessProviderResponse.UpdateRoleAssigneesOnAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError, error) {
	var retval __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError, error) {
	var retval __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole includes the requested fields of the GraphQL type Role.
type UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole.Id, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole.Description, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole.Name, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) GetName() string {
	return v.Role.Name
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole, error) {
	var retval __premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult is implemented by the following types:
// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError
// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError
// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError
// UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole
type UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult interface {
	implementsGraphQLInterfaceUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError) implementsGraphQLInterfaceUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult() {
}
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError) implementsGraphQLInterfaceUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult() {
}
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError) implementsGraphQLInterfaceUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult() {
}
func (v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole) implementsGraphQLInterfaceUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult() {
}

func __unmarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult(b []byte, v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult(v *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnAccessProviderUpdateRoleAssigneesOnAccessProviderRoleResult: "%T"`, v)
	}
}

// UpdateRoleAssigneesOnDataObjectResponse is returned by UpdateRoleAssigneesOnDataObject on success.
type UpdateRoleAssigneesOnDataObjectResponse struct {
	UpdateRoleAssigneesOnDataObject UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult `json:"-"`
}

// GetUpdateRoleAssigneesOnDataObject returns UpdateRoleAssigneesOnDataObjectResponse.UpdateRoleAssigneesOnDataObject, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectResponse) GetUpdateRoleAssigneesOnDataObject() UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult {
	return v.UpdateRoleAssigneesOnDataObject
}

func (v *UpdateRoleAssigneesOnDataObjectResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataObjectResponse
		UpdateRoleAssigneesOnDataObject json.RawMessage `json:"updateRoleAssigneesOnDataObject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataObjectResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateRoleAssigneesOnDataObject
		src := firstPass.UpdateRoleAssigneesOnDataObject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateRoleAssigneesOnDataObjectResponse.UpdateRoleAssigneesOnDataObject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataObjectResponse struct {
	UpdateRoleAssigneesOnDataObject json.RawMessage `json:"updateRoleAssigneesOnDataObject"`
}

func (v *UpdateRoleAssigneesOnDataObjectResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataObjectResponse) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataObjectResponse, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataObjectResponse

	{

		dst := &retval.UpdateRoleAssigneesOnDataObject
		src := v.UpdateRoleAssigneesOnDataObject
		var err error
		*dst, err = __marshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateRoleAssigneesOnDataObjectResponse.UpdateRoleAssigneesOnDataObject: %w", err)
		}
	}
	return &retval, nil
}

// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole includes the requested fields of the GraphQL type Role.
type UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole.Id, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole.Description, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole.Name, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) GetName() string {
	return v.Role.Name
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult is implemented by the following types:
// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError
// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError
// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError
// UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole
type UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult interface {
	implementsGraphQLInterfaceUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult() {
}

func __unmarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult(b []byte, v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult(v *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnDataObjectUpdateRoleAssigneesOnDataObjectRoleResult: "%T"`, v)
	}
}

// UpdateRoleAssigneesOnDataSourceResponse is returned by UpdateRoleAssigneesOnDataSource on success.
type UpdateRoleAssigneesOnDataSourceResponse struct {
	UpdateRoleAssigneesOnDataSource UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult `json:"-"`
}

// GetUpdateRoleAssigneesOnDataSource returns UpdateRoleAssigneesOnDataSourceResponse.UpdateRoleAssigneesOnDataSource, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceResponse) GetUpdateRoleAssigneesOnDataSource() UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult {
	return v.UpdateRoleAssigneesOnDataSource
}

func (v *UpdateRoleAssigneesOnDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataSourceResponse
		UpdateRoleAssigneesOnDataSource json.RawMessage `json:"updateRoleAssigneesOnDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateRoleAssigneesOnDataSource
		src := firstPass.UpdateRoleAssigneesOnDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateRoleAssigneesOnDataSourceResponse.UpdateRoleAssigneesOnDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataSourceResponse struct {
	UpdateRoleAssigneesOnDataSource json.RawMessage `json:"updateRoleAssigneesOnDataSource"`
}

func (v *UpdateRoleAssigneesOnDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataSourceResponse) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataSourceResponse, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataSourceResponse

	{

		dst := &retval.UpdateRoleAssigneesOnDataSource
		src := v.UpdateRoleAssigneesOnDataSource
		var err error
		*dst, err = __marshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateRoleAssigneesOnDataSourceResponse.UpdateRoleAssigneesOnDataSource: %w", err)
		}
	}
	return &retval, nil
}

// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole includes the requested fields of the GraphQL type Role.
type UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole.Id, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole.Description, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole.Name, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) GetName() string {
	return v.Role.Name
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole, error) {
	var retval __premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult is implemented by the following types:
// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError
// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError
// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError
// UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole
type UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult interface {
	implementsGraphQLInterfaceUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult() {
}
func (v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole) implementsGraphQLInterfaceUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult() {
}

func __unmarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult(b []byte, v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult(v *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnDataSourceUpdateRoleAssigneesOnDataSourceRoleResult: "%T"`, v)
	}
}

// UpdateRoleAssigneesOnIdentityStoreResponse is returned by UpdateRoleAssigneesOnIdentityStore on success.
type UpdateRoleAssigneesOnIdentityStoreResponse struct {
	UpdateRoleAssigneesOnIdentityStore UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult `json:"-"`
}

// GetUpdateRoleAssigneesOnIdentityStore returns UpdateRoleAssigneesOnIdentityStoreResponse.UpdateRoleAssigneesOnIdentityStore, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreResponse) GetUpdateRoleAssigneesOnIdentityStore() UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult {
	return v.UpdateRoleAssigneesOnIdentityStore
}

func (v *UpdateRoleAssigneesOnIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnIdentityStoreResponse
		UpdateRoleAssigneesOnIdentityStore json.RawMessage `json:"updateRoleAssigneesOnIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateRoleAssigneesOnIdentityStore
		src := firstPass.UpdateRoleAssigneesOnIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateRoleAssigneesOnIdentityStoreResponse.UpdateRoleAssigneesOnIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnIdentityStoreResponse struct {
	UpdateRoleAssigneesOnIdentityStore json.RawMessage `json:"updateRoleAssigneesOnIdentityStore"`
}

func (v *UpdateRoleAssigneesOnIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnIdentityStoreResponse) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnIdentityStoreResponse, error) {
	var retval __premarshalUpdateRoleAssigneesOnIdentityStoreResponse

	{

		dst := &retval.UpdateRoleAssigneesOnIdentityStore
		src := v.UpdateRoleAssigneesOnIdentityStore
		var err error
		*dst, err = __marshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateRoleAssigneesOnIdentityStoreResponse.UpdateRoleAssigneesOnIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError) GetTypename() *string {
	return v.Typename
}

// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError, error) {
	var retval __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError, error) {
	var retval __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole includes the requested fields of the GraphQL type Role.
type UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole struct {
	Typename *string `json:"__typename"`
	Role     `json:"-"`
}

// GetTypename returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) GetTypename() *string {
	return v.Typename
}

// GetId returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole.Id, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) GetId() string {
	return v.Role.Id
}

// GetDescription returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole.Description, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) GetDescription() string {
	return v.Role.Description
}

// GetName returns UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole.Name, and is useful for accessing the field via an interface.
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) GetName() string {
	return v.Role.Name
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Role)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Description string `json:"description"`

	Name string `json:"name"`
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) __premarshalJSON() (*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole, error) {
	var retval __premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole

	retval.Typename = v.Typename
	retval.Id = v.Role.Id
	retval.Description = v.Role.Description
	retval.Name = v.Role.Name
	return &retval, nil
}

// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult includes the requested fields of the GraphQL interface RoleResult.
//
// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult is implemented by the following types:
// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError
// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError
// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError
// UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole
type UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult interface {
	implementsGraphQLInterfaceUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError) implementsGraphQLInterfaceUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult() {
}
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError) implementsGraphQLInterfaceUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult() {
}
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError) implementsGraphQLInterfaceUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult() {
}
func (v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole) implementsGraphQLInterfaceUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult() {
}

func __unmarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult(b []byte, v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidInputError":
		*v = new(UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RoleResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult(v *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole:
		typename = "Role"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRole
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateRoleAssigneesOnIdentityStoreUpdateRoleAssigneesOnIdentityStoreRoleResult: "%T"`, v)
	}
}

// UpdateUserResponse is returned by UpdateUser on success.
type UpdateUserResponse struct {
	UpdateUser UpdateUserUpdateUserUserResult `json:"-"`
}

// GetUpdateUser returns UpdateUserResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *UpdateUserResponse) GetUpdateUser() UpdateUserUpdateUserUserResult { return v.UpdateUser }

func (v *UpdateUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserResponse
		UpdateUser json.RawMessage `json:"updateUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateUser
		src := firstPass.UpdateUser
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateUserUpdateUserUserResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateUserResponse.UpdateUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateUserResponse struct {
	UpdateUser json.RawMessage `json:"updateUser"`
}

func (v *UpdateUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserResponse) __premarshalJSON() (*__premarshalUpdateUserResponse, error) {
	var retval __premarshalUpdateUserResponse

	{

		dst := &retval.UpdateUser
		src := v.UpdateUser
		var err error
		*dst, err = __marshalUpdateUserUpdateUserUserResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateUserResponse.UpdateUser: %w", err)
		}
	}
	return &retval, nil
}

// UpdateUserUpdateUser includes the requested fields of the GraphQL type User.
type UpdateUserUpdateUser struct {
	Typename *string `json:"__typename"`
	User     `json:"-"`
}

// GetTypename returns UpdateUserUpdateUser.Typename, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetTypename() *string { return v.Typename }

// GetId returns UpdateUserUpdateUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetId() string { return v.User.Id }

// GetName returns UpdateUserUpdateUser.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetName() string { return v.User.Name }

// GetEmail returns UpdateUserUpdateUser.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetEmail() *string { return v.User.Email }

// GetIsRaitoUser returns UpdateUserUpdateUser.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetIsRaitoUser() bool { return v.User.IsRaitoUser }

// GetType returns UpdateUserUpdateUser.Type, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetType() UserType { return v.User.Type }

func (v *UpdateUserUpdateUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserUpdateUser
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserUpdateUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.User)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateUserUpdateUser struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Email *string `json:"email"`

	IsRaitoUser bool `json:"isRaitoUser"`

	Type UserType `json:"type"`
}

func (v *UpdateUserUpdateUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserUpdateUser) __premarshalJSON() (*__premarshalUpdateUserUpdateUser, error) {
	var retval __premarshalUpdateUserUpdateUser

	retval.Typename = v.Typename
	retval.Id = v.User.Id
	retval.Name = v.User.Name
	retval.Email = v.User.Email
	retval.IsRaitoUser = v.User.IsRaitoUser
	retval.Type = v.User.Type
	return &retval, nil
}

// UpdateUserUpdateUserInvalidEmailError includes the requested fields of the GraphQL type InvalidEmailError.
type UpdateUserUpdateUserInvalidEmailError struct {
	Typename          *string `json:"__typename"`
	InvalidEmailError `json:"-"`
}

// GetTypename returns UpdateUserUpdateUserInvalidEmailError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserInvalidEmailError) GetTypename() *string { return v.Typename }

// GetErrEmail returns UpdateUserUpdateUserInvalidEmailError.ErrEmail, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserInvalidEmailError) GetErrEmail() string {
	return v.InvalidEmailError.ErrEmail
}

// GetMessage returns UpdateUserUpdateUserInvalidEmailError.Message, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserInvalidEmailError) GetMessage() string {
	return v.InvalidEmailError.Message
}

func (v *UpdateUserUpdateUserInvalidEmailError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserUpdateUserInvalidEmailError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserUpdateUserInvalidEmailError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InvalidEmailError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateUserUpdateUserInvalidEmailError struct {
	Typename *string `json:"__typename"`

	ErrEmail string `json:"errEmail"`

	Message string `json:"message"`
}

func (v *UpdateUserUpdateUserInvalidEmailError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserUpdateUserInvalidEmailError) __premarshalJSON() (*__premarshalUpdateUserUpdateUserInvalidEmailError, error) {
	var retval __premarshalUpdateUserUpdateUserInvalidEmailError

	retval.Typename = v.Typename
	retval.ErrEmail = v.InvalidEmailError.ErrEmail
	retval.Message = v.InvalidEmailError.Message
	return &retval, nil
}

// UpdateUserUpdateUserInvalidInputError includes the requested fields of the GraphQL type InvalidInputError.
type UpdateUserUpdateUserInvalidInputError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateUserUpdateUserInvalidInputError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserInvalidInputError) GetTypename() *string { return v.Typename }

// UpdateUserUpdateUserNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateUserUpdateUserNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateUserUpdateUserNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns UpdateUserUpdateUserNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserNotFoundError) GetMessage() string { return v.NotFoundError.Message }

func (v *UpdateUserUpdateUserNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserUpdateUserNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserUpdateUserNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateUserUpdateUserNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateUserUpdateUserNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserUpdateUserNotFoundError) __premarshalJSON() (*__premarshalUpdateUserUpdateUserNotFoundError, error) {
	var retval __premarshalUpdateUserUpdateUserNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateUserUpdateUserPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateUserUpdateUserPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateUserUpdateUserPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns UpdateUserUpdateUserPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateUserUpdateUserPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserUpdateUserPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserUpdateUserPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateUserUpdateUserPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateUserUpdateUserPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserUpdateUserPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateUserUpdateUserPermissionDeniedError, error) {
	var retval __premarshalUpdateUserUpdateUserPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateUserUpdateUserUserResult includes the requested fields of the GraphQL interface UserResult.
//
// UpdateUserUpdateUserUserResult is implemented by the following types:
// UpdateUserUpdateUserInvalidEmailError
// UpdateUserUpdateUserInvalidInputError
// UpdateUserUpdateUserNotFoundError
// UpdateUserUpdateUserPermissionDeniedError
// UpdateUserUpdateUser
type UpdateUserUpdateUserUserResult interface {
	implementsGraphQLInterfaceUpdateUserUpdateUserUserResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateUserUpdateUserInvalidEmailError) implementsGraphQLInterfaceUpdateUserUpdateUserUserResult() {
}
func (v *UpdateUserUpdateUserInvalidInputError) implementsGraphQLInterfaceUpdateUserUpdateUserUserResult() {
}
func (v *UpdateUserUpdateUserNotFoundError) implementsGraphQLInterfaceUpdateUserUpdateUserUserResult() {
}
func (v *UpdateUserUpdateUserPermissionDeniedError) implementsGraphQLInterfaceUpdateUserUpdateUserUserResult() {
}
func (v *UpdateUserUpdateUser) implementsGraphQLInterfaceUpdateUserUpdateUserUserResult() {}

func __unmarshalUpdateUserUpdateUserUserResult(b []byte, v *UpdateUserUpdateUserUserResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidEmailError":
		*v = new(UpdateUserUpdateUserInvalidEmailError)
		return json.Unmarshal(b, *v)
	case "InvalidInputError":
		*v = new(UpdateUserUpdateUserInvalidInputError)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateUserUpdateUserNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateUserUpdateUserPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(UpdateUserUpdateUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateUserUpdateUserUserResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateUserUpdateUserUserResult(v *UpdateUserUpdateUserUserResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateUserUpdateUserInvalidEmailError:
		typename = "InvalidEmailError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateUserUpdateUserInvalidEmailError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateUserUpdateUserInvalidInputError:
		typename = "InvalidInputError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateUserUpdateUserInvalidInputError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateUserUpdateUserNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateUserUpdateUserNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateUserUpdateUserPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateUserUpdateUserPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateUserUpdateUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateUserUpdateUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateUserUpdateUserUserResult: "%T"`, v)
	}
}

// User includes the GraphQL fields of User requested by the fragment User.
type User struct {
	Id          string   `json:"id"`
	Name        string   `json:"name"`
	Email       *string  `json:"email"`
	IsRaitoUser bool     `json:"isRaitoUser"`
	Type        UserType `json:"type"`
}

// GetId returns User.Id, and is useful for accessing the field via an interface.
func (v *User) GetId() string { return v.Id }

// GetName returns User.Name, and is useful for accessing the field via an interface.
func (v *User) GetName() string { return v.Name }

// GetEmail returns User.Email, and is useful for accessing the field via an interface.
func (v *User) GetEmail() *string { return v.Email }

// GetIsRaitoUser returns User.IsRaitoUser, and is useful for accessing the field via an interface.
func (v *User) GetIsRaitoUser() bool { return v.IsRaitoUser }

// GetType returns User.Type, and is useful for accessing the field via an interface.
func (v *User) GetType() UserType { return v.Type }

type UserInput struct {
	Name            *string    `json:"name,omitempty"`
	Email           *string    `json:"email,omitempty"`
	Type            *UserType  `json:"type,omitempty"`
	SlackUserId     *string    `json:"slackUserId,omitempty"`
	DelegateTo      *string    `json:"delegateTo,omitempty"`
	DelegationStart *time.Time `json:"delegationStart,omitempty"`
	DelegationEnd   *time.Time `json:"delegationEnd,omitempty"`
}

// GetName returns UserInput.Name, and is useful for accessing the field via an interface.
func (v *UserInput) GetName() *string { return v.Name }

// GetEmail returns UserInput.Email, and is useful for accessing the field via an interface.
func (v *UserInput) GetEmail() *string { return v.Email }

// GetType returns UserInput.Type, and is useful for accessing the field via an interface.
func (v *UserInput) GetType() *UserType { return v.Type }

// GetSlackUserId returns UserInput.SlackUserId, and is useful for accessing the field via an interface.
func (v *UserInput) GetSlackUserId() *string { return v.SlackUserId }

// GetDelegateTo returns UserInput.DelegateTo, and is useful for accessing the field via an interface.
func (v *UserInput) GetDelegateTo() *string { return v.DelegateTo }

// GetDelegationStart returns UserInput.DelegationStart, and is useful for accessing the field via an interface.
func (v *UserInput) GetDelegationStart() *time.Time { return v.DelegationStart }

// GetDelegationEnd returns UserInput.DelegationEnd, and is useful for accessing the field via an interface.
func (v *UserInput) GetDelegationEnd() *time.Time { return v.DelegationEnd }

type UserType string

const (
	UserTypeHuman   UserType = "Human"
	UserTypeMachine UserType = "Machine"
)

var AllUserType = []UserType{
	UserTypeHuman,
	UserTypeMachine,
}

// WhatAbacRule includes the GraphQL fields of WhatAbacRule requested by the fragment WhatAbacRule.
type WhatAbacRule struct {
	Permissions       []string `json:"permissions"`
	GlobalPermissions []string `json:"globalPermissions"`
	DoTypes           []string `json:"doTypes"`
	RuleJson          *string  `json:"ruleJson"`
}

// GetPermissions returns WhatAbacRule.Permissions, and is useful for accessing the field via an interface.
func (v *WhatAbacRule) GetPermissions() []string { return v.Permissions }

// GetGlobalPermissions returns WhatAbacRule.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *WhatAbacRule) GetGlobalPermissions() []string { return v.GlobalPermissions }

// GetDoTypes returns WhatAbacRule.DoTypes, and is useful for accessing the field via an interface.
func (v *WhatAbacRule) GetDoTypes() []string { return v.DoTypes }

// GetRuleJson returns WhatAbacRule.RuleJson, and is useful for accessing the field via an interface.
func (v *WhatAbacRule) GetRuleJson() *string { return v.RuleJson }

type WhatAbacRuleInput struct {
	DoTypes           []string                      `json:"doTypes"`
	Permissions       []string                      `json:"permissions"`
	GlobalPermissions []string                      `json:"globalPermissions"`
	Scope             []string                      `json:"scope"`
	Rule              AbacComparisonExpressionInput `json:"rule"`
}

// GetDoTypes returns WhatAbacRuleInput.DoTypes, and is useful for accessing the field via an interface.
func (v *WhatAbacRuleInput) GetDoTypes() []string { return v.DoTypes }

// GetPermissions returns WhatAbacRuleInput.Permissions, and is useful for accessing the field via an interface.
func (v *WhatAbacRuleInput) GetPermissions() []string { return v.Permissions }

// GetGlobalPermissions returns WhatAbacRuleInput.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *WhatAbacRuleInput) GetGlobalPermissions() []string { return v.GlobalPermissions }

// GetScope returns WhatAbacRuleInput.Scope, and is useful for accessing the field via an interface.
func (v *WhatAbacRuleInput) GetScope() []string { return v.Scope }

// GetRule returns WhatAbacRuleInput.Rule, and is useful for accessing the field via an interface.
func (v *WhatAbacRuleInput) GetRule() AbacComparisonExpressionInput { return v.Rule }

// WhoAbacRule includes the GraphQL fields of WhoAbacRule requested by the fragment WhoAbacRule.
type WhoAbacRule struct {
	PromiseDuration *int64            `json:"promiseDuration"`
	Type            AccessWhoItemType `json:"type"`
	RuleJson        *string           `json:"ruleJson"`
}

// GetPromiseDuration returns WhoAbacRule.PromiseDuration, and is useful for accessing the field via an interface.
func (v *WhoAbacRule) GetPromiseDuration() *int64 { return v.PromiseDuration }

// GetType returns WhoAbacRule.Type, and is useful for accessing the field via an interface.
func (v *WhoAbacRule) GetType() AccessWhoItemType { return v.Type }

// GetRuleJson returns WhoAbacRule.RuleJson, and is useful for accessing the field via an interface.
func (v *WhoAbacRule) GetRuleJson() *string { return v.RuleJson }

type WhoAbacRuleInput struct {
	Rule            AbacComparisonExpressionInput `json:"rule"`
	Type            AccessWhoItemType             `json:"type"`
	PromiseDuration *int64                        `json:"promiseDuration,omitempty"`
}

// GetRule returns WhoAbacRuleInput.Rule, and is useful for accessing the field via an interface.
func (v *WhoAbacRuleInput) GetRule() AbacComparisonExpressionInput { return v.Rule }

// GetType returns WhoAbacRuleInput.Type, and is useful for accessing the field via an interface.
func (v *WhoAbacRuleInput) GetType() AccessWhoItemType { return v.Type }

// GetPromiseDuration returns WhoAbacRuleInput.PromiseDuration, and is useful for accessing the field via an interface.
func (v *WhoAbacRuleInput) GetPromiseDuration() *int64 { return v.PromiseDuration }

type WhoAndWhatType string

const (
	WhoAndWhatTypeStatic  WhoAndWhatType = "Static"
	WhoAndWhatTypeDynamic WhoAndWhatType = "Dynamic"
	WhoAndWhatTypeUnknown WhoAndWhatType = "Unknown"
)

var AllWhoAndWhatType = []WhoAndWhatType{
	WhoAndWhatTypeStatic,
	WhoAndWhatTypeDynamic,
	WhoAndWhatTypeUnknown,
}

type WhoItemInput struct {
	User            *string            `json:"user,omitempty"`
	Group           *string            `json:"group,omitempty"`
	AccessProvider  *string            `json:"accessProvider,omitempty"`
	DataSource      *string            `json:"dataSource,omitempty"`
	Recipient       *string            `json:"recipient,omitempty"`
	ExpiresAt       *time.Time         `json:"expiresAt,omitempty"`
	ExpiresAfter    *int64             `json:"expiresAfter,omitempty"`
	Type            *AccessWhoItemType `json:"type,omitempty"`
	PromiseDuration *int64             `json:"promiseDuration,omitempty"`
}

// GetUser returns WhoItemInput.User, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetUser() *string { return v.User }

// GetGroup returns WhoItemInput.Group, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetGroup() *string { return v.Group }

// GetAccessProvider returns WhoItemInput.AccessProvider, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetAccessProvider() *string { return v.AccessProvider }

// GetDataSource returns WhoItemInput.DataSource, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetDataSource() *string { return v.DataSource }

// GetRecipient returns WhoItemInput.Recipient, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetRecipient() *string { return v.Recipient }

// GetExpiresAt returns WhoItemInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetExpiresAfter returns WhoItemInput.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetExpiresAfter() *int64 { return v.ExpiresAfter }

// GetType returns WhoItemInput.Type, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetType() *AccessWhoItemType { return v.Type }

// GetPromiseDuration returns WhoItemInput.PromiseDuration, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetPromiseDuration() *int64 { return v.PromiseDuration }

// __ActivateAccessProviderInput is used internally by genqlient
type __ActivateAccessProviderInput struct {
	Id string `json:"id"`
}

// GetId returns __ActivateAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__ActivateAccessProviderInput) GetId() string { return v.Id }

// __AddIdentityStoreToDataSourceInput is used internally by genqlient
type __AddIdentityStoreToDataSourceInput struct {
	DsId string `json:"dsId"`
	IsId string `json:"isId"`
}

// GetDsId returns __AddIdentityStoreToDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__AddIdentityStoreToDataSourceInput) GetDsId() string { return v.DsId }

// GetIsId returns __AddIdentityStoreToDataSourceInput.IsId, and is useful for accessing the field via an interface.
func (v *__AddIdentityStoreToDataSourceInput) GetIsId() string { return v.IsId }

// __AssignGlobalRoleInput is used internally by genqlient
type __AssignGlobalRoleInput struct {
	Role string   `json:"role"`
	To   []string `json:"to"`
}

// GetRole returns __AssignGlobalRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__AssignGlobalRoleInput) GetRole() string { return v.Role }

// GetTo returns __AssignGlobalRoleInput.To, and is useful for accessing the field via an interface.
func (v *__AssignGlobalRoleInput) GetTo() []string { return v.To }

// __AssignRoleOnAccessProviderInput is used internally by genqlient
type __AssignRoleOnAccessProviderInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __AssignRoleOnAccessProviderInput.Role, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnAccessProviderInput) GetRole() string { return v.Role }

// GetResourceId returns __AssignRoleOnAccessProviderInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnAccessProviderInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __AssignRoleOnAccessProviderInput.To, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnAccessProviderInput) GetTo() []string { return v.To }

// __AssignRoleOnDataObjectInput is used internally by genqlient
type __AssignRoleOnDataObjectInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __AssignRoleOnDataObjectInput.Role, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataObjectInput) GetRole() string { return v.Role }

// GetResourceId returns __AssignRoleOnDataObjectInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataObjectInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __AssignRoleOnDataObjectInput.To, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataObjectInput) GetTo() []string { return v.To }

// __AssignRoleOnDataSourceInput is used internally by genqlient
type __AssignRoleOnDataSourceInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __AssignRoleOnDataSourceInput.Role, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataSourceInput) GetRole() string { return v.Role }

// GetResourceId returns __AssignRoleOnDataSourceInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataSourceInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __AssignRoleOnDataSourceInput.To, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnDataSourceInput) GetTo() []string { return v.To }

// __AssignRoleOnIdentityStoreInput is used internally by genqlient
type __AssignRoleOnIdentityStoreInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __AssignRoleOnIdentityStoreInput.Role, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnIdentityStoreInput) GetRole() string { return v.Role }

// GetResourceId returns __AssignRoleOnIdentityStoreInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnIdentityStoreInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __AssignRoleOnIdentityStoreInput.To, and is useful for accessing the field via an interface.
func (v *__AssignRoleOnIdentityStoreInput) GetTo() []string { return v.To }

// __CreateAccessProviderInput is used internally by genqlient
type __CreateAccessProviderInput struct {
	Ap AccessProviderInput `json:"ap"`
}

// GetAp returns __CreateAccessProviderInput.Ap, and is useful for accessing the field via an interface.
func (v *__CreateAccessProviderInput) GetAp() AccessProviderInput { return v.Ap }

// __CreateDataSourceInput is used internally by genqlient
type __CreateDataSourceInput struct {
	Input DataSourceInput `json:"input"`
}

// GetInput returns __CreateDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataSourceInput) GetInput() DataSourceInput { return v.Input }

// __CreateGrantCategoryInput is used internally by genqlient
type __CreateGrantCategoryInput struct {
	Input GrantCategoryInput `json:"input"`
}

// GetInput returns __CreateGrantCategoryInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateGrantCategoryInput) GetInput() GrantCategoryInput { return v.Input }

// __CreateIdentityStoreInput is used internally by genqlient
type __CreateIdentityStoreInput struct {
	Input IdentityStoreInput `json:"input"`
}

// GetInput returns __CreateIdentityStoreInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateIdentityStoreInput) GetInput() IdentityStoreInput { return v.Input }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	Input UserInput `json:"input"`
}

// GetInput returns __CreateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetInput() UserInput { return v.Input }

// __DataObjectByExternalIdInput is used internally by genqlient
type __DataObjectByExternalIdInput struct {
	Fullname          string `json:"fullname"`
	DataSourceId      string `json:"dataSourceId"`
	IncludeDataSource bool   `json:"includeDataSource"`
}

// GetFullname returns __DataObjectByExternalIdInput.Fullname, and is useful for accessing the field via an interface.
func (v *__DataObjectByExternalIdInput) GetFullname() string { return v.Fullname }

// GetDataSourceId returns __DataObjectByExternalIdInput.DataSourceId, and is useful for accessing the field via an interface.
func (v *__DataObjectByExternalIdInput) GetDataSourceId() string { return v.DataSourceId }

// GetIncludeDataSource returns __DataObjectByExternalIdInput.IncludeDataSource, and is useful for accessing the field via an interface.
func (v *__DataObjectByExternalIdInput) GetIncludeDataSource() bool { return v.IncludeDataSource }

// __DataSourceIdentityStoresInput is used internally by genqlient
type __DataSourceIdentityStoresInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceIdentityStoresInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceIdentityStoresInput) GetId() string { return v.Id }

// __DataSourceMaskInformationInput is used internally by genqlient
type __DataSourceMaskInformationInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceMaskInformationInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceMaskInformationInput) GetId() string { return v.Id }

// __DeactivateAccessProviderInput is used internally by genqlient
type __DeactivateAccessProviderInput struct {
	Id string `json:"id"`
}

// GetId returns __DeactivateAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__DeactivateAccessProviderInput) GetId() string { return v.Id }

// __DeleteAccessProviderInput is used internally by genqlient
type __DeleteAccessProviderInput struct {
	Id            string `json:"id"`
	OverrideLocks *bool  `json:"overrideLocks,omitempty"`
}

// GetId returns __DeleteAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteAccessProviderInput) GetId() string { return v.Id }

// GetOverrideLocks returns __DeleteAccessProviderInput.OverrideLocks, and is useful for accessing the field via an interface.
func (v *__DeleteAccessProviderInput) GetOverrideLocks() *bool { return v.OverrideLocks }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __DeleteGrantCategoryInput is used internally by genqlient
type __DeleteGrantCategoryInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteGrantCategoryInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteGrantCategoryInput) GetId() string { return v.Id }

// __DeleteIdentityStoreInput is used internally by genqlient
type __DeleteIdentityStoreInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteIdentityStoreInput) GetId() string { return v.Id }

// __DeleteUserInput is used internally by genqlient
type __DeleteUserInput struct {
	UId string `json:"uId"`
}

// GetUId returns __DeleteUserInput.UId, and is useful for accessing the field via an interface.
func (v *__DeleteUserInput) GetUId() string { return v.UId }

// __GetAccessProviderInput is used internally by genqlient
type __GetAccessProviderInput struct {
	Id string `json:"id"`
}

// GetId returns __GetAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderInput) GetId() string { return v.Id }

// __GetAccessProviderWhatAccessProvidersInput is used internally by genqlient
type __GetAccessProviderWhatAccessProvidersInput struct {
	Id     string                                       `json:"id"`
	After  *string                                      `json:"after,omitempty"`
	Limit  *int                                         `json:"limit,omitempty"`
	Search *string                                      `json:"search,omitempty"`
	Order  []AccessWhatOrderByInput                     `json:"order"`
	Filter *AccessProviderWhatAccessProviderFilterInput `json:"filter,omitempty"`
}

// GetId returns __GetAccessProviderWhatAccessProvidersInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetId() string { return v.Id }

// GetAfter returns __GetAccessProviderWhatAccessProvidersInput.After, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetAfter() *string { return v.After }

// GetLimit returns __GetAccessProviderWhatAccessProvidersInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetLimit() *int { return v.Limit }

// GetSearch returns __GetAccessProviderWhatAccessProvidersInput.Search, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetSearch() *string { return v.Search }

// GetOrder returns __GetAccessProviderWhatAccessProvidersInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetOrder() []AccessWhatOrderByInput {
	return v.Order
}

// GetFilter returns __GetAccessProviderWhatAccessProvidersInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatAccessProvidersInput) GetFilter() *AccessProviderWhatAccessProviderFilterInput {
	return v.Filter
}

// __GetAccessProviderWhatDataObjectListInput is used internally by genqlient
type __GetAccessProviderWhatDataObjectListInput struct {
	Id     string                   `json:"id"`
	After  *string                  `json:"after,omitempty"`
	Limit  *int                     `json:"limit,omitempty"`
	Filter *AccessWhatFilterInput   `json:"filter,omitempty"`
	Order  []AccessWhatOrderByInput `json:"order"`
}

// GetId returns __GetAccessProviderWhatDataObjectListInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetId() string { return v.Id }

// GetAfter returns __GetAccessProviderWhatDataObjectListInput.After, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetAfter() *string { return v.After }

// GetLimit returns __GetAccessProviderWhatDataObjectListInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetLimit() *int { return v.Limit }

// GetFilter returns __GetAccessProviderWhatDataObjectListInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetFilter() *AccessWhatFilterInput {
	return v.Filter
}

// GetOrder returns __GetAccessProviderWhatDataObjectListInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetOrder() []AccessWhatOrderByInput {
	return v.Order
}

// __GetAccessProviderWhoListInput is used internally by genqlient
type __GetAccessProviderWhoListInput struct {
	Id     string                          `json:"id"`
	After  *string                         `json:"after,omitempty"`
	Limit  *int                            `json:"limit,omitempty"`
	Search *string                         `json:"search,omitempty"`
	Order  []AccessProviderWhoOrderByInput `json:"order"`
}

// GetId returns __GetAccessProviderWhoListInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetId() string { return v.Id }

// GetAfter returns __GetAccessProviderWhoListInput.After, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetAfter() *string { return v.After }

// GetLimit returns __GetAccessProviderWhoListInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetLimit() *int { return v.Limit }

// GetSearch returns __GetAccessProviderWhoListInput.Search, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetSearch() *string { return v.Search }

// GetOrder returns __GetAccessProviderWhoListInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetOrder() []AccessProviderWhoOrderByInput { return v.Order }

// __GetDataObjectInput is used internally by genqlient
type __GetDataObjectInput struct {
	DataObjectId string `json:"dataObjectId"`
}

// GetDataObjectId returns __GetDataObjectInput.DataObjectId, and is useful for accessing the field via an interface.
func (v *__GetDataObjectInput) GetDataObjectId() string { return v.DataObjectId }

// __GetDataSourceInput is used internally by genqlient
type __GetDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __GetDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__GetDataSourceInput) GetId() string { return v.Id }

// __GetGrantCategoryInput is used internally by genqlient
type __GetGrantCategoryInput struct {
	Id string `json:"id"`
}

// GetId returns __GetGrantCategoryInput.Id, and is useful for accessing the field via an interface.
func (v *__GetGrantCategoryInput) GetId() string { return v.Id }

// __GetGroupInput is used internally by genqlient
type __GetGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __GetGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__GetGroupInput) GetId() string { return v.Id }

// __GetIdentityStoreInput is used internally by genqlient
type __GetIdentityStoreInput struct {
	Id string `json:"id"`
}

// GetId returns __GetIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__GetIdentityStoreInput) GetId() string { return v.Id }

// __GetRoleInput is used internally by genqlient
type __GetRoleInput struct {
	Id string `json:"id"`
}

// GetId returns __GetRoleInput.Id, and is useful for accessing the field via an interface.
func (v *__GetRoleInput) GetId() string { return v.Id }

// __GetUserByEmailInput is used internally by genqlient
type __GetUserByEmailInput struct {
	Email string `json:"email"`
}

// GetEmail returns __GetUserByEmailInput.Email, and is useful for accessing the field via an interface.
func (v *__GetUserByEmailInput) GetEmail() string { return v.Email }

// __GetUserInput is used internally by genqlient
type __GetUserInput struct {
	Id string `json:"id"`
}

// GetId returns __GetUserInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserInput) GetId() string { return v.Id }

// __InviteAsRaitoUserInput is used internally by genqlient
type __InviteAsRaitoUserInput struct {
	UId        string `json:"uId"`
	NoPassword *bool  `json:"noPassword,omitempty"`
}

// GetUId returns __InviteAsRaitoUserInput.UId, and is useful for accessing the field via an interface.
func (v *__InviteAsRaitoUserInput) GetUId() string { return v.UId }

// GetNoPassword returns __InviteAsRaitoUserInput.NoPassword, and is useful for accessing the field via an interface.
func (v *__InviteAsRaitoUserInput) GetNoPassword() *bool { return v.NoPassword }

// __ListAccessProviderAbacWhatScopeInput is used internally by genqlient
type __ListAccessProviderAbacWhatScopeInput struct {
	Id     string                   `json:"id"`
	After  *string                  `json:"after,omitempty"`
	Limit  *int                     `json:"limit,omitempty"`
	Search *string                  `json:"search,omitempty"`
	Order  []AccessWhatOrderByInput `json:"order"`
}

// GetId returns __ListAccessProviderAbacWhatScopeInput.Id, and is useful for accessing the field via an interface.
func (v *__ListAccessProviderAbacWhatScopeInput) GetId() string { return v.Id }

// GetAfter returns __ListAccessProviderAbacWhatScopeInput.After, and is useful for accessing the field via an interface.
func (v *__ListAccessProviderAbacWhatScopeInput) GetAfter() *string { return v.After }

// GetLimit returns __ListAccessProviderAbacWhatScopeInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListAccessProviderAbacWhatScopeInput) GetLimit() *int { return v.Limit }

// GetSearch returns __ListAccessProviderAbacWhatScopeInput.Search, and is useful for accessing the field via an interface.
func (v *__ListAccessProviderAbacWhatScopeInput) GetSearch() *string { return v.Search }

// GetOrder returns __ListAccessProviderAbacWhatScopeInput.Order, and is useful for accessing the field via an interface.
func (v *__ListAccessProviderAbacWhatScopeInput) GetOrder() []AccessWhatOrderByInput { return v.Order }

// __ListAccessProvidersInput is used internally by genqlient
type __ListAccessProvidersInput struct {
	After  *string                      `json:"after,omitempty"`
	Limit  *int                         `json:"limit,omitempty"`
	Filter *AccessProviderFilterInput   `json:"filter,omitempty"`
	Order  []AccessProviderOrderByInput `json:"order"`
}

// GetAfter returns __ListAccessProvidersInput.After, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetAfter() *string { return v.After }

// GetLimit returns __ListAccessProvidersInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListAccessProvidersInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetFilter() *AccessProviderFilterInput { return v.Filter }

// GetOrder returns __ListAccessProvidersInput.Order, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetOrder() []AccessProviderOrderByInput { return v.Order }

// __ListDataObjectsInput is used internally by genqlient
type __ListDataObjectsInput struct {
	After  *string                  `json:"after,omitempty"`
	Limit  *int                     `json:"limit,omitempty"`
	Filter *DataObjectFilterInput   `json:"filter,omitempty"`
	Order  []DataObjectOrderByInput `json:"order"`
}

// GetAfter returns __ListDataObjectsInput.After, and is useful for accessing the field via an interface.
func (v *__ListDataObjectsInput) GetAfter() *string { return v.After }

// GetLimit returns __ListDataObjectsInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListDataObjectsInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListDataObjectsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListDataObjectsInput) GetFilter() *DataObjectFilterInput { return v.Filter }

// GetOrder returns __ListDataObjectsInput.Order, and is useful for accessing the field via an interface.
func (v *__ListDataObjectsInput) GetOrder() []DataObjectOrderByInput { return v.Order }

// __ListDataSourcesInput is used internally by genqlient
type __ListDataSourcesInput struct {
	After  *string                  `json:"after,omitempty"`
	Limit  *int                     `json:"limit,omitempty"`
	Filter *DataSourceFilterInput   `json:"filter,omitempty"`
	Search *string                  `json:"search,omitempty"`
	Order  []DataSourceOrderByInput `json:"order"`
}

// GetAfter returns __ListDataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetAfter() *string { return v.After }

// GetLimit returns __ListDataSourcesInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListDataSourcesInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetFilter() *DataSourceFilterInput { return v.Filter }

// GetSearch returns __ListDataSourcesInput.Search, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetSearch() *string { return v.Search }

// GetOrder returns __ListDataSourcesInput.Order, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetOrder() []DataSourceOrderByInput { return v.Order }

// __ListGroupsInput is used internally by genqlient
type __ListGroupsInput struct {
	After  *string             `json:"after,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	Filter *GroupFilterInput   `json:"filter,omitempty"`
	Order  []GroupOrderByInput `json:"order"`
}

// GetAfter returns __ListGroupsInput.After, and is useful for accessing the field via an interface.
func (v *__ListGroupsInput) GetAfter() *string { return v.After }

// GetLimit returns __ListGroupsInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListGroupsInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListGroupsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListGroupsInput) GetFilter() *GroupFilterInput { return v.Filter }

// GetOrder returns __ListGroupsInput.Order, and is useful for accessing the field via an interface.
func (v *__ListGroupsInput) GetOrder() []GroupOrderByInput { return v.Order }

// __ListIdentityStoresInput is used internally by genqlient
type __ListIdentityStoresInput struct {
	After  *string                     `json:"after,omitempty"`
	Limit  *int                        `json:"limit,omitempty"`
	Search *string                     `json:"search,omitempty"`
	Filter *IdentityStoreFilterInput   `json:"filter,omitempty"`
	Order  []IdentityStoreOrderByInput `json:"order"`
}

// GetAfter returns __ListIdentityStoresInput.After, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetAfter() *string { return v.After }

// GetLimit returns __ListIdentityStoresInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetLimit() *int { return v.Limit }

// GetSearch returns __ListIdentityStoresInput.Search, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetSearch() *string { return v.Search }

// GetFilter returns __ListIdentityStoresInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetFilter() *IdentityStoreFilterInput { return v.Filter }

// GetOrder returns __ListIdentityStoresInput.Order, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetOrder() []IdentityStoreOrderByInput { return v.Order }

// __ListRoleAssignmentsInput is used internally by genqlient
type __ListRoleAssignmentsInput struct {
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetAfter returns __ListRoleAssignmentsInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsInput) GetFilter() *RoleAssignmentFilterInput { return v.Filter }

// GetOrder returns __ListRoleAssignmentsInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsInput) GetOrder() []RoleAssignmentOrderInput { return v.Order }

// __ListRoleAssignmentsOnAccessProviderInput is used internally by genqlient
type __ListRoleAssignmentsOnAccessProviderInput struct {
	ApId   string                     `json:"apId"`
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetApId returns __ListRoleAssignmentsOnAccessProviderInput.ApId, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnAccessProviderInput) GetApId() string { return v.ApId }

// GetAfter returns __ListRoleAssignmentsOnAccessProviderInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnAccessProviderInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsOnAccessProviderInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnAccessProviderInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsOnAccessProviderInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnAccessProviderInput) GetFilter() *RoleAssignmentFilterInput {
	return v.Filter
}

// GetOrder returns __ListRoleAssignmentsOnAccessProviderInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnAccessProviderInput) GetOrder() []RoleAssignmentOrderInput {
	return v.Order
}

// __ListRoleAssignmentsOnDataObjectInput is used internally by genqlient
type __ListRoleAssignmentsOnDataObjectInput struct {
	DoId   string                     `json:"doId"`
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetDoId returns __ListRoleAssignmentsOnDataObjectInput.DoId, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataObjectInput) GetDoId() string { return v.DoId }

// GetAfter returns __ListRoleAssignmentsOnDataObjectInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataObjectInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsOnDataObjectInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataObjectInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsOnDataObjectInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataObjectInput) GetFilter() *RoleAssignmentFilterInput {
	return v.Filter
}

// GetOrder returns __ListRoleAssignmentsOnDataObjectInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataObjectInput) GetOrder() []RoleAssignmentOrderInput {
	return v.Order
}

// __ListRoleAssignmentsOnDataSourceInput is used internally by genqlient
type __ListRoleAssignmentsOnDataSourceInput struct {
	DsId   string                     `json:"dsId"`
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetDsId returns __ListRoleAssignmentsOnDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataSourceInput) GetDsId() string { return v.DsId }

// GetAfter returns __ListRoleAssignmentsOnDataSourceInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataSourceInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsOnDataSourceInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataSourceInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsOnDataSourceInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataSourceInput) GetFilter() *RoleAssignmentFilterInput {
	return v.Filter
}

// GetOrder returns __ListRoleAssignmentsOnDataSourceInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnDataSourceInput) GetOrder() []RoleAssignmentOrderInput {
	return v.Order
}

// __ListRoleAssignmentsOnIdentityStoreInput is used internally by genqlient
type __ListRoleAssignmentsOnIdentityStoreInput struct {
	IsId   string                     `json:"isId"`
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetIsId returns __ListRoleAssignmentsOnIdentityStoreInput.IsId, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnIdentityStoreInput) GetIsId() string { return v.IsId }

// GetAfter returns __ListRoleAssignmentsOnIdentityStoreInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnIdentityStoreInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsOnIdentityStoreInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnIdentityStoreInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsOnIdentityStoreInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnIdentityStoreInput) GetFilter() *RoleAssignmentFilterInput {
	return v.Filter
}

// GetOrder returns __ListRoleAssignmentsOnIdentityStoreInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnIdentityStoreInput) GetOrder() []RoleAssignmentOrderInput {
	return v.Order
}

// __ListRoleAssignmentsOnUserInput is used internally by genqlient
type __ListRoleAssignmentsOnUserInput struct {
	UserId string                     `json:"userId"`
	After  *string                    `json:"after,omitempty"`
	Limit  *int                       `json:"limit,omitempty"`
	Filter *RoleAssignmentFilterInput `json:"filter,omitempty"`
	Order  []RoleAssignmentOrderInput `json:"order"`
}

// GetUserId returns __ListRoleAssignmentsOnUserInput.UserId, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnUserInput) GetUserId() string { return v.UserId }

// GetAfter returns __ListRoleAssignmentsOnUserInput.After, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnUserInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRoleAssignmentsOnUserInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnUserInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRoleAssignmentsOnUserInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnUserInput) GetFilter() *RoleAssignmentFilterInput { return v.Filter }

// GetOrder returns __ListRoleAssignmentsOnUserInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRoleAssignmentsOnUserInput) GetOrder() []RoleAssignmentOrderInput { return v.Order }

// __ListRolesInput is used internally by genqlient
type __ListRolesInput struct {
	After  *string            `json:"after,omitempty"`
	Limit  *int               `json:"limit,omitempty"`
	Filter *RoleFilterInput   `json:"filter,omitempty"`
	Order  []RoleOrderByInput `json:"order"`
}

// GetAfter returns __ListRolesInput.After, and is useful for accessing the field via an interface.
func (v *__ListRolesInput) GetAfter() *string { return v.After }

// GetLimit returns __ListRolesInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListRolesInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListRolesInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListRolesInput) GetFilter() *RoleFilterInput { return v.Filter }

// GetOrder returns __ListRolesInput.Order, and is useful for accessing the field via an interface.
func (v *__ListRolesInput) GetOrder() []RoleOrderByInput { return v.Order }

// __RemoveAsRaitoUserInput is used internally by genqlient
type __RemoveAsRaitoUserInput struct {
	UId string `json:"uId"`
}

// GetUId returns __RemoveAsRaitoUserInput.UId, and is useful for accessing the field via an interface.
func (v *__RemoveAsRaitoUserInput) GetUId() string { return v.UId }

// __RemoveIdentityStoreFromDataSourceInput is used internally by genqlient
type __RemoveIdentityStoreFromDataSourceInput struct {
	DsId string `json:"dsId"`
	IsId string `json:"isId"`
}

// GetDsId returns __RemoveIdentityStoreFromDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__RemoveIdentityStoreFromDataSourceInput) GetDsId() string { return v.DsId }

// GetIsId returns __RemoveIdentityStoreFromDataSourceInput.IsId, and is useful for accessing the field via an interface.
func (v *__RemoveIdentityStoreFromDataSourceInput) GetIsId() string { return v.IsId }

// __SetGlobalRolesForUserInput is used internally by genqlient
type __SetGlobalRolesForUserInput struct {
	User  string   `json:"user"`
	Roles []string `json:"roles"`
}

// GetUser returns __SetGlobalRolesForUserInput.User, and is useful for accessing the field via an interface.
func (v *__SetGlobalRolesForUserInput) GetUser() string { return v.User }

// GetRoles returns __SetGlobalRolesForUserInput.Roles, and is useful for accessing the field via an interface.
func (v *__SetGlobalRolesForUserInput) GetRoles() []string { return v.Roles }

// __SetUserPasswordInput is used internally by genqlient
type __SetUserPasswordInput struct {
	UId      string `json:"uId"`
	Password string `json:"password"`
}

// GetUId returns __SetUserPasswordInput.UId, and is useful for accessing the field via an interface.
func (v *__SetUserPasswordInput) GetUId() string { return v.UId }

// GetPassword returns __SetUserPasswordInput.Password, and is useful for accessing the field via an interface.
func (v *__SetUserPasswordInput) GetPassword() string { return v.Password }

// __UnassignGlobalRoleInput is used internally by genqlient
type __UnassignGlobalRoleInput struct {
	Role string   `json:"role"`
	To   []string `json:"to"`
}

// GetRole returns __UnassignGlobalRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__UnassignGlobalRoleInput) GetRole() string { return v.Role }

// GetTo returns __UnassignGlobalRoleInput.To, and is useful for accessing the field via an interface.
func (v *__UnassignGlobalRoleInput) GetTo() []string { return v.To }

// __UnassignRoleFromAccessProviderInput is used internally by genqlient
type __UnassignRoleFromAccessProviderInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __UnassignRoleFromAccessProviderInput.Role, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromAccessProviderInput) GetRole() string { return v.Role }

// GetResourceId returns __UnassignRoleFromAccessProviderInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromAccessProviderInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __UnassignRoleFromAccessProviderInput.To, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromAccessProviderInput) GetTo() []string { return v.To }

// __UnassignRoleFromDataObjectInput is used internally by genqlient
type __UnassignRoleFromDataObjectInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __UnassignRoleFromDataObjectInput.Role, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataObjectInput) GetRole() string { return v.Role }

// GetResourceId returns __UnassignRoleFromDataObjectInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataObjectInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __UnassignRoleFromDataObjectInput.To, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataObjectInput) GetTo() []string { return v.To }

// __UnassignRoleFromDataSourceInput is used internally by genqlient
type __UnassignRoleFromDataSourceInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __UnassignRoleFromDataSourceInput.Role, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataSourceInput) GetRole() string { return v.Role }

// GetResourceId returns __UnassignRoleFromDataSourceInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataSourceInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __UnassignRoleFromDataSourceInput.To, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromDataSourceInput) GetTo() []string { return v.To }

// __UnassignRoleFromIdentityStoreInput is used internally by genqlient
type __UnassignRoleFromIdentityStoreInput struct {
	Role       string   `json:"role"`
	ResourceId string   `json:"resourceId"`
	To         []string `json:"to"`
}

// GetRole returns __UnassignRoleFromIdentityStoreInput.Role, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromIdentityStoreInput) GetRole() string { return v.Role }

// GetResourceId returns __UnassignRoleFromIdentityStoreInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromIdentityStoreInput) GetResourceId() string { return v.ResourceId }

// GetTo returns __UnassignRoleFromIdentityStoreInput.To, and is useful for accessing the field via an interface.
func (v *__UnassignRoleFromIdentityStoreInput) GetTo() []string { return v.To }

// __UpdateAccessProviderInput is used internally by genqlient
type __UpdateAccessProviderInput struct {
	Id            string              `json:"id"`
	Ap            AccessProviderInput `json:"ap"`
	OverrideLocks *bool               `json:"overrideLocks,omitempty"`
}

// GetId returns __UpdateAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateAccessProviderInput) GetId() string { return v.Id }

// GetAp returns __UpdateAccessProviderInput.Ap, and is useful for accessing the field via an interface.
func (v *__UpdateAccessProviderInput) GetAp() AccessProviderInput { return v.Ap }

// GetOverrideLocks returns __UpdateAccessProviderInput.OverrideLocks, and is useful for accessing the field via an interface.
func (v *__UpdateAccessProviderInput) GetOverrideLocks() *bool { return v.OverrideLocks }

// __UpdateDataSourceInput is used internally by genqlient
type __UpdateDataSourceInput struct {
	Id    string          `json:"id"`
	Input DataSourceInput `json:"input"`
}

// GetId returns __UpdateDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateDataSourceInput) GetId() string { return v.Id }

// GetInput returns __UpdateDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateDataSourceInput) GetInput() DataSourceInput { return v.Input }

// __UpdateGrantCategoryInput is used internally by genqlient
type __UpdateGrantCategoryInput struct {
	Id    string             `json:"id"`
	Input GrantCategoryInput `json:"input"`
}

// GetId returns __UpdateGrantCategoryInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateGrantCategoryInput) GetId() string { return v.Id }

// GetInput returns __UpdateGrantCategoryInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateGrantCategoryInput) GetInput() GrantCategoryInput { return v.Input }

// __UpdateIdentityStoreInput is used internally by genqlient
type __UpdateIdentityStoreInput struct {
	Id    string             `json:"id"`
	Input IdentityStoreInput `json:"input"`
}

// GetId returns __UpdateIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreInput) GetId() string { return v.Id }

// GetInput returns __UpdateIdentityStoreInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreInput) GetInput() IdentityStoreInput { return v.Input }

// __UpdateIdentityStoreMasterFlagInput is used internally by genqlient
type __UpdateIdentityStoreMasterFlagInput struct {
	Id     string `json:"id"`
	Master bool   `json:"master"`
}

// GetId returns __UpdateIdentityStoreMasterFlagInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreMasterFlagInput) GetId() string { return v.Id }

// GetMaster returns __UpdateIdentityStoreMasterFlagInput.Master, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreMasterFlagInput) GetMaster() bool { return v.Master }

// __UpdateRoleAssigneesOnAccessProviderInput is used internally by genqlient
type __UpdateRoleAssigneesOnAccessProviderInput struct {
	ApId      string   `json:"apId"`
	RoleID    string   `json:"roleID"`
	Assignees []string `json:"assignees"`
}

// GetApId returns __UpdateRoleAssigneesOnAccessProviderInput.ApId, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnAccessProviderInput) GetApId() string { return v.ApId }

// GetRoleID returns __UpdateRoleAssigneesOnAccessProviderInput.RoleID, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnAccessProviderInput) GetRoleID() string { return v.RoleID }

// GetAssignees returns __UpdateRoleAssigneesOnAccessProviderInput.Assignees, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnAccessProviderInput) GetAssignees() []string { return v.Assignees }

// __UpdateRoleAssigneesOnDataObjectInput is used internally by genqlient
type __UpdateRoleAssigneesOnDataObjectInput struct {
	DoId      string   `json:"doId"`
	RoleID    string   `json:"roleID"`
	Assignees []string `json:"assignees"`
}

// GetDoId returns __UpdateRoleAssigneesOnDataObjectInput.DoId, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataObjectInput) GetDoId() string { return v.DoId }

// GetRoleID returns __UpdateRoleAssigneesOnDataObjectInput.RoleID, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataObjectInput) GetRoleID() string { return v.RoleID }

// GetAssignees returns __UpdateRoleAssigneesOnDataObjectInput.Assignees, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataObjectInput) GetAssignees() []string { return v.Assignees }

// __UpdateRoleAssigneesOnDataSourceInput is used internally by genqlient
type __UpdateRoleAssigneesOnDataSourceInput struct {
	DsId      string   `json:"dsId"`
	RoleID    string   `json:"roleID"`
	Assignees []string `json:"assignees"`
}

// GetDsId returns __UpdateRoleAssigneesOnDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataSourceInput) GetDsId() string { return v.DsId }

// GetRoleID returns __UpdateRoleAssigneesOnDataSourceInput.RoleID, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataSourceInput) GetRoleID() string { return v.RoleID }

// GetAssignees returns __UpdateRoleAssigneesOnDataSourceInput.Assignees, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnDataSourceInput) GetAssignees() []string { return v.Assignees }

// __UpdateRoleAssigneesOnIdentityStoreInput is used internally by genqlient
type __UpdateRoleAssigneesOnIdentityStoreInput struct {
	IsId      string   `json:"isId"`
	RoleID    string   `json:"roleID"`
	Assignees []string `json:"assignees"`
}

// GetIsId returns __UpdateRoleAssigneesOnIdentityStoreInput.IsId, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnIdentityStoreInput) GetIsId() string { return v.IsId }

// GetRoleID returns __UpdateRoleAssigneesOnIdentityStoreInput.RoleID, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnIdentityStoreInput) GetRoleID() string { return v.RoleID }

// GetAssignees returns __UpdateRoleAssigneesOnIdentityStoreInput.Assignees, and is useful for accessing the field via an interface.
func (v *__UpdateRoleAssigneesOnIdentityStoreInput) GetAssignees() []string { return v.Assignees }

// __UpdateUserInput is used internally by genqlient
type __UpdateUserInput struct {
	UId   string    `json:"uId"`
	Input UserInput `json:"input"`
}

// GetUId returns __UpdateUserInput.UId, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetUId() string { return v.UId }

// GetInput returns __UpdateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetInput() UserInput { return v.Input }

// The mutation executed by ActivateAccessProvider.
const ActivateAccessProvider_Operation = `
mutation ActivateAccessProvider ($id: ID!) {
	activateAccessProvider(id: $id) {
		__typename
		... AccessProvider
		... NotFoundError
		... PermissionDeniedError
		... InvalidInputError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func ActivateAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *ActivateAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ActivateAccessProvider",
		Query:  ActivateAccessProvider_Operation,
		Variables: &__ActivateAccessProviderInput{
			Id: id,
		},
	}

	data_ = &ActivateAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AddIdentityStoreToDataSource.
const AddIdentityStoreToDataSource_Operation = `
mutation AddIdentityStoreToDataSource ($dsId: ID!, $isId: ID!) {
	addIdentityStoreToDataSource(dsId: $dsId, isId: $isId) {
		__typename
		... DataSource
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AddIdentityStoreToDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	dsId string,
	isId string,
) (data_ *AddIdentityStoreToDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AddIdentityStoreToDataSource",
		Query:  AddIdentityStoreToDataSource_Operation,
		Variables: &__AddIdentityStoreToDataSourceInput{
			DsId: dsId,
			IsId: isId,
		},
	}

	data_ = &AddIdentityStoreToDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AssignGlobalRole.
const AssignGlobalRole_Operation = `
mutation AssignGlobalRole ($role: ID!, $to: [ID!]!) {
	assignGlobalRole(role: $role, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AssignGlobalRole(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	to []string,
) (data_ *AssignGlobalRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AssignGlobalRole",
		Query:  AssignGlobalRole_Operation,
		Variables: &__AssignGlobalRoleInput{
			Role: role,
			To:   to,
		},
	}

	data_ = &AssignGlobalRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AssignRoleOnAccessProvider.
const AssignRoleOnAccessProvider_Operation = `
mutation AssignRoleOnAccessProvider ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	assignRoleOnAccessProvider(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AssignRoleOnAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *AssignRoleOnAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AssignRoleOnAccessProvider",
		Query:  AssignRoleOnAccessProvider_Operation,
		Variables: &__AssignRoleOnAccessProviderInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &AssignRoleOnAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AssignRoleOnDataObject.
const AssignRoleOnDataObject_Operation = `
mutation AssignRoleOnDataObject ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	assignRoleOnDataObject(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AssignRoleOnDataObject(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *AssignRoleOnDataObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AssignRoleOnDataObject",
		Query:  AssignRoleOnDataObject_Operation,
		Variables: &__AssignRoleOnDataObjectInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &AssignRoleOnDataObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AssignRoleOnDataSource.
const AssignRoleOnDataSource_Operation = `
mutation AssignRoleOnDataSource ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	assignRoleOnDataSource(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AssignRoleOnDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *AssignRoleOnDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AssignRoleOnDataSource",
		Query:  AssignRoleOnDataSource_Operation,
		Variables: &__AssignRoleOnDataSourceInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &AssignRoleOnDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by AssignRoleOnIdentityStore.
const AssignRoleOnIdentityStore_Operation = `
mutation AssignRoleOnIdentityStore ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	assignRoleOnIdentityStore(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AssignRoleOnIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *AssignRoleOnIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AssignRoleOnIdentityStore",
		Query:  AssignRoleOnIdentityStore_Operation,
		Variables: &__AssignRoleOnIdentityStoreInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &AssignRoleOnIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateAccessProvider.
const CreateAccessProvider_Operation = `
mutation CreateAccessProvider ($ap: AccessProviderInput!) {
	createAccessProvider(input: $ap, enableAdditionalAccessRequests: false) {
		__typename
		... AccessProvider
		... on AccessProviderWithOptionalAccessRequests {
			accessProvider {
				... AccessProvider
			}
		}
		... PermissionDeniedError
		... InvalidInputError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func CreateAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	ap AccessProviderInput,
) (data_ *CreateAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateAccessProvider",
		Query:  CreateAccessProvider_Operation,
		Variables: &__CreateAccessProviderInput{
			Ap: ap,
		},
	}

	data_ = &CreateAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateDataSource.
const CreateDataSource_Operation = `
mutation CreateDataSource ($input: DataSourceInput!) {
	createDataSource(input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func CreateDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	input DataSourceInput,
) (data_ *CreateDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateDataSource",
		Query:  CreateDataSource_Operation,
		Variables: &__CreateDataSourceInput{
			Input: input,
		},
	}

	data_ = &CreateDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateGrantCategory.
const CreateGrantCategory_Operation = `
mutation CreateGrantCategory ($input: GrantCategoryInput!) {
	createGrantCategory(input: $input) {
		__typename
		... GrantCategoryDetails
		... PermissionDeniedError
		... NotFoundError
		... InvalidInputError
	}
}
fragment GrantCategoryDetails on GrantCategory {
	id
	createdAt
	modifiedAt
	isSystem
	name
	description
	icon
	isDefault
	canCreate
	allowDuplicateNames
	multiDataSource
	defaultTypePerDataSource {
		... GrantCategoryTypeForDataSource
	}
	allowedWhoItems {
		... GrantCategoryAllowedWhoItems
	}
	allowedWhatItems {
		... GrantCategoryAllowedWhatItems
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategoryTypeForDataSource on GrantCategoryTypeForDataSource {
	DataSource
	Type
}
fragment GrantCategoryAllowedWhoItems on GrantCategoryAllowedWhoItems {
	user
	group
	inheritance
	self
	categories
}
fragment GrantCategoryAllowedWhatItems on GrantCategoryAllowedWhatItems {
	dataObject
}
`

func CreateGrantCategory(
	ctx_ context.Context,
	client_ graphql.Client,
	input GrantCategoryInput,
) (data_ *CreateGrantCategoryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateGrantCategory",
		Query:  CreateGrantCategory_Operation,
		Variables: &__CreateGrantCategoryInput{
			Input: input,
		},
	}

	data_ = &CreateGrantCategoryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateIdentityStore.
const CreateIdentityStore_Operation = `
mutation CreateIdentityStore ($input: IdentityStoreInput!) {
	createIdentityStore(input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... AlreadyExistsError
		... IdentityStore
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func CreateIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	input IdentityStoreInput,
) (data_ *CreateIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateIdentityStore",
		Query:  CreateIdentityStore_Operation,
		Variables: &__CreateIdentityStoreInput{
			Input: input,
		},
	}

	data_ = &CreateIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateUser.
const CreateUser_Operation = `
mutation CreateUser ($input: UserInput!) {
	createUser(input: $input) {
		__typename
		... User
		... PermissionDeniedError
		... NotFoundError
		... InvalidEmailError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
`

func CreateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	input UserInput,
) (data_ *CreateUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateUser",
		Query:  CreateUser_Operation,
		Variables: &__CreateUserInput{
			Input: input,
		},
	}

	data_ = &CreateUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by CurrentUser.
const CurrentUser_Operation = `
query CurrentUser {
	currentUser {
		... User
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
`

func CurrentUser(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *CurrentUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CurrentUser",
		Query:  CurrentUser_Operation,
	}

	data_ = &CurrentUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by DataObjectByExternalId.
const DataObjectByExternalId_Operation = `
query DataObjectByExternalId ($fullname: String!, $dataSourceId: ID!, $includeDataSource: Boolean!) {
	dataObjects(filter: {fullNames:[$fullname],dataSources:[$dataSourceId],includeDataSource:$includeDataSource}) {
		edges {
			node {
				__typename
				... DataObject
			}
		}
	}
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
	description
	dataSource {
		id
	}
	parent {
		id
	}
}
`

func DataObjectByExternalId(
	ctx_ context.Context,
	client_ graphql.Client,
	fullname string,
	dataSourceId string,
	includeDataSource bool,
) (data_ *DataObjectByExternalIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DataObjectByExternalId",
		Query:  DataObjectByExternalId_Operation,
		Variables: &__DataObjectByExternalIdInput{
			Fullname:          fullname,
			DataSourceId:      dataSourceId,
			IncludeDataSource: includeDataSource,
		},
	}

	data_ = &DataObjectByExternalIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by DataSourceIdentityStores.
const DataSourceIdentityStores_Operation = `
query DataSourceIdentityStores ($id: ID!) {
	dataSource(id: $id) {
		__typename
		... on DataSource {
			identityStores {
				... IdentityStore
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func DataSourceIdentityStores(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DataSourceIdentityStoresResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DataSourceIdentityStores",
		Query:  DataSourceIdentityStores_Operation,
		Variables: &__DataSourceIdentityStoresInput{
			Id: id,
		},
	}

	data_ = &DataSourceIdentityStoresResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by DataSourceMaskInformation.
const DataSourceMaskInformation_Operation = `
query DataSourceMaskInformation ($id: ID!) {
	dataSource(id: $id) {
		__typename
		... on DataSource {
			maskingMetadata {
				... MaskingMetadata
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment MaskingMetadata on MaskingMetadata {
	defaultMaskExternalName
	maskTypes {
		... MaskType
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func DataSourceMaskInformation(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DataSourceMaskInformationResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DataSourceMaskInformation",
		Query:  DataSourceMaskInformation_Operation,
		Variables: &__DataSourceMaskInformationInput{
			Id: id,
		},
	}

	data_ = &DataSourceMaskInformationResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeactivateAccessProvider.
const DeactivateAccessProvider_Operation = `
mutation DeactivateAccessProvider ($id: ID!) {
	deactivateAccessProvider(id: $id) {
		__typename
		... AccessProvider
		... NotFoundError
		... PermissionDeniedError
		... InvalidInputError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func DeactivateAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeactivateAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeactivateAccessProvider",
		Query:  DeactivateAccessProvider_Operation,
		Variables: &__DeactivateAccessProviderInput{
			Id: id,
		},
	}

	data_ = &DeactivateAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteAccessProvider.
const DeleteAccessProvider_Operation = `
mutation DeleteAccessProvider ($id: ID!, $overrideLocks: Boolean) {
	deleteAccessProvider(id: $id, overrideLocks: $overrideLocks) {
		__typename
		... AccessProvider
		... NotFoundError
		... PermissionDeniedError
		... InvalidInputError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func DeleteAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	overrideLocks *bool,
) (data_ *DeleteAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteAccessProvider",
		Query:  DeleteAccessProvider_Operation,
		Variables: &__DeleteAccessProviderInput{
			Id:            id,
			OverrideLocks: overrideLocks,
		},
	}

	data_ = &DeleteAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteDataSource.
const DeleteDataSource_Operation = `
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id) {
		__typename
		... PermissionDeniedError
		... on DeleteDataSource {
			success
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DeleteDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteDataSource",
		Query:  DeleteDataSource_Operation,
		Variables: &__DeleteDataSourceInput{
			Id: id,
		},
	}

	data_ = &DeleteDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteGrantCategory.
const DeleteGrantCategory_Operation = `
mutation DeleteGrantCategory ($id: ID!) {
	deleteGrantCategory(id: $id) {
		__typename
		... DeleteGrantCategoryResult
		... PermissionDeniedError
		... NotFoundError
		... InvalidInputError
	}
}
fragment DeleteGrantCategoryResult on DeleteGrantCategory {
	success
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
`

func DeleteGrantCategory(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteGrantCategoryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteGrantCategory",
		Query:  DeleteGrantCategory_Operation,
		Variables: &__DeleteGrantCategoryInput{
			Id: id,
		},
	}

	data_ = &DeleteGrantCategoryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteIdentityStore.
const DeleteIdentityStore_Operation = `
mutation DeleteIdentityStore ($id: ID!) {
	deleteIdentityStore(id: $id) {
		__typename
		... PermissionDeniedError
		... on DeleteIdentityStore {
			success
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DeleteIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteIdentityStore",
		Query:  DeleteIdentityStore_Operation,
		Variables: &__DeleteIdentityStoreInput{
			Id: id,
		},
	}

	data_ = &DeleteIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteUser.
const DeleteUser_Operation = `
mutation DeleteUser ($uId: ID!) {
	deleteUser(id: $uId) {
		__typename
		... on UserDelete {
			success
		}
		... PermissionDeniedError
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DeleteUser(
	ctx_ context.Context,
	client_ graphql.Client,
	uId string,
) (data_ *DeleteUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteUser",
		Query:  DeleteUser_Operation,
		Variables: &__DeleteUserInput{
			UId: uId,
		},
	}

	data_ = &DeleteUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAccessProvider.
const GetAccessProvider_Operation = `
query GetAccessProvider ($id: ID!) {
	accessProvider(id: $id) {
		__typename
		... AccessProvider
		... PermissionDeniedError
		... NotFoundError
		... InvalidInputError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func GetAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAccessProvider",
		Query:  GetAccessProvider_Operation,
		Variables: &__GetAccessProviderInput{
			Id: id,
		},
	}

	data_ = &GetAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAccessProviderWhatAccessProviders.
const GetAccessProviderWhatAccessProviders_Operation = `
query GetAccessProviderWhatAccessProviders ($id: ID!, $after: String, $limit: Int, $search: String, $order: [AccessWhatOrderByInput!], $filter: AccessProviderWhatAccessProviderFilterInput) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whatAccessProviders(after: $after, limit: $limit, search: $search, filter: $filter, order: $order) {
				__typename
				... AccessProviderWhatAccessProviderList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhatAccessProviderList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessWhatAccessProviderItem
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessWhatAccessProviderItem on AccessWhatAccessProviderItem {
	accessProvider {
		... AccessProvider
	}
	expiresAt
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func GetAccessProviderWhatAccessProviders(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	after *string,
	limit *int,
	search *string,
	order []AccessWhatOrderByInput,
	filter *AccessProviderWhatAccessProviderFilterInput,
) (data_ *GetAccessProviderWhatAccessProvidersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAccessProviderWhatAccessProviders",
		Query:  GetAccessProviderWhatAccessProviders_Operation,
		Variables: &__GetAccessProviderWhatAccessProvidersInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Search: search,
			Order:  order,
			Filter: filter,
		},
	}

	data_ = &GetAccessProviderWhatAccessProvidersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAccessProviderWhatDataObjectList.
const GetAccessProviderWhatDataObjectList_Operation = `
query GetAccessProviderWhatDataObjectList ($id: ID!, $after: String, $limit: Int, $filter: AccessWhatFilterInput, $order: [AccessWhatOrderByInput!]) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whatDataObjects(after: $after, limit: $limit, filter: $filter, order: $order) {
				__typename
				... AccessProviderWhatList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhatList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProviderWhatListItem
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProviderWhatListItem on AccessWhatItem {
	dataObject {
		... DataObject
	}
	globalPermissions
	permissions
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
	description
	dataSource {
		id
	}
	parent {
		id
	}
}
`

func GetAccessProviderWhatDataObjectList(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	after *string,
	limit *int,
	filter *AccessWhatFilterInput,
	order []AccessWhatOrderByInput,
) (data_ *GetAccessProviderWhatDataObjectListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAccessProviderWhatDataObjectList",
		Query:  GetAccessProviderWhatDataObjectList_Operation,
		Variables: &__GetAccessProviderWhatDataObjectListInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &GetAccessProviderWhatDataObjectListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAccessProviderWhoList.
const GetAccessProviderWhoList_Operation = `
query GetAccessProviderWhoList ($id: ID!, $after: String, $limit: Int, $search: String, $order: [AccessProviderWhoOrderByInput!]) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whoList(after: $after, limit: $limit, search: $search, order: $order) {
				__typename
				... AccessProviderWhoList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhoList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProviderWhoListItem
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProviderWhoListItem on AccessWhoItem {
	expiresAfter
	expiresAt
	promiseDuration
	type
	item {
		__typename
		... on AccessProvider {
			id
			name
		}
		... on Group {
			name
			id
			identityStore {
				id
				name
			}
		}
		... on User {
			... User
		}
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
`

func GetAccessProviderWhoList(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	after *string,
	limit *int,
	search *string,
	order []AccessProviderWhoOrderByInput,
) (data_ *GetAccessProviderWhoListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAccessProviderWhoList",
		Query:  GetAccessProviderWhoList_Operation,
		Variables: &__GetAccessProviderWhoListInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Search: search,
			Order:  order,
		},
	}

	data_ = &GetAccessProviderWhoListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetDataObject.
const GetDataObject_Operation = `
query GetDataObject ($dataObjectId: ID!) {
	dataObject(id: $dataObjectId) {
		... DataObject
	}
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
	description
	dataSource {
		id
	}
	parent {
		id
	}
}
`

func GetDataObject(
	ctx_ context.Context,
	client_ graphql.Client,
	dataObjectId string,
) (data_ *GetDataObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetDataObject",
		Query:  GetDataObject_Operation,
		Variables: &__GetDataObjectInput{
			DataObjectId: dataObjectId,
		},
	}

	data_ = &GetDataObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetDataSource.
const GetDataSource_Operation = `
query GetDataSource ($id: ID!) {
	dataSource(id: $id) {
		__typename
		... DataSource
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func GetDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetDataSource",
		Query:  GetDataSource_Operation,
		Variables: &__GetDataSourceInput{
			Id: id,
		},
	}

	data_ = &GetDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetGrantCategory.
const GetGrantCategory_Operation = `
query GetGrantCategory ($id: ID!) {
	grantCategory(id: $id) {
		__typename
		... GrantCategoryDetails
		... PermissionDeniedError
		... NotFoundError
		... InvalidInputError
	}
}
fragment GrantCategoryDetails on GrantCategory {
	id
	createdAt
	modifiedAt
	isSystem
	name
	description
	icon
	isDefault
	canCreate
	allowDuplicateNames
	multiDataSource
	defaultTypePerDataSource {
		... GrantCategoryTypeForDataSource
	}
	allowedWhoItems {
		... GrantCategoryAllowedWhoItems
	}
	allowedWhatItems {
		... GrantCategoryAllowedWhatItems
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategoryTypeForDataSource on GrantCategoryTypeForDataSource {
	DataSource
	Type
}
fragment GrantCategoryAllowedWhoItems on GrantCategoryAllowedWhoItems {
	user
	group
	inheritance
	self
	categories
}
fragment GrantCategoryAllowedWhatItems on GrantCategoryAllowedWhatItems {
	dataObject
}
`

func GetGrantCategory(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetGrantCategoryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetGrantCategory",
		Query:  GetGrantCategory_Operation,
		Variables: &__GetGrantCategoryInput{
			Id: id,
		},
	}

	data_ = &GetGrantCategoryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetGroup.
const GetGroup_Operation = `
query GetGroup ($id: ID!) {
	group(id: $id) {
		... Group
	}
}
fragment Group on Group {
	id
	name
	displayName
	description
	deleted
}
`

func GetGroup(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetGroupResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetGroup",
		Query:  GetGroup_Operation,
		Variables: &__GetGroupInput{
			Id: id,
		},
	}

	data_ = &GetGroupResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetIdentityStore.
const GetIdentityStore_Operation = `
query GetIdentityStore ($id: ID!) {
	identityStore(id: $id) {
		__typename
		... IdentityStore
		... NotFoundError
		... PermissionDeniedError
		... AlreadyExistsError
	}
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
`

func GetIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetIdentityStore",
		Query:  GetIdentityStore_Operation,
		Variables: &__GetIdentityStoreInput{
			Id: id,
		},
	}

	data_ = &GetIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetRole.
const GetRole_Operation = `
query GetRole ($id: ID!) {
	role(id: $id) {
		... Role
	}
}
fragment Role on Role {
	id
	description
	name
}
`

func GetRole(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetRole",
		Query:  GetRole_Operation,
		Variables: &__GetRoleInput{
			Id: id,
		},
	}

	data_ = &GetRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUser.
const GetUser_Operation = `
query GetUser ($id: ID!) {
	user(id: $id) {
		__typename
		... User
		... NotFoundError
		... PermissionDeniedError
		... InvalidEmailError
		... InvalidInputError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
`

func GetUser(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUser",
		Query:  GetUser_Operation,
		Variables: &__GetUserInput{
			Id: id,
		},
	}

	data_ = &GetUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserByEmail.
const GetUserByEmail_Operation = `
query GetUserByEmail ($email: String!) {
	userByEmail(email: $email) {
		__typename
		... User
		... PermissionDeniedError
		... NotFoundError
		... InvalidEmailError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
`

func GetUserByEmail(
	ctx_ context.Context,
	client_ graphql.Client,
	email string,
) (data_ *GetUserByEmailResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserByEmail",
		Query:  GetUserByEmail_Operation,
		Variables: &__GetUserByEmailInput{
			Email: email,
		},
	}

	data_ = &GetUserByEmailResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by InviteAsRaitoUser.
const InviteAsRaitoUser_Operation = `
mutation InviteAsRaitoUser ($uId: ID!, $noPassword: Boolean) {
	inviteAsRaitoUser(id: $uId, noPassword: $noPassword) {
		__typename
		... User
		... InvalidEmailError
		... NotFoundError
		... PermissionDeniedError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func InviteAsRaitoUser(
	ctx_ context.Context,
	client_ graphql.Client,
	uId string,
	noPassword *bool,
) (data_ *InviteAsRaitoUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "InviteAsRaitoUser",
		Query:  InviteAsRaitoUser_Operation,
		Variables: &__InviteAsRaitoUserInput{
			UId:        uId,
			NoPassword: noPassword,
		},
	}

	data_ = &InviteAsRaitoUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListAccessProviderAbacWhatScope.
const ListAccessProviderAbacWhatScope_Operation = `
query ListAccessProviderAbacWhatScope ($id: ID!, $after: String, $limit: Int, $search: String, $order: [AccessWhatOrderByInput!]) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whatAbacScope(after: $after, limit: $limit, search: $search, order: $order) {
				__typename
				... AccessProviderWhatAbacScopeList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhatAbacScopeList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... DataObject
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
	description
	dataSource {
		id
	}
	parent {
		id
	}
}
`

func ListAccessProviderAbacWhatScope(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	after *string,
	limit *int,
	search *string,
	order []AccessWhatOrderByInput,
) (data_ *ListAccessProviderAbacWhatScopeResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListAccessProviderAbacWhatScope",
		Query:  ListAccessProviderAbacWhatScope_Operation,
		Variables: &__ListAccessProviderAbacWhatScopeInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Search: search,
			Order:  order,
		},
	}

	data_ = &ListAccessProviderAbacWhatScopeResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListAccessProviders.
const ListAccessProviders_Operation = `
query ListAccessProviders ($after: String, $limit: Int, $filter: AccessProviderFilterInput, $order: [AccessProviderOrderByInput!]) {
	accessProviders(after: $after, limit: $limit, filter: $filter, order: $order) {
		__typename
		... AccessProviderPage
		... PermissionDeniedError
	}
}
fragment AccessProviderPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProvider
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func ListAccessProviders(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *AccessProviderFilterInput,
	order []AccessProviderOrderByInput,
) (data_ *ListAccessProvidersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListAccessProviders",
		Query:  ListAccessProviders_Operation,
		Variables: &__ListAccessProvidersInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListAccessProvidersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListDataObjects.
const ListDataObjects_Operation = `
query ListDataObjects ($after: String, $limit: Int, $filter: DataObjectFilterInput, $order: [DataObjectOrderByInput!]) {
	dataObjects(after: $after, limit: $limit, filter: $filter, order: $order) {
		... DataObjectPage
	}
}
fragment DataObjectPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... DataObject
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
	description
	dataSource {
		id
	}
	parent {
		id
	}
}
`

func ListDataObjects(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *DataObjectFilterInput,
	order []DataObjectOrderByInput,
) (data_ *ListDataObjectsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListDataObjects",
		Query:  ListDataObjects_Operation,
		Variables: &__ListDataObjectsInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListDataObjectsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListDataSources.
const ListDataSources_Operation = `
query ListDataSources ($after: String, $limit: Int, $filter: DataSourceFilterInput, $search: String, $order: [DataSourceOrderByInput!]) {
	dataSources(after: $after, limit: $limit, filter: $filter, order: $order, search: $search) {
		__typename
		... DataSourcePage
		... PermissionDeniedError
	}
}
fragment DataSourcePage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... DataSource
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func ListDataSources(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *DataSourceFilterInput,
	search *string,
	order []DataSourceOrderByInput,
) (data_ *ListDataSourcesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListDataSources",
		Query:  ListDataSources_Operation,
		Variables: &__ListDataSourcesInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Search: search,
			Order:  order,
		},
	}

	data_ = &ListDataSourcesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListGrantCategories.
const ListGrantCategories_Operation = `
query ListGrantCategories {
	grantCategories {
		... GrantCategoryDetails
	}
}
fragment GrantCategoryDetails on GrantCategory {
	id
	createdAt
	modifiedAt
	isSystem
	name
	description
	icon
	isDefault
	canCreate
	allowDuplicateNames
	multiDataSource
	defaultTypePerDataSource {
		... GrantCategoryTypeForDataSource
	}
	allowedWhoItems {
		... GrantCategoryAllowedWhoItems
	}
	allowedWhatItems {
		... GrantCategoryAllowedWhatItems
	}
}
fragment GrantCategoryTypeForDataSource on GrantCategoryTypeForDataSource {
	DataSource
	Type
}
fragment GrantCategoryAllowedWhoItems on GrantCategoryAllowedWhoItems {
	user
	group
	inheritance
	self
	categories
}
fragment GrantCategoryAllowedWhatItems on GrantCategoryAllowedWhatItems {
	dataObject
}
`

func ListGrantCategories(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ListGrantCategoriesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListGrantCategories",
		Query:  ListGrantCategories_Operation,
	}

	data_ = &ListGrantCategoriesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListGroups.
const ListGroups_Operation = `
query ListGroups ($after: String, $limit: Int, $filter: GroupFilterInput, $order: [GroupOrderByInput!]) {
	groups(after: $after, limit: $limit, filter: $filter, order: $order) {
		... GroupPage
	}
}
fragment GroupPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... Group
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment Group on Group {
	id
	name
	displayName
	description
	deleted
}
`

func ListGroups(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *GroupFilterInput,
	order []GroupOrderByInput,
) (data_ *ListGroupsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListGroups",
		Query:  ListGroups_Operation,
		Variables: &__ListGroupsInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListGroupsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListIdentityStores.
const ListIdentityStores_Operation = `
query ListIdentityStores ($after: String, $limit: Int, $search: String, $filter: IdentityStoreFilterInput, $order: [IdentityStoreOrderByInput!]) {
	identityStores(after: $after, limit: $limit, search: $search, filter: $filter, order: $order) {
		__typename
		... PermissionDeniedError
		... IdentityStorePage
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment IdentityStorePage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... IdentityStore
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func ListIdentityStores(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	search *string,
	filter *IdentityStoreFilterInput,
	order []IdentityStoreOrderByInput,
) (data_ *ListIdentityStoresResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListIdentityStores",
		Query:  ListIdentityStores_Operation,
		Variables: &__ListIdentityStoresInput{
			After:  after,
			Limit:  limit,
			Search: search,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListIdentityStoresResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignments.
const ListRoleAssignments_Operation = `
query ListRoleAssignments ($after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
		... RoleAssignmentPage
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment NotFoundError on NotFoundError {
	message
}
`

func ListRoleAssignments(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignments",
		Query:  ListRoleAssignments_Operation,
		Variables: &__ListRoleAssignmentsInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignmentsOnAccessProvider.
const ListRoleAssignmentsOnAccessProvider_Operation = `
query ListRoleAssignmentsOnAccessProvider ($apId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	accessProvider(id: $apId) {
		__typename
		... on AccessProvider {
			roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
				... RoleAssignmentPage
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
`

func ListRoleAssignmentsOnAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	apId string,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsOnAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignmentsOnAccessProvider",
		Query:  ListRoleAssignmentsOnAccessProvider_Operation,
		Variables: &__ListRoleAssignmentsOnAccessProviderInput{
			ApId:   apId,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsOnAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignmentsOnDataObject.
const ListRoleAssignmentsOnDataObject_Operation = `
query ListRoleAssignmentsOnDataObject ($doId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	dataObject(id: $doId) {
		roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
			... RoleAssignmentPage
		}
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment NotFoundError on NotFoundError {
	message
}
`

func ListRoleAssignmentsOnDataObject(
	ctx_ context.Context,
	client_ graphql.Client,
	doId string,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsOnDataObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignmentsOnDataObject",
		Query:  ListRoleAssignmentsOnDataObject_Operation,
		Variables: &__ListRoleAssignmentsOnDataObjectInput{
			DoId:   doId,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsOnDataObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignmentsOnDataSource.
const ListRoleAssignmentsOnDataSource_Operation = `
query ListRoleAssignmentsOnDataSource ($dsId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	dataSource(id: $dsId) {
		__typename
		... on DataSource {
			roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
				... RoleAssignmentPage
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
`

func ListRoleAssignmentsOnDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	dsId string,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsOnDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignmentsOnDataSource",
		Query:  ListRoleAssignmentsOnDataSource_Operation,
		Variables: &__ListRoleAssignmentsOnDataSourceInput{
			DsId:   dsId,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsOnDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignmentsOnIdentityStore.
const ListRoleAssignmentsOnIdentityStore_Operation = `
query ListRoleAssignmentsOnIdentityStore ($isId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	identityStore(id: $isId) {
		__typename
		... on IdentityStore {
			roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
				... RoleAssignmentPage
			}
		}
		... PermissionDeniedError
		... AlreadyExistsError
		... NotFoundError
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
`

func ListRoleAssignmentsOnIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	isId string,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsOnIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignmentsOnIdentityStore",
		Query:  ListRoleAssignmentsOnIdentityStore_Operation,
		Variables: &__ListRoleAssignmentsOnIdentityStoreInput{
			IsId:   isId,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsOnIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoleAssignmentsOnUser.
const ListRoleAssignmentsOnUser_Operation = `
query ListRoleAssignmentsOnUser ($userId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
	user(id: $userId) {
		__typename
		... on User {
			roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
				... RoleAssignmentPage
			}
		}
		... InvalidInputError
		... InvalidEmailError
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment RoleAssignmentPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... RoleAssignment
		}
	}
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment RoleAssignment on RoleAssignment {
	id
	role {
		... Role
	}
	on {
		__typename
		... on AccessProvider {
			id
		}
		... on DataSource {
			id
		}
		... on DataObject {
			id
		}
		... NotFoundError
	}
	to {
		__typename
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment Role on Role {
	id
	description
	name
}
`

func ListRoleAssignmentsOnUser(
	ctx_ context.Context,
	client_ graphql.Client,
	userId string,
	after *string,
	limit *int,
	filter *RoleAssignmentFilterInput,
	order []RoleAssignmentOrderInput,
) (data_ *ListRoleAssignmentsOnUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoleAssignmentsOnUser",
		Query:  ListRoleAssignmentsOnUser_Operation,
		Variables: &__ListRoleAssignmentsOnUserInput{
			UserId: userId,
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRoleAssignmentsOnUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListRoles.
const ListRoles_Operation = `
query ListRoles ($after: String, $limit: Int, $filter: RoleFilterInput, $order: [RoleOrderByInput!]) {
	roles(after: $after, limit: $limit, filter: $filter, order: $order) {
		... RolePage
	}
}
fragment RolePage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... Role
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment Role on Role {
	id
	description
	name
}
`

func ListRoles(
	ctx_ context.Context,
	client_ graphql.Client,
	after *string,
	limit *int,
	filter *RoleFilterInput,
	order []RoleOrderByInput,
) (data_ *ListRolesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRoles",
		Query:  ListRoles_Operation,
		Variables: &__ListRolesInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}

	data_ = &ListRolesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by RemoveAsRaitoUser.
const RemoveAsRaitoUser_Operation = `
mutation RemoveAsRaitoUser ($uId: ID!) {
	removeAsRaitoUser(id: $uId) {
		__typename
		... User
		... InvalidEmailError
		... NotFoundError
		... PermissionDeniedError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func RemoveAsRaitoUser(
	ctx_ context.Context,
	client_ graphql.Client,
	uId string,
) (data_ *RemoveAsRaitoUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RemoveAsRaitoUser",
		Query:  RemoveAsRaitoUser_Operation,
		Variables: &__RemoveAsRaitoUserInput{
			UId: uId,
		},
	}

	data_ = &RemoveAsRaitoUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by RemoveIdentityStoreFromDataSource.
const RemoveIdentityStoreFromDataSource_Operation = `
mutation RemoveIdentityStoreFromDataSource ($dsId: ID!, $isId: ID!) {
	removeIdentityStoreFromDataSource(dsId: $dsId, isId: $isId) {
		__typename
		... DataSource
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func RemoveIdentityStoreFromDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	dsId string,
	isId string,
) (data_ *RemoveIdentityStoreFromDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RemoveIdentityStoreFromDataSource",
		Query:  RemoveIdentityStoreFromDataSource_Operation,
		Variables: &__RemoveIdentityStoreFromDataSourceInput{
			DsId: dsId,
			IsId: isId,
		},
	}

	data_ = &RemoveIdentityStoreFromDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SetGlobalRolesForUser.
const SetGlobalRolesForUser_Operation = `
mutation SetGlobalRolesForUser ($user: ID!, $roles: [ID!]!) {
	setGlobalRolesForUser(user: $user, roles: $roles) {
		__typename
		... on SetGlobalRolesForUser {
			success
		}
		... PermissionDeniedError
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func SetGlobalRolesForUser(
	ctx_ context.Context,
	client_ graphql.Client,
	user string,
	roles []string,
) (data_ *SetGlobalRolesForUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SetGlobalRolesForUser",
		Query:  SetGlobalRolesForUser_Operation,
		Variables: &__SetGlobalRolesForUserInput{
			User:  user,
			Roles: roles,
		},
	}

	data_ = &SetGlobalRolesForUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SetUserPassword.
const SetUserPassword_Operation = `
mutation SetUserPassword ($uId: ID!, $password: String!) {
	setPassword(id: $uId, password: $password) {
		__typename
		... User
		... PermissionDeniedError
		... NotFoundError
		... InvalidEmailError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
`

func SetUserPassword(
	ctx_ context.Context,
	client_ graphql.Client,
	uId string,
	password string,
) (data_ *SetUserPasswordResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SetUserPassword",
		Query:  SetUserPassword_Operation,
		Variables: &__SetUserPasswordInput{
			UId:      uId,
			Password: password,
		},
	}

	data_ = &SetUserPasswordResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UnassignGlobalRole.
const UnassignGlobalRole_Operation = `
mutation UnassignGlobalRole ($role: ID!, $to: [ID!]!) {
	unassignGlobalRole(role: $role, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UnassignGlobalRole(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	to []string,
) (data_ *UnassignGlobalRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UnassignGlobalRole",
		Query:  UnassignGlobalRole_Operation,
		Variables: &__UnassignGlobalRoleInput{
			Role: role,
			To:   to,
		},
	}

	data_ = &UnassignGlobalRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UnassignRoleFromAccessProvider.
const UnassignRoleFromAccessProvider_Operation = `
mutation UnassignRoleFromAccessProvider ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	unassignRoleFromAccessProvider(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UnassignRoleFromAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *UnassignRoleFromAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UnassignRoleFromAccessProvider",
		Query:  UnassignRoleFromAccessProvider_Operation,
		Variables: &__UnassignRoleFromAccessProviderInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &UnassignRoleFromAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UnassignRoleFromDataObject.
const UnassignRoleFromDataObject_Operation = `
mutation UnassignRoleFromDataObject ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	unassignRoleFromDataObject(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UnassignRoleFromDataObject(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *UnassignRoleFromDataObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UnassignRoleFromDataObject",
		Query:  UnassignRoleFromDataObject_Operation,
		Variables: &__UnassignRoleFromDataObjectInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &UnassignRoleFromDataObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UnassignRoleFromDataSource.
const UnassignRoleFromDataSource_Operation = `
mutation UnassignRoleFromDataSource ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	unassignRoleFromDataSource(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UnassignRoleFromDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *UnassignRoleFromDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UnassignRoleFromDataSource",
		Query:  UnassignRoleFromDataSource_Operation,
		Variables: &__UnassignRoleFromDataSourceInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &UnassignRoleFromDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UnassignRoleFromIdentityStore.
const UnassignRoleFromIdentityStore_Operation = `
mutation UnassignRoleFromIdentityStore ($role: ID!, $resourceId: ID!, $to: [ID!]!) {
	unassignRoleFromIdentityStore(role: $role, resourceId: $resourceId, to: $to) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UnassignRoleFromIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	role string,
	resourceId string,
	to []string,
) (data_ *UnassignRoleFromIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UnassignRoleFromIdentityStore",
		Query:  UnassignRoleFromIdentityStore_Operation,
		Variables: &__UnassignRoleFromIdentityStoreInput{
			Role:       role,
			ResourceId: resourceId,
			To:         to,
		},
	}

	data_ = &UnassignRoleFromIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateAccessProvider.
const UpdateAccessProvider_Operation = `
mutation UpdateAccessProvider ($id: ID!, $ap: AccessProviderInput!, $overrideLocks: Boolean) {
	updateAccessProvider(id: $id, input: $ap, enableAdditionalAccessRequests: false, overrideLocks: $overrideLocks) {
		__typename
		... AccessProvider
		... on AccessProviderWithOptionalAccessRequests {
			accessProvider {
				... AccessProvider
			}
		}
		... PermissionDeniedError
		... InvalidInputError
		... NotFoundError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	category {
		... GrantCategory
	}
	description
	policyRule
	external
	whatType
	whatAbacRule {
		... WhatAbacRule
	}
	whoType
	whoAbacRule {
		... WhoAbacRule
	}
	notInternalizable
	complete
	locks {
		... AccessProviderLocks
	}
	syncData {
		... SyncData
	}
	currentUserPartOfWho: entityPartOfWho(direct: true)
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment GrantCategory on GrantCategory {
	id
	name
	isSystem
	isDefault
}
fragment WhatAbacRule on WhatAbacRule {
	permissions
	globalPermissions
	doTypes
	ruleJson
}
fragment WhoAbacRule on WhoAbacRule {
	promiseDuration
	type
	ruleJson
}
fragment AccessProviderLocks on AccessProviderLockData {
	lockKey
	details {
		... AccessProviderLockDetails
	}
}
fragment SyncData on SyncData {
	dataSource {
		... DataSource
	}
	accessProviderType {
		type
	}
	actualName
	maskType {
		... MaskType
	}
	syncStatus
}
fragment AccessProviderLockDetails on AccessProviderLockDetails {
	reason
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment MaskType on MaskType {
	externalId
	displayName
	description
	dataTypes
}
`

func UpdateAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	ap AccessProviderInput,
	overrideLocks *bool,
) (data_ *UpdateAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateAccessProvider",
		Query:  UpdateAccessProvider_Operation,
		Variables: &__UpdateAccessProviderInput{
			Id:            id,
			Ap:            ap,
			OverrideLocks: overrideLocks,
		},
	}

	data_ = &UpdateAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateDataSource.
const UpdateDataSource_Operation = `
mutation UpdateDataSource ($id: ID!, $input: DataSourceInput!) {
	updateDataSource(id: $id, input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func UpdateDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	input DataSourceInput,
) (data_ *UpdateDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateDataSource",
		Query:  UpdateDataSource_Operation,
		Variables: &__UpdateDataSourceInput{
			Id:    id,
			Input: input,
		},
	}

	data_ = &UpdateDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateGrantCategory.
const UpdateGrantCategory_Operation = `
mutation UpdateGrantCategory ($id: ID!, $input: GrantCategoryInput!) {
	updateGrantCategory(id: $id, input: $input) {
		__typename
		... GrantCategoryDetails
		... PermissionDeniedError
		... NotFoundError
		... InvalidInputError
	}
}
fragment GrantCategoryDetails on GrantCategory {
	id
	createdAt
	modifiedAt
	isSystem
	name
	description
	icon
	isDefault
	canCreate
	allowDuplicateNames
	multiDataSource
	defaultTypePerDataSource {
		... GrantCategoryTypeForDataSource
	}
	allowedWhoItems {
		... GrantCategoryAllowedWhoItems
	}
	allowedWhatItems {
		... GrantCategoryAllowedWhatItems
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidInputError on InvalidInputError {
	message
}
fragment GrantCategoryTypeForDataSource on GrantCategoryTypeForDataSource {
	DataSource
	Type
}
fragment GrantCategoryAllowedWhoItems on GrantCategoryAllowedWhoItems {
	user
	group
	inheritance
	self
	categories
}
fragment GrantCategoryAllowedWhatItems on GrantCategoryAllowedWhatItems {
	dataObject
}
`

func UpdateGrantCategory(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	input GrantCategoryInput,
) (data_ *UpdateGrantCategoryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateGrantCategory",
		Query:  UpdateGrantCategory_Operation,
		Variables: &__UpdateGrantCategoryInput{
			Id:    id,
			Input: input,
		},
	}

	data_ = &UpdateGrantCategoryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateIdentityStore.
const UpdateIdentityStore_Operation = `
mutation UpdateIdentityStore ($id: ID!, $input: IdentityStoreInput!) {
	updateIdentityStore(id: $id, input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... AlreadyExistsError
		... IdentityStore
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func UpdateIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	input IdentityStoreInput,
) (data_ *UpdateIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateIdentityStore",
		Query:  UpdateIdentityStore_Operation,
		Variables: &__UpdateIdentityStoreInput{
			Id:    id,
			Input: input,
		},
	}

	data_ = &UpdateIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateIdentityStoreMasterFlag.
const UpdateIdentityStoreMasterFlag_Operation = `
mutation UpdateIdentityStoreMasterFlag ($id: ID!, $master: Boolean!) {
	updateIdentityStoreMasterFlag(id: $id, master: $master) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... AlreadyExistsError
		... IdentityStore
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func UpdateIdentityStoreMasterFlag(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	master bool,
) (data_ *UpdateIdentityStoreMasterFlagResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateIdentityStoreMasterFlag",
		Query:  UpdateIdentityStoreMasterFlag_Operation,
		Variables: &__UpdateIdentityStoreMasterFlagInput{
			Id:     id,
			Master: master,
		},
	}

	data_ = &UpdateIdentityStoreMasterFlagResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateRoleAssigneesOnAccessProvider.
const UpdateRoleAssigneesOnAccessProvider_Operation = `
mutation UpdateRoleAssigneesOnAccessProvider ($apId: ID!, $roleID: ID!, $assignees: [ID!]!) {
	updateRoleAssigneesOnAccessProvider(accessProvider: $apId, roleInput: {roleID:$roleID,assignees:$assignees}) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UpdateRoleAssigneesOnAccessProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	apId string,
	roleID string,
	assignees []string,
) (data_ *UpdateRoleAssigneesOnAccessProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateRoleAssigneesOnAccessProvider",
		Query:  UpdateRoleAssigneesOnAccessProvider_Operation,
		Variables: &__UpdateRoleAssigneesOnAccessProviderInput{
			ApId:      apId,
			RoleID:    roleID,
			Assignees: assignees,
		},
	}

	data_ = &UpdateRoleAssigneesOnAccessProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateRoleAssigneesOnDataObject.
const UpdateRoleAssigneesOnDataObject_Operation = `
mutation UpdateRoleAssigneesOnDataObject ($doId: ID!, $roleID: ID!, $assignees: [ID!]!) {
	updateRoleAssigneesOnDataObject(dataObject: $doId, roleInput: {roleID:$roleID,assignees:$assignees}) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UpdateRoleAssigneesOnDataObject(
	ctx_ context.Context,
	client_ graphql.Client,
	doId string,
	roleID string,
	assignees []string,
) (data_ *UpdateRoleAssigneesOnDataObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateRoleAssigneesOnDataObject",
		Query:  UpdateRoleAssigneesOnDataObject_Operation,
		Variables: &__UpdateRoleAssigneesOnDataObjectInput{
			DoId:      doId,
			RoleID:    roleID,
			Assignees: assignees,
		},
	}

	data_ = &UpdateRoleAssigneesOnDataObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateRoleAssigneesOnDataSource.
const UpdateRoleAssigneesOnDataSource_Operation = `
mutation UpdateRoleAssigneesOnDataSource ($dsId: ID!, $roleID: ID!, $assignees: [ID!]!) {
	updateRoleAssigneesOnDataSource(dataSource: $dsId, roleInput: {roleID:$roleID,assignees:$assignees}) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UpdateRoleAssigneesOnDataSource(
	ctx_ context.Context,
	client_ graphql.Client,
	dsId string,
	roleID string,
	assignees []string,
) (data_ *UpdateRoleAssigneesOnDataSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateRoleAssigneesOnDataSource",
		Query:  UpdateRoleAssigneesOnDataSource_Operation,
		Variables: &__UpdateRoleAssigneesOnDataSourceInput{
			DsId:      dsId,
			RoleID:    roleID,
			Assignees: assignees,
		},
	}

	data_ = &UpdateRoleAssigneesOnDataSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateRoleAssigneesOnIdentityStore.
const UpdateRoleAssigneesOnIdentityStore_Operation = `
mutation UpdateRoleAssigneesOnIdentityStore ($isId: ID!, $roleID: ID!, $assignees: [ID!]!) {
	updateRoleAssigneesOnIdentityStore(identityStore: $isId, roleInput: {roleID:$roleID,assignees:$assignees}) {
		__typename
		... Role
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment Role on Role {
	id
	description
	name
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func UpdateRoleAssigneesOnIdentityStore(
	ctx_ context.Context,
	client_ graphql.Client,
	isId string,
	roleID string,
	assignees []string,
) (data_ *UpdateRoleAssigneesOnIdentityStoreResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateRoleAssigneesOnIdentityStore",
		Query:  UpdateRoleAssigneesOnIdentityStore_Operation,
		Variables: &__UpdateRoleAssigneesOnIdentityStoreInput{
			IsId:      isId,
			RoleID:    roleID,
			Assignees: assignees,
		},
	}

	data_ = &UpdateRoleAssigneesOnIdentityStoreResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateUser.
const UpdateUser_Operation = `
mutation UpdateUser ($uId: ID!, $input: UserInput!) {
	updateUser(id: $uId, input: $input) {
		__typename
		... User
		... PermissionDeniedError
		... NotFoundError
		... InvalidEmailError
	}
}
fragment User on User {
	id
	name
	email
	isRaitoUser
	type
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment InvalidEmailError on InvalidEmailError {
	errEmail: email
	message
}
`

func UpdateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	uId string,
	input UserInput,
) (data_ *UpdateUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateUser",
		Query:  UpdateUser_Operation,
		Variables: &__UpdateUserInput{
			UId:   uId,
			Input: input,
		},
	}

	data_ = &UpdateUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
